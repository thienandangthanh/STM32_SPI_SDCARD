
f1-sdcard-eziya.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  080074f4  080074f4  000174f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800783c  0800783c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800783c  0800783c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800783c  0800783c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007840  08007840  00017840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041cc  20000084  080078c8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004250  080078c8  00024250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e57c  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002698  00000000  00000000  0002e629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00030cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019312  00000000  00000000  00032390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e501  00000000  00000000  0004b6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008686d  00000000  00000000  00059ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0410  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003804  00000000  00000000  000e0464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080074dc 	.word	0x080074dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080074dc 	.word	0x080074dc

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
extern UART_HandleTypeDef HUART_PRINTF;
#endif // USE_HUART_PRINTF

#if defined(__GNUC__)
int _write(int fd, char *ptr, int len)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
  #if USE_HUART_PRINTF
  HAL_UART_Transmit(&HUART_PRINTF, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80001ac:	68b9      	ldr	r1, [r7, #8]
 80001ae:	480c      	ldr	r0, [pc, #48]	; (80001e0 <_write+0x48>)
 80001b0:	f001 ff39 	bl	8002026 <HAL_UART_Transmit>
  #endif
  for (int i = 0; i < len; i++)
 80001b4:	2300      	movs	r3, #0
 80001b6:	617b      	str	r3, [r7, #20]
 80001b8:	e009      	b.n	80001ce <_write+0x36>
    ITM_SendChar((*ptr++));
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	1c5a      	adds	r2, r3, #1
 80001be:	60ba      	str	r2, [r7, #8]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffc2 	bl	800014c <ITM_SendChar>
  for (int i = 0; i < len; i++)
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	3301      	adds	r3, #1
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	697a      	ldr	r2, [r7, #20]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	dbf1      	blt.n	80001ba <_write+0x22>
  return len;
 80001d6:	687b      	ldr	r3, [r7, #4]
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3718      	adds	r7, #24
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	20001164 	.word	0x20001164

080001e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b096      	sub	sp, #88	; 0x58
 80001e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001ea:	f000 fba7 	bl	800093c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001ee:	f000 f905 	bl	80003fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001f2:	f000 f9a9 	bl	8000548 <MX_GPIO_Init>
	MX_SPI1_Init();
 80001f6:	f000 f947 	bl	8000488 <MX_SPI1_Init>
	MX_FATFS_Init();
 80001fa:	f002 f87f 	bl	80022fc <MX_FATFS_Init>
	MX_USART2_UART_Init();
 80001fe:	f000 f979 	bl	80004f4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	printf("SD Card connection test!\n");
 8000202:	4869      	ldr	r0, [pc, #420]	; (80003a8 <main+0x1c4>)
 8000204:	f006 fa06 	bl	8006614 <puts>
	HAL_Delay(1000);
 8000208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020c:	f000 fbf8 	bl	8000a00 <HAL_Delay>
	fres = f_mount(&FatFs, "", 1);
 8000210:	2201      	movs	r2, #1
 8000212:	4966      	ldr	r1, [pc, #408]	; (80003ac <main+0x1c8>)
 8000214:	4866      	ldr	r0, [pc, #408]	; (80003b0 <main+0x1cc>)
 8000216:	f004 fec9 	bl	8004fac <f_mount>
 800021a:	4603      	mov	r3, r0
 800021c:	461a      	mov	r2, r3
 800021e:	4b65      	ldr	r3, [pc, #404]	; (80003b4 <main+0x1d0>)
 8000220:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000222:	4b64      	ldr	r3, [pc, #400]	; (80003b4 <main+0x1d0>)
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d009      	beq.n	800023e <main+0x5a>
		printf("ERROR %d\n", fres);
 800022a:	4b62      	ldr	r3, [pc, #392]	; (80003b4 <main+0x1d0>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4619      	mov	r1, r3
 8000230:	4861      	ldr	r0, [pc, #388]	; (80003b8 <main+0x1d4>)
 8000232:	f006 f969 	bl	8006508 <iprintf>
		printf("Failed to mount SD card!\n");
 8000236:	4861      	ldr	r0, [pc, #388]	; (80003bc <main+0x1d8>)
 8000238:	f006 f9ec 	bl	8006614 <puts>
 800023c:	e002      	b.n	8000244 <main+0x60>
	} else
		printf("SD card is mounted successfully!\n");
 800023e:	4860      	ldr	r0, [pc, #384]	; (80003c0 <main+0x1dc>)
 8000240:	f006 f9e8 	bl	8006614 <puts>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS *getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000244:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000248:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800024c:	4619      	mov	r1, r3
 800024e:	4857      	ldr	r0, [pc, #348]	; (80003ac <main+0x1c8>)
 8000250:	f005 ffaf 	bl	80061b2 <f_getfree>
 8000254:	4603      	mov	r3, r0
 8000256:	461a      	mov	r2, r3
 8000258:	4b56      	ldr	r3, [pc, #344]	; (80003b4 <main+0x1d0>)
 800025a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800025c:	4b55      	ldr	r3, [pc, #340]	; (80003b4 <main+0x1d0>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d006      	beq.n	8000272 <main+0x8e>
		printf("f_getfree error (%i)\n", fres);
 8000264:	4b53      	ldr	r3, [pc, #332]	; (80003b4 <main+0x1d0>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4619      	mov	r1, r3
 800026a:	4856      	ldr	r0, [pc, #344]	; (80003c4 <main+0x1e0>)
 800026c:	f006 f94c 	bl	8006508 <iprintf>
		while (1)
 8000270:	e7fe      	b.n	8000270 <main+0x8c>
			;
	}
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000278:	3314      	adds	r3, #20
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1e9a      	subs	r2, r3, #2
 800027e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000284:	3302      	adds	r3, #2
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	fb03 f302 	mul.w	r3, r3, r2
 800028c:	657b      	str	r3, [r7, #84]	; 0x54
	free_sectors = free_clusters * getFreeFs->csize;
 800028e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000294:	3302      	adds	r3, #2
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461a      	mov	r2, r3
 800029a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800029c:	fb03 f302 	mul.w	r3, r3, r2
 80002a0:	653b      	str	r3, [r7, #80]	; 0x50
	printf("SD card stats:\n");
 80002a2:	4849      	ldr	r0, [pc, #292]	; (80003c8 <main+0x1e4>)
 80002a4:	f006 f9b6 	bl	8006614 <puts>
	printf("%10lu KiB total drive space.\n", total_sectors / 2);
 80002a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80002aa:	085b      	lsrs	r3, r3, #1
 80002ac:	4619      	mov	r1, r3
 80002ae:	4847      	ldr	r0, [pc, #284]	; (80003cc <main+0x1e8>)
 80002b0:	f006 f92a 	bl	8006508 <iprintf>
	printf("%10lu KiB available.\n", free_sectors / 2);
 80002b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002b6:	085b      	lsrs	r3, r3, #1
 80002b8:	4619      	mov	r1, r3
 80002ba:	4845      	ldr	r0, [pc, #276]	; (80003d0 <main+0x1ec>)
 80002bc:	f006 f924 	bl	8006508 <iprintf>

	fres = f_open(&fil, "write.txt",
 80002c0:	221a      	movs	r2, #26
 80002c2:	4944      	ldr	r1, [pc, #272]	; (80003d4 <main+0x1f0>)
 80002c4:	4844      	ldr	r0, [pc, #272]	; (80003d8 <main+0x1f4>)
 80002c6:	f004 febb 	bl	8005040 <f_open>
 80002ca:	4603      	mov	r3, r0
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b39      	ldr	r3, [pc, #228]	; (80003b4 <main+0x1d0>)
 80002d0:	701a      	strb	r2, [r3, #0]
	FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	if (fres == FR_OK) {
 80002d2:	4b38      	ldr	r3, [pc, #224]	; (80003b4 <main+0x1d0>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d103      	bne.n	80002e2 <main+0xfe>
		printf("Open file write.txt successfully!\n");
 80002da:	4840      	ldr	r0, [pc, #256]	; (80003dc <main+0x1f8>)
 80002dc:	f006 f99a 	bl	8006614 <puts>
 80002e0:	e005      	b.n	80002ee <main+0x10a>
	} else {
		printf("f_open error (%i)\n", fres);
 80002e2:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <main+0x1d0>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4619      	mov	r1, r3
 80002e8:	483d      	ldr	r0, [pc, #244]	; (80003e0 <main+0x1fc>)
 80002ea:	f006 f90d 	bl	8006508 <iprintf>
	}
	BYTE writeBuffer[30];
	//Copy in a string
	strncpy((char*) writeBuffer, "08/03/2021 new file is made!", 30);
 80002ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002f2:	221e      	movs	r2, #30
 80002f4:	493b      	ldr	r1, [pc, #236]	; (80003e4 <main+0x200>)
 80002f6:	4618      	mov	r0, r3
 80002f8:	f006 f994 	bl	8006624 <strncpy>
	UINT writtenBytes;
	fres = f_write(&fil, writeBuffer, sizeof(writeBuffer), &writtenBytes);
 80002fc:	f107 0320 	add.w	r3, r7, #32
 8000300:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000304:	221e      	movs	r2, #30
 8000306:	4834      	ldr	r0, [pc, #208]	; (80003d8 <main+0x1f4>)
 8000308:	f005 fbd7 	bl	8005aba <f_write>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b28      	ldr	r3, [pc, #160]	; (80003b4 <main+0x1d0>)
 8000312:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8000314:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <main+0x1d0>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d105      	bne.n	8000328 <main+0x144>
		printf("Wrote %i bytes to 'write.txt'!\n", writtenBytes);
 800031c:	6a3b      	ldr	r3, [r7, #32]
 800031e:	4619      	mov	r1, r3
 8000320:	4831      	ldr	r0, [pc, #196]	; (80003e8 <main+0x204>)
 8000322:	f006 f8f1 	bl	8006508 <iprintf>
 8000326:	e005      	b.n	8000334 <main+0x150>
	} else {
		printf("f_write error (%i)\n", fres);
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <main+0x1d0>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4619      	mov	r1, r3
 800032e:	482f      	ldr	r0, [pc, #188]	; (80003ec <main+0x208>)
 8000330:	f006 f8ea 	bl	8006508 <iprintf>
	}
	// Close file after writing
	f_close(&fil);
 8000334:	4828      	ldr	r0, [pc, #160]	; (80003d8 <main+0x1f4>)
 8000336:	f005 ff11 	bl	800615c <f_close>

	//Now let's try to open file "write.txt"
	fres = f_open(&fil, "write.txt", FA_READ);
 800033a:	2201      	movs	r2, #1
 800033c:	4925      	ldr	r1, [pc, #148]	; (80003d4 <main+0x1f0>)
 800033e:	4826      	ldr	r0, [pc, #152]	; (80003d8 <main+0x1f4>)
 8000340:	f004 fe7e 	bl	8005040 <f_open>
 8000344:	4603      	mov	r3, r0
 8000346:	461a      	mov	r2, r3
 8000348:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <main+0x1d0>)
 800034a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 800034c:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <main+0x1d0>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d006      	beq.n	8000362 <main+0x17e>
		printf("f_open error (%i)\n", fres);
 8000354:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <main+0x1d0>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	4619      	mov	r1, r3
 800035a:	4821      	ldr	r0, [pc, #132]	; (80003e0 <main+0x1fc>)
 800035c:	f006 f8d4 	bl	8006508 <iprintf>
		while (1)
 8000360:	e7fe      	b.n	8000360 <main+0x17c>
			;
	} else
		printf("Open 'write.txt' successfully!\n");
 8000362:	4823      	ldr	r0, [pc, #140]	; (80003f0 <main+0x20c>)
 8000364:	f006 f956 	bl	8006614 <puts>
	//Read 30 bytes from "write.txt" on the SD card
	BYTE readBuffer[30];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR *rres = f_gets((TCHAR*) readBuffer, sizeof(readBuffer), &fil);
 8000368:	463b      	mov	r3, r7
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <main+0x1f4>)
 800036c:	211e      	movs	r1, #30
 800036e:	4618      	mov	r0, r3
 8000370:	f006 f801 	bl	8006376 <f_gets>
 8000374:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (rres != 0) {
 8000376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000378:	2b00      	cmp	r3, #0
 800037a:	d005      	beq.n	8000388 <main+0x1a4>
		printf("Read string from 'write.txt' contents: \n%s\n", readBuffer);
 800037c:	463b      	mov	r3, r7
 800037e:	4619      	mov	r1, r3
 8000380:	481c      	ldr	r0, [pc, #112]	; (80003f4 <main+0x210>)
 8000382:	f006 f8c1 	bl	8006508 <iprintf>
 8000386:	e005      	b.n	8000394 <main+0x1b0>
	} else {
		printf("f_gets error (%i)\n", fres);
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <main+0x1d0>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4619      	mov	r1, r3
 800038e:	481a      	ldr	r0, [pc, #104]	; (80003f8 <main+0x214>)
 8000390:	f006 f8ba 	bl	8006508 <iprintf>
	}

	//Close file after reading
	f_close(&fil);
 8000394:	4810      	ldr	r0, [pc, #64]	; (80003d8 <main+0x1f4>)
 8000396:	f005 fee1 	bl	800615c <f_close>

	// Unmount disk after all
	f_mount(NULL, "", 0);
 800039a:	2200      	movs	r2, #0
 800039c:	4903      	ldr	r1, [pc, #12]	; (80003ac <main+0x1c8>)
 800039e:	2000      	movs	r0, #0
 80003a0:	f004 fe04 	bl	8004fac <f_mount>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80003a4:	e7fe      	b.n	80003a4 <main+0x1c0>
 80003a6:	bf00      	nop
 80003a8:	080074f4 	.word	0x080074f4
 80003ac:	08007510 	.word	0x08007510
 80003b0:	200000dc 	.word	0x200000dc
 80003b4:	200011a4 	.word	0x200011a4
 80003b8:	08007514 	.word	0x08007514
 80003bc:	08007520 	.word	0x08007520
 80003c0:	0800753c 	.word	0x0800753c
 80003c4:	08007560 	.word	0x08007560
 80003c8:	08007578 	.word	0x08007578
 80003cc:	08007588 	.word	0x08007588
 80003d0:	080075a8 	.word	0x080075a8
 80003d4:	080075c0 	.word	0x080075c0
 80003d8:	200011a8 	.word	0x200011a8
 80003dc:	080075cc 	.word	0x080075cc
 80003e0:	080075f0 	.word	0x080075f0
 80003e4:	08007604 	.word	0x08007604
 80003e8:	08007624 	.word	0x08007624
 80003ec:	08007644 	.word	0x08007644
 80003f0:	08007658 	.word	0x08007658
 80003f4:	08007678 	.word	0x08007678
 80003f8:	080076a4 	.word	0x080076a4

080003fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b090      	sub	sp, #64	; 0x40
 8000400:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2228      	movs	r2, #40	; 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f006 f874 	bl	80064f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800041e:	2301      	movs	r3, #1
 8000420:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000426:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000430:	2302      	movs	r3, #2
 8000432:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000438:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800043e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000440:	f107 0318 	add.w	r3, r7, #24
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fd7f 	bl	8000f48 <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x58>
		Error_Handler();
 8000450:	f000 f8b8 	bl	80005c4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000454:	230f      	movs	r3, #15
 8000456:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	2302      	movs	r3, #2
 800045a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000464:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2102      	movs	r1, #2
 800046e:	4618      	mov	r0, r3
 8000470:	f000 ffea 	bl	8001448 <HAL_RCC_ClockConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x82>
		Error_Handler();
 800047a:	f000 f8a3 	bl	80005c4 <Error_Handler>
	}
}
 800047e:	bf00      	nop
 8000480:	3740      	adds	r7, #64	; 0x40
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <MX_SPI1_Init+0x64>)
 800048e:	4a18      	ldr	r2, [pc, #96]	; (80004f0 <MX_SPI1_Init+0x68>)
 8000490:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <MX_SPI1_Init+0x64>)
 8000494:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000498:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_SPI1_Init+0x64>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_SPI1_Init+0x64>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_SPI1_Init+0x64>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_SPI1_Init+0x64>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_SPI1_Init+0x64>)
 80004b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004b8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_SPI1_Init+0x64>)
 80004bc:	2210      	movs	r2, #16
 80004be:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <MX_SPI1_Init+0x64>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_SPI1_Init+0x64>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <MX_SPI1_Init+0x64>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_SPI1_Init+0x64>)
 80004d4:	220a      	movs	r2, #10
 80004d6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <MX_SPI1_Init+0x64>)
 80004da:	f001 f94f 	bl	800177c <HAL_SPI_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80004e4:	f000 f86e 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	2000110c 	.word	0x2000110c
 80004f0:	40013000 	.word	0x40013000

080004f4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <MX_USART2_UART_Init+0x4c>)
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <MX_USART2_UART_Init+0x50>)
 80004fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <MX_USART2_UART_Init+0x4c>)
 8000500:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000504:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <MX_USART2_UART_Init+0x4c>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_USART2_UART_Init+0x4c>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <MX_USART2_UART_Init+0x4c>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_USART2_UART_Init+0x4c>)
 800051a:	220c      	movs	r2, #12
 800051c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <MX_USART2_UART_Init+0x4c>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_USART2_UART_Init+0x4c>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <MX_USART2_UART_Init+0x4c>)
 800052c:	f001 fd2e 	bl	8001f8c <HAL_UART_Init>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000536:	f000 f845 	bl	80005c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20001164 	.word	0x20001164
 8000544:	40004400 	.word	0x40004400

08000548 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800054e:	f107 0308 	add.w	r3, r7, #8
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_GPIO_Init+0x74>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a16      	ldr	r2, [pc, #88]	; (80005bc <MX_GPIO_Init+0x74>)
 8000562:	f043 0320 	orr.w	r3, r3, #32
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_GPIO_Init+0x74>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0320 	and.w	r3, r3, #32
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_GPIO_Init+0x74>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a10      	ldr	r2, [pc, #64]	; (80005bc <MX_GPIO_Init+0x74>)
 800057a:	f043 0304 	orr.w	r3, r3, #4
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_GPIO_Init+0x74>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2110      	movs	r1, #16
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <MX_GPIO_Init+0x78>)
 8000592:	f000 fcc1 	bl	8000f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 8000596:	2310      	movs	r3, #16
 8000598:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2302      	movs	r3, #2
 80005a4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	4619      	mov	r1, r3
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_GPIO_Init+0x78>)
 80005ae:	f000 fb2f 	bl	8000c10 <HAL_GPIO_Init>

}
 80005b2:	bf00      	nop
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010800 	.word	0x40010800

080005c4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <HAL_MspInit+0x5c>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <HAL_MspInit+0x5c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_MspInit+0x5c>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_MspInit+0x5c>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_MspInit+0x60>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_MspInit+0x60>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	40010000 	.word	0x40010000

08000634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <HAL_SPI_MspInit+0x88>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d12f      	bne.n	80006b4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 800065a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800065e:	6193      	str	r3, [r2, #24]
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <HAL_SPI_MspInit+0x8c>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000684:	23a0      	movs	r3, #160	; 0xa0
 8000686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 8000698:	f000 faba 	bl	8000c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <HAL_SPI_MspInit+0x90>)
 80006b0:	f000 faae 	bl	8000c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40013000 	.word	0x40013000
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010800 	.word	0x40010800

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <HAL_UART_MspInit+0x88>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d12f      	bne.n	8000748 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <HAL_UART_MspInit+0x8c>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a19      	ldr	r2, [pc, #100]	; (8000754 <HAL_UART_MspInit+0x8c>)
 80006ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f2:	61d3      	str	r3, [r2, #28]
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <HAL_UART_MspInit+0x8c>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <HAL_UART_MspInit+0x8c>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a13      	ldr	r2, [pc, #76]	; (8000754 <HAL_UART_MspInit+0x8c>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_UART_MspInit+0x8c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000718:	2304      	movs	r3, #4
 800071a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <HAL_UART_MspInit+0x90>)
 800072c:	f000 fa70 	bl	8000c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000730:	2308      	movs	r3, #8
 8000732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <HAL_UART_MspInit+0x90>)
 8000744:	f000 fa64 	bl	8000c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40004400 	.word	0x40004400
 8000754:	40021000 	.word	0x40021000
 8000758:	40010800 	.word	0x40010800

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
	...

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <SysTick_Handler+0x34>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d005      	beq.n	80007b8 <SysTick_Handler+0x18>
		Timer1--;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <SysTick_Handler+0x34>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <SysTick_Handler+0x34>)
 80007b6:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <SysTick_Handler+0x38>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d005      	beq.n	80007cc <SysTick_Handler+0x2c>
		Timer2--;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Handler+0x38>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <SysTick_Handler+0x38>)
 80007ca:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f8fc 	bl	80009c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000423e 	.word	0x2000423e
 80007d8:	2000423c 	.word	0x2000423c

080007dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	e00a      	b.n	8000804 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ee:	f3af 8000 	nop.w
 80007f2:	4601      	mov	r1, r0
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	60ba      	str	r2, [r7, #8]
 80007fa:	b2ca      	uxtb	r2, r1
 80007fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	429a      	cmp	r2, r3
 800080a:	dbf0      	blt.n	80007ee <_read+0x12>
	}

return len;
 800080c:	687b      	ldr	r3, [r7, #4]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	return -1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800083c:	605a      	str	r2, [r3, #4]
	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <_isatty>:

int _isatty(int file)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
	return 1;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800085e:	b480      	push	{r7}
 8000860:	b085      	sub	sp, #20
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
	return 0;
 800086a:	2300      	movs	r3, #0
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
	...

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f005 fdfc 	bl	80064a4 <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20005000 	.word	0x20005000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	200000a0 	.word	0x200000a0
 80008e0:	20004250 	.word	0x20004250

080008e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008f2:	e003      	b.n	80008fc <LoopCopyDataInit>

080008f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008fa:	3104      	adds	r1, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008fc:	480a      	ldr	r0, [pc, #40]	; (8000928 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000900:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000902:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000904:	d3f6      	bcc.n	80008f4 <CopyDataInit>
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000908:	e002      	b.n	8000910 <LoopFillZerobss>

0800090a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800090c:	f842 3b04 	str.w	r3, [r2], #4

08000910 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000912:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000914:	d3f9      	bcc.n	800090a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000916:	f7ff ffe5 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091a:	f005 fdc9 	bl	80064b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff fc61 	bl	80001e4 <main>
  bx lr
 8000922:	4770      	bx	lr
  ldr r3, =_sidata
 8000924:	08007844 	.word	0x08007844
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800092c:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8000930:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8000934:	20004250 	.word	0x20004250

08000938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_2_IRQHandler>
	...

0800093c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_Init+0x28>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	; (8000964 <HAL_Init+0x28>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094c:	2003      	movs	r0, #3
 800094e:	f000 f92b 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000952:	2000      	movs	r0, #0
 8000954:	f000 f808 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000958:	f7ff fe3a 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40022000 	.word	0x40022000

08000968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x54>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f935 	bl	8000bf6 <HAL_SYSTICK_Config>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e00e      	b.n	80009b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d80a      	bhi.n	80009b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a4:	f000 f90b 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <HAL_InitTick+0x5c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20000004 	.word	0x20000004

080009c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x1c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_IncTick+0x20>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a03      	ldr	r2, [pc, #12]	; (80009e8 <HAL_IncTick+0x20>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	20000008 	.word	0x20000008
 80009e8:	200021d4 	.word	0x200021d4

080009ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <HAL_GetTick+0x10>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	200021d4 	.word	0x200021d4

08000a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff fff0 	bl	80009ec <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_Delay+0x44>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffe0 	bl	80009ec <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <__NVIC_SetPriorityGrouping>:
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_SetPriority>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db0a      	blt.n	8000ad6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	490c      	ldr	r1, [pc, #48]	; (8000af8 <__NVIC_SetPriority+0x4c>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	0112      	lsls	r2, r2, #4
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	440b      	add	r3, r1
 8000ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ad4:	e00a      	b.n	8000aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4908      	ldr	r1, [pc, #32]	; (8000afc <__NVIC_SetPriority+0x50>)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	0112      	lsls	r2, r2, #4
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	440b      	add	r3, r1
 8000aea:	761a      	strb	r2, [r3, #24]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <NVIC_EncodePriority>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	f1c3 0307 	rsb	r3, r3, #7
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	bf28      	it	cs
 8000b1e:	2304      	movcs	r3, #4
 8000b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3304      	adds	r3, #4
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d902      	bls.n	8000b30 <NVIC_EncodePriority+0x30>
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3b03      	subs	r3, #3
 8000b2e:	e000      	b.n	8000b32 <NVIC_EncodePriority+0x32>
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	401a      	ands	r2, r3
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43d9      	mvns	r1, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	4313      	orrs	r3, r2
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3724      	adds	r7, #36	; 0x24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Config>:
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b88:	f7ff ff90 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff49 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff5e 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff90 	bl	8000b00 <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5f 	bl	8000aac <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffb0 	bl	8000b64 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b08b      	sub	sp, #44	; 0x2c
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c22:	e169      	b.n	8000ef8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c24:	2201      	movs	r2, #1
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	69fa      	ldr	r2, [r7, #28]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	f040 8158 	bne.w	8000ef2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	4a9a      	ldr	r2, [pc, #616]	; (8000eb0 <HAL_GPIO_Init+0x2a0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d05e      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c4c:	4a98      	ldr	r2, [pc, #608]	; (8000eb0 <HAL_GPIO_Init+0x2a0>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d875      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c52:	4a98      	ldr	r2, [pc, #608]	; (8000eb4 <HAL_GPIO_Init+0x2a4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d058      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c58:	4a96      	ldr	r2, [pc, #600]	; (8000eb4 <HAL_GPIO_Init+0x2a4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d86f      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c5e:	4a96      	ldr	r2, [pc, #600]	; (8000eb8 <HAL_GPIO_Init+0x2a8>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d052      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c64:	4a94      	ldr	r2, [pc, #592]	; (8000eb8 <HAL_GPIO_Init+0x2a8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d869      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c6a:	4a94      	ldr	r2, [pc, #592]	; (8000ebc <HAL_GPIO_Init+0x2ac>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d04c      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c70:	4a92      	ldr	r2, [pc, #584]	; (8000ebc <HAL_GPIO_Init+0x2ac>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d863      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c76:	4a92      	ldr	r2, [pc, #584]	; (8000ec0 <HAL_GPIO_Init+0x2b0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d046      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
 8000c7c:	4a90      	ldr	r2, [pc, #576]	; (8000ec0 <HAL_GPIO_Init+0x2b0>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d85d      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d82a      	bhi.n	8000cdc <HAL_GPIO_Init+0xcc>
 8000c86:	2b12      	cmp	r3, #18
 8000c88:	d859      	bhi.n	8000d3e <HAL_GPIO_Init+0x12e>
 8000c8a:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <HAL_GPIO_Init+0x80>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000d0b 	.word	0x08000d0b
 8000c94:	08000ce5 	.word	0x08000ce5
 8000c98:	08000cf7 	.word	0x08000cf7
 8000c9c:	08000d39 	.word	0x08000d39
 8000ca0:	08000d3f 	.word	0x08000d3f
 8000ca4:	08000d3f 	.word	0x08000d3f
 8000ca8:	08000d3f 	.word	0x08000d3f
 8000cac:	08000d3f 	.word	0x08000d3f
 8000cb0:	08000d3f 	.word	0x08000d3f
 8000cb4:	08000d3f 	.word	0x08000d3f
 8000cb8:	08000d3f 	.word	0x08000d3f
 8000cbc:	08000d3f 	.word	0x08000d3f
 8000cc0:	08000d3f 	.word	0x08000d3f
 8000cc4:	08000d3f 	.word	0x08000d3f
 8000cc8:	08000d3f 	.word	0x08000d3f
 8000ccc:	08000d3f 	.word	0x08000d3f
 8000cd0:	08000d3f 	.word	0x08000d3f
 8000cd4:	08000ced 	.word	0x08000ced
 8000cd8:	08000d01 	.word	0x08000d01
 8000cdc:	4a79      	ldr	r2, [pc, #484]	; (8000ec4 <HAL_GPIO_Init+0x2b4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d013      	beq.n	8000d0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ce2:	e02c      	b.n	8000d3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	623b      	str	r3, [r7, #32]
          break;
 8000cea:	e029      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	623b      	str	r3, [r7, #32]
          break;
 8000cf4:	e024      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	3308      	adds	r3, #8
 8000cfc:	623b      	str	r3, [r7, #32]
          break;
 8000cfe:	e01f      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	330c      	adds	r3, #12
 8000d06:	623b      	str	r3, [r7, #32]
          break;
 8000d08:	e01a      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d12:	2304      	movs	r3, #4
 8000d14:	623b      	str	r3, [r7, #32]
          break;
 8000d16:	e013      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d105      	bne.n	8000d2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d20:	2308      	movs	r3, #8
 8000d22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	611a      	str	r2, [r3, #16]
          break;
 8000d2a:	e009      	b.n	8000d40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	615a      	str	r2, [r3, #20]
          break;
 8000d36:	e003      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
          break;
 8000d3c:	e000      	b.n	8000d40 <HAL_GPIO_Init+0x130>
          break;
 8000d3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	2bff      	cmp	r3, #255	; 0xff
 8000d44:	d801      	bhi.n	8000d4a <HAL_GPIO_Init+0x13a>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	e001      	b.n	8000d4e <HAL_GPIO_Init+0x13e>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2bff      	cmp	r3, #255	; 0xff
 8000d54:	d802      	bhi.n	8000d5c <HAL_GPIO_Init+0x14c>
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	e002      	b.n	8000d62 <HAL_GPIO_Init+0x152>
 8000d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5e:	3b08      	subs	r3, #8
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	210f      	movs	r1, #15
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	401a      	ands	r2, r3
 8000d74:	6a39      	ldr	r1, [r7, #32]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 80b1 	beq.w	8000ef2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d90:	4b4d      	ldr	r3, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x2b8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a4c      	ldr	r2, [pc, #304]	; (8000ec8 <HAL_GPIO_Init+0x2b8>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b4a      	ldr	r3, [pc, #296]	; (8000ec8 <HAL_GPIO_Init+0x2b8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000da8:	4a48      	ldr	r2, [pc, #288]	; (8000ecc <HAL_GPIO_Init+0x2bc>)
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	220f      	movs	r2, #15
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a40      	ldr	r2, [pc, #256]	; (8000ed0 <HAL_GPIO_Init+0x2c0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d013      	beq.n	8000dfc <HAL_GPIO_Init+0x1ec>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a3f      	ldr	r2, [pc, #252]	; (8000ed4 <HAL_GPIO_Init+0x2c4>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d00d      	beq.n	8000df8 <HAL_GPIO_Init+0x1e8>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a3e      	ldr	r2, [pc, #248]	; (8000ed8 <HAL_GPIO_Init+0x2c8>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d007      	beq.n	8000df4 <HAL_GPIO_Init+0x1e4>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a3d      	ldr	r2, [pc, #244]	; (8000edc <HAL_GPIO_Init+0x2cc>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d101      	bne.n	8000df0 <HAL_GPIO_Init+0x1e0>
 8000dec:	2303      	movs	r3, #3
 8000dee:	e006      	b.n	8000dfe <HAL_GPIO_Init+0x1ee>
 8000df0:	2304      	movs	r3, #4
 8000df2:	e004      	b.n	8000dfe <HAL_GPIO_Init+0x1ee>
 8000df4:	2302      	movs	r3, #2
 8000df6:	e002      	b.n	8000dfe <HAL_GPIO_Init+0x1ee>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <HAL_GPIO_Init+0x1ee>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e00:	f002 0203 	and.w	r2, r2, #3
 8000e04:	0092      	lsls	r2, r2, #2
 8000e06:	4093      	lsls	r3, r2
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e0e:	492f      	ldr	r1, [pc, #188]	; (8000ecc <HAL_GPIO_Init+0x2bc>)
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	3302      	adds	r3, #2
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	492c      	ldr	r1, [pc, #176]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	600b      	str	r3, [r1, #0]
 8000e34:	e006      	b.n	8000e44 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4928      	ldr	r1, [pc, #160]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	604b      	str	r3, [r1, #4]
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	43db      	mvns	r3, r3
 8000e66:	491e      	ldr	r1, [pc, #120]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d006      	beq.n	8000e86 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	4918      	ldr	r1, [pc, #96]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	608b      	str	r3, [r1, #8]
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4914      	ldr	r1, [pc, #80]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d021      	beq.n	8000ee4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	60cb      	str	r3, [r1, #12]
 8000eac:	e021      	b.n	8000ef2 <HAL_GPIO_Init+0x2e2>
 8000eae:	bf00      	nop
 8000eb0:	10320000 	.word	0x10320000
 8000eb4:	10310000 	.word	0x10310000
 8000eb8:	10220000 	.word	0x10220000
 8000ebc:	10210000 	.word	0x10210000
 8000ec0:	10120000 	.word	0x10120000
 8000ec4:	10110000 	.word	0x10110000
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40010000 	.word	0x40010000
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	40010c00 	.word	0x40010c00
 8000ed8:	40011000 	.word	0x40011000
 8000edc:	40011400 	.word	0x40011400
 8000ee0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_GPIO_Init+0x304>)
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	4909      	ldr	r1, [pc, #36]	; (8000f14 <HAL_GPIO_Init+0x304>)
 8000eee:	4013      	ands	r3, r2
 8000ef0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	fa22 f303 	lsr.w	r3, r2, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f47f ae8e 	bne.w	8000c24 <HAL_GPIO_Init+0x14>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	372c      	adds	r7, #44	; 0x2c
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	40010400 	.word	0x40010400

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f34:	e003      	b.n	8000f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	611a      	str	r2, [r3, #16]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e26c      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8087 	beq.w	8001076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f68:	4b92      	ldr	r3, [pc, #584]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b04      	cmp	r3, #4
 8000f72:	d00c      	beq.n	8000f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f74:	4b8f      	ldr	r3, [pc, #572]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d112      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x5e>
 8000f80:	4b8c      	ldr	r3, [pc, #560]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8c:	d10b      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8e:	4b89      	ldr	r3, [pc, #548]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d06c      	beq.n	8001074 <HAL_RCC_OscConfig+0x12c>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d168      	bne.n	8001074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e246      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x76>
 8000fb0:	4b80      	ldr	r3, [pc, #512]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a7f      	ldr	r2, [pc, #508]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e02e      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x98>
 8000fc6:	4b7b      	ldr	r3, [pc, #492]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a7a      	ldr	r2, [pc, #488]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b78      	ldr	r3, [pc, #480]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a77      	ldr	r2, [pc, #476]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e01d      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0xbc>
 8000fea:	4b72      	ldr	r3, [pc, #456]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a71      	ldr	r2, [pc, #452]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b6f      	ldr	r3, [pc, #444]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a6e      	ldr	r2, [pc, #440]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e00b      	b.n	800101c <HAL_RCC_OscConfig+0xd4>
 8001004:	4b6b      	ldr	r3, [pc, #428]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a6a      	ldr	r2, [pc, #424]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 800100a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a67      	ldr	r2, [pc, #412]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800101a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fce2 	bl	80009ec <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fcde 	bl	80009ec <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	; 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e1fa      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103e:	4b5d      	ldr	r3, [pc, #372]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0xe4>
 800104a:	e014      	b.n	8001076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fcce 	bl	80009ec <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001054:	f7ff fcca 	bl	80009ec <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e1e6      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x10c>
 8001072:	e000      	b.n	8001076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d063      	beq.n	800114a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001082:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800108e:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b08      	cmp	r3, #8
 8001098:	d11c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x18c>
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d116      	bne.n	80010d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	4b43      	ldr	r3, [pc, #268]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <HAL_RCC_OscConfig+0x176>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d001      	beq.n	80010be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e1ba      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4939      	ldr	r1, [pc, #228]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d2:	e03a      	b.n	800114a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d020      	beq.n	800111e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010dc:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <HAL_RCC_OscConfig+0x270>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fc83 	bl	80009ec <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ea:	f7ff fc7f 	bl	80009ec <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e19b      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f0      	beq.n	80010ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4927      	ldr	r1, [pc, #156]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
 800111c:	e015      	b.n	800114a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_RCC_OscConfig+0x270>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fc62 	bl	80009ec <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800112c:	f7ff fc5e 	bl	80009ec <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e17a      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d03a      	beq.n	80011cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d019      	beq.n	8001192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_RCC_OscConfig+0x274>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001164:	f7ff fc42 	bl	80009ec <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116c:	f7ff fc3e 	bl	80009ec <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e15a      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_RCC_OscConfig+0x26c>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f000 fad8 	bl	8001740 <RCC_Delay>
 8001190:	e01c      	b.n	80011cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_RCC_OscConfig+0x274>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fc28 	bl	80009ec <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119e:	e00f      	b.n	80011c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc24 	bl	80009ec <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d908      	bls.n	80011c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e140      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
 80011b2:	bf00      	nop
 80011b4:	40021000 	.word	0x40021000
 80011b8:	42420000 	.word	0x42420000
 80011bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c0:	4b9e      	ldr	r3, [pc, #632]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e9      	bne.n	80011a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80a6 	beq.w	8001326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011de:	4b97      	ldr	r3, [pc, #604]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10d      	bne.n	8001206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b94      	ldr	r3, [pc, #592]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a93      	ldr	r2, [pc, #588]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b91      	ldr	r3, [pc, #580]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001202:	2301      	movs	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001206:	4b8e      	ldr	r3, [pc, #568]	; (8001440 <HAL_RCC_OscConfig+0x4f8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	2b00      	cmp	r3, #0
 8001210:	d118      	bne.n	8001244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001212:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <HAL_RCC_OscConfig+0x4f8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a8a      	ldr	r2, [pc, #552]	; (8001440 <HAL_RCC_OscConfig+0x4f8>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121e:	f7ff fbe5 	bl	80009ec <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001226:	f7ff fbe1 	bl	80009ec <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b64      	cmp	r3, #100	; 0x64
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e0fd      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	4b81      	ldr	r3, [pc, #516]	; (8001440 <HAL_RCC_OscConfig+0x4f8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f0      	beq.n	8001226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x312>
 800124c:	4b7b      	ldr	r3, [pc, #492]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	4a7a      	ldr	r2, [pc, #488]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6213      	str	r3, [r2, #32]
 8001258:	e02d      	b.n	80012b6 <HAL_RCC_OscConfig+0x36e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10c      	bne.n	800127c <HAL_RCC_OscConfig+0x334>
 8001262:	4b76      	ldr	r3, [pc, #472]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a75      	ldr	r2, [pc, #468]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	4b73      	ldr	r3, [pc, #460]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a72      	ldr	r2, [pc, #456]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001274:	f023 0304 	bic.w	r3, r3, #4
 8001278:	6213      	str	r3, [r2, #32]
 800127a:	e01c      	b.n	80012b6 <HAL_RCC_OscConfig+0x36e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b05      	cmp	r3, #5
 8001282:	d10c      	bne.n	800129e <HAL_RCC_OscConfig+0x356>
 8001284:	4b6d      	ldr	r3, [pc, #436]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4a6c      	ldr	r2, [pc, #432]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6213      	str	r3, [r2, #32]
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a69      	ldr	r2, [pc, #420]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6213      	str	r3, [r2, #32]
 800129c:	e00b      	b.n	80012b6 <HAL_RCC_OscConfig+0x36e>
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a66      	ldr	r2, [pc, #408]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6213      	str	r3, [r2, #32]
 80012aa:	4b64      	ldr	r3, [pc, #400]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a63      	ldr	r2, [pc, #396]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	f023 0304 	bic.w	r3, r3, #4
 80012b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d015      	beq.n	80012ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff fb95 	bl	80009ec <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff fb91 	bl	80009ec <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e0ab      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012dc:	4b57      	ldr	r3, [pc, #348]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0ee      	beq.n	80012c6 <HAL_RCC_OscConfig+0x37e>
 80012e8:	e014      	b.n	8001314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb7f 	bl	80009ec <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fb7b 	bl	80009ec <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e095      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001308:	4b4c      	ldr	r3, [pc, #304]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1ee      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d105      	bne.n	8001326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131a:	4b48      	ldr	r3, [pc, #288]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a47      	ldr	r2, [pc, #284]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8081 	beq.w	8001432 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001330:	4b42      	ldr	r3, [pc, #264]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d061      	beq.n	8001400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69db      	ldr	r3, [r3, #28]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d146      	bne.n	80013d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_RCC_OscConfig+0x4fc>)
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fb4f 	bl	80009ec <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff fb4b 	bl	80009ec <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e067      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001364:	4b35      	ldr	r3, [pc, #212]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f0      	bne.n	8001352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001378:	d108      	bne.n	800138c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800137a:	4b30      	ldr	r3, [pc, #192]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	492d      	ldr	r1, [pc, #180]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a19      	ldr	r1, [r3, #32]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	430b      	orrs	r3, r1
 800139e:	4927      	ldr	r1, [pc, #156]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <HAL_RCC_OscConfig+0x4fc>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb1f 	bl	80009ec <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b2:	f7ff fb1b 	bl	80009ec <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e037      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x46a>
 80013d0:	e02f      	b.n	8001432 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <HAL_RCC_OscConfig+0x4fc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fb08 	bl	80009ec <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff fb04 	bl	80009ec <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e020      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x498>
 80013fe:	e018      	b.n	8001432 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e013      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_RCC_OscConfig+0x4f4>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	429a      	cmp	r2, r3
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000
 8001440:	40007000 	.word	0x40007000
 8001444:	42420060 	.word	0x42420060

08001448 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0d0      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800145c:	4b6a      	ldr	r3, [pc, #424]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d910      	bls.n	800148c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146a:	4b67      	ldr	r3, [pc, #412]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 0207 	bic.w	r2, r3, #7
 8001472:	4965      	ldr	r1, [pc, #404]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0b8      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a4:	4b59      	ldr	r3, [pc, #356]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a58      	ldr	r2, [pc, #352]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014bc:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a52      	ldr	r2, [pc, #328]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	494d      	ldr	r1, [pc, #308]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d040      	beq.n	8001568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d115      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e07f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d107      	bne.n	8001516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e073      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b3d      	ldr	r3, [pc, #244]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e06b      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001526:	4b39      	ldr	r3, [pc, #228]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f023 0203 	bic.w	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4936      	ldr	r1, [pc, #216]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001538:	f7ff fa58 	bl	80009ec <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	e00a      	b.n	8001556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001540:	f7ff fa54 	bl	80009ec <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e053      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 020c 	and.w	r2, r3, #12
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	429a      	cmp	r2, r3
 8001566:	d1eb      	bne.n	8001540 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d210      	bcs.n	8001598 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 0207 	bic.w	r2, r3, #7
 800157e:	4922      	ldr	r1, [pc, #136]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e032      	b.n	80015fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4916      	ldr	r1, [pc, #88]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	490e      	ldr	r1, [pc, #56]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015d6:	f000 f821 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	490a      	ldr	r1, [pc, #40]	; (8001610 <HAL_RCC_ClockConfig+0x1c8>)
 80015e8:	5ccb      	ldrb	r3, [r1, r3]
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <HAL_RCC_ClockConfig+0x1cc>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1d0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f9b6 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000
 800160c:	40021000 	.word	0x40021000
 8001610:	0800770c 	.word	0x0800770c
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	b490      	push	{r4, r7}
 800161e:	b08a      	sub	sp, #40	; 0x28
 8001620:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001624:	1d3c      	adds	r4, r7, #4
 8001626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800162c:	f240 2301 	movw	r3, #513	; 0x201
 8001630:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b04      	cmp	r3, #4
 8001654:	d002      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x40>
 8001656:	2b08      	cmp	r3, #8
 8001658:	d003      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x46>
 800165a:	e02d      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800165e:	623b      	str	r3, [r7, #32]
      break;
 8001660:	e02d      	b.n	80016be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	0c9b      	lsrs	r3, r3, #18
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800166e:	4413      	add	r3, r2
 8001670:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001674:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d013      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	0c5b      	lsrs	r3, r3, #17
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800168e:	4413      	add	r3, r2
 8001690:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001694:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800169a:	fb02 f203 	mul.w	r2, r2, r3
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
 80016a6:	e004      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	623b      	str	r3, [r7, #32]
      break;
 80016b6:	e002      	b.n	80016be <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ba:	623b      	str	r3, [r7, #32]
      break;
 80016bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016be:	6a3b      	ldr	r3, [r7, #32]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc90      	pop	{r4, r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	080076b8 	.word	0x080076b8
 80016d0:	40021000 	.word	0x40021000
 80016d4:	007a1200 	.word	0x007a1200
 80016d8:	003d0900 	.word	0x003d0900

080016dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <HAL_RCC_GetHCLKFreq+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	20000000 	.word	0x20000000

080016f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016f4:	f7ff fff2 	bl	80016dc <HAL_RCC_GetHCLKFreq>
 80016f8:	4602      	mov	r2, r0
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	4903      	ldr	r1, [pc, #12]	; (8001714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001706:	5ccb      	ldrb	r3, [r1, r3]
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800170c:	4618      	mov	r0, r3
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	0800771c 	.word	0x0800771c

08001718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800171c:	f7ff ffde 	bl	80016dc <HAL_RCC_GetHCLKFreq>
 8001720:	4602      	mov	r2, r0
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	0adb      	lsrs	r3, r3, #11
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	4903      	ldr	r1, [pc, #12]	; (800173c <HAL_RCC_GetPCLK2Freq+0x24>)
 800172e:	5ccb      	ldrb	r3, [r1, r3]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	0800771c 	.word	0x0800771c

08001740 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <RCC_Delay+0x34>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <RCC_Delay+0x38>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0a5b      	lsrs	r3, r3, #9
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	fb02 f303 	mul.w	r3, r2, r3
 800175a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800175c:	bf00      	nop
  }
  while (Delay --);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1e5a      	subs	r2, r3, #1
 8001762:	60fa      	str	r2, [r7, #12]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f9      	bne.n	800175c <RCC_Delay+0x1c>
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000000 	.word	0x20000000
 8001778:	10624dd3 	.word	0x10624dd3

0800177c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e076      	b.n	800187c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800179e:	d009      	beq.n	80017b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
 80017a6:	e005      	b.n	80017b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d106      	bne.n	80017d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7fe ff30 	bl	8000634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001838:	ea42 0103 	orr.w	r1, r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	0c1a      	lsrs	r2, r3, #16
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f002 0204 	and.w	r2, r2, #4
 800185a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	69da      	ldr	r2, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_SPI_Transmit+0x22>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e126      	b.n	8001af4 <HAL_SPI_Transmit+0x270>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018ae:	f7ff f89d 	bl	80009ec <HAL_GetTick>
 80018b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d002      	beq.n	80018ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80018c4:	2302      	movs	r3, #2
 80018c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018c8:	e10b      	b.n	8001ae2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <HAL_SPI_Transmit+0x52>
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018da:	e102      	b.n	8001ae2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2203      	movs	r2, #3
 80018e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	88fa      	ldrh	r2, [r7, #6]
 80018f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	88fa      	ldrh	r2, [r7, #6]
 80018fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001922:	d10f      	bne.n	8001944 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001932:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001942:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	2b40      	cmp	r3, #64	; 0x40
 8001950:	d007      	beq.n	8001962 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800196a:	d14b      	bne.n	8001a04 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_SPI_Transmit+0xf6>
 8001974:	8afb      	ldrh	r3, [r7, #22]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d13e      	bne.n	80019f8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	881a      	ldrh	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	1c9a      	adds	r2, r3, #2
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001994:	b29b      	uxth	r3, r3
 8001996:	3b01      	subs	r3, #1
 8001998:	b29a      	uxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800199e:	e02b      	b.n	80019f8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d112      	bne.n	80019d4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	881a      	ldrh	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	1c9a      	adds	r2, r3, #2
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80019d2:	e011      	b.n	80019f8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019d4:	f7ff f80a 	bl	80009ec <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d803      	bhi.n	80019ec <HAL_SPI_Transmit+0x168>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019ea:	d102      	bne.n	80019f2 <HAL_SPI_Transmit+0x16e>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80019f6:	e074      	b.n	8001ae2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ce      	bne.n	80019a0 <HAL_SPI_Transmit+0x11c>
 8001a02:	e04c      	b.n	8001a9e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <HAL_SPI_Transmit+0x18e>
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d140      	bne.n	8001a94 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	330c      	adds	r3, #12
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001a38:	e02c      	b.n	8001a94 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d113      	bne.n	8001a70 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	330c      	adds	r3, #12
 8001a52:	7812      	ldrb	r2, [r2, #0]
 8001a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a6e:	e011      	b.n	8001a94 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a70:	f7fe ffbc 	bl	80009ec <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d803      	bhi.n	8001a88 <HAL_SPI_Transmit+0x204>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a86:	d102      	bne.n	8001a8e <HAL_SPI_Transmit+0x20a>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a92:	e026      	b.n	8001ae2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1cd      	bne.n	8001a3a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	6839      	ldr	r1, [r7, #0]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fa54 	bl	8001f50 <SPI_EndRxTxTransaction>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	77fb      	strb	r3, [r7, #31]
 8001ade:	e000      	b.n	8001ae2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001ae0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	; 0x30
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_SPI_TransmitReceive+0x26>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e18a      	b.n	8001e38 <HAL_SPI_TransmitReceive+0x33c>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b2a:	f7fe ff5f 	bl	80009ec <HAL_GetTick>
 8001b2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d00f      	beq.n	8001b6c <HAL_SPI_TransmitReceive+0x70>
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b52:	d107      	bne.n	8001b64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <HAL_SPI_TransmitReceive+0x68>
 8001b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d003      	beq.n	8001b6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001b64:	2302      	movs	r3, #2
 8001b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b6a:	e15b      	b.n	8001e24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_SPI_TransmitReceive+0x82>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_SPI_TransmitReceive+0x82>
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d103      	bne.n	8001b86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001b84:	e14e      	b.n	8001e24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d003      	beq.n	8001b9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2205      	movs	r2, #5
 8001b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	887a      	ldrh	r2, [r7, #2]
 8001baa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	887a      	ldrh	r2, [r7, #2]
 8001bc2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d007      	beq.n	8001bee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf6:	d178      	bne.n	8001cea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_SPI_TransmitReceive+0x10a>
 8001c00:	8b7b      	ldrh	r3, [r7, #26]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d166      	bne.n	8001cd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	881a      	ldrh	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	1c9a      	adds	r2, r3, #2
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c2a:	e053      	b.n	8001cd4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d11b      	bne.n	8001c72 <HAL_SPI_TransmitReceive+0x176>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d016      	beq.n	8001c72 <HAL_SPI_TransmitReceive+0x176>
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d113      	bne.n	8001c72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	881a      	ldrh	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	1c9a      	adds	r2, r3, #2
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d119      	bne.n	8001cb4 <HAL_SPI_TransmitReceive+0x1b8>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d014      	beq.n	8001cb4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	b292      	uxth	r2, r2
 8001c96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	1c9a      	adds	r2, r3, #2
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001cb4:	f7fe fe9a 	bl	80009ec <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d807      	bhi.n	8001cd4 <HAL_SPI_TransmitReceive+0x1d8>
 8001cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cca:	d003      	beq.n	8001cd4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001cd2:	e0a7      	b.n	8001e24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1a6      	bne.n	8001c2c <HAL_SPI_TransmitReceive+0x130>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1a1      	bne.n	8001c2c <HAL_SPI_TransmitReceive+0x130>
 8001ce8:	e07c      	b.n	8001de4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_SPI_TransmitReceive+0x1fc>
 8001cf2:	8b7b      	ldrh	r3, [r7, #26]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d16b      	bne.n	8001dd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	330c      	adds	r3, #12
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d1e:	e057      	b.n	8001dd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d11c      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x26c>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d017      	beq.n	8001d68 <HAL_SPI_TransmitReceive+0x26c>
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d114      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	330c      	adds	r3, #12
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d119      	bne.n	8001daa <HAL_SPI_TransmitReceive+0x2ae>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d014      	beq.n	8001daa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001da6:	2301      	movs	r3, #1
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001daa:	f7fe fe1f 	bl	80009ec <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d803      	bhi.n	8001dc2 <HAL_SPI_TransmitReceive+0x2c6>
 8001dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dc0:	d102      	bne.n	8001dc8 <HAL_SPI_TransmitReceive+0x2cc>
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001dce:	e029      	b.n	8001e24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1a2      	bne.n	8001d20 <HAL_SPI_TransmitReceive+0x224>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d19d      	bne.n	8001d20 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f8b1 	bl	8001f50 <SPI_EndRxTxTransaction>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e00:	e010      	b.n	8001e24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10b      	bne.n	8001e22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	e000      	b.n	8001e24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3730      	adds	r7, #48	; 0x30
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e50:	f7fe fdcc 	bl	80009ec <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e60:	f7fe fdc4 	bl	80009ec <HAL_GetTick>
 8001e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	015b      	lsls	r3, r3, #5
 8001e6c:	0d1b      	lsrs	r3, r3, #20
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	fb02 f303 	mul.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e76:	e054      	b.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e7e:	d050      	beq.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e80:	f7fe fdb4 	bl	80009ec <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d902      	bls.n	8001e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d13d      	bne.n	8001f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eae:	d111      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eb8:	d004      	beq.n	8001ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d107      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001edc:	d10f      	bne.n	8001efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e017      	b.n	8001f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d19b      	bne.n	8001e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000

08001f50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f7ff ff6a 	bl	8001e40 <SPI_WaitFlagStateUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d007      	beq.n	8001f82 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	f043 0220 	orr.w	r2, r3, #32
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e000      	b.n	8001f84 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e03f      	b.n	800201e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fb88 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	; 0x24
 8001fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f905 	bl	80021e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b08a      	sub	sp, #40	; 0x28
 800202a:	af02      	add	r7, sp, #8
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	d17c      	bne.n	8002140 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_UART_Transmit+0x2c>
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e075      	b.n	8002142 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_UART_Transmit+0x3e>
 8002060:	2302      	movs	r3, #2
 8002062:	e06e      	b.n	8002142 <HAL_UART_Transmit+0x11c>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2221      	movs	r2, #33	; 0x21
 8002076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800207a:	f7fe fcb7 	bl	80009ec <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002094:	d108      	bne.n	80020a8 <HAL_UART_Transmit+0x82>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	e003      	b.n	80020b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80020b8:	e02a      	b.n	8002110 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f840 	bl	800214a <UART_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e036      	b.n	8002142 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10b      	bne.n	80020f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3302      	adds	r3, #2
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	e007      	b.n	8002102 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3301      	adds	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1cf      	bne.n	80020ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	2140      	movs	r1, #64	; 0x40
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f810 	bl	800214a <UART_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e006      	b.n	8002142 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	e000      	b.n	8002142 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002140:	2302      	movs	r3, #2
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	3720      	adds	r7, #32
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	4613      	mov	r3, r2
 8002158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800215a:	e02c      	b.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002162:	d028      	beq.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <UART_WaitOnFlagUntilTimeout+0x30>
 800216a:	f7fe fc3f 	bl	80009ec <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	429a      	cmp	r2, r3
 8002178:	d21d      	bcs.n	80021b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002188:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e00f      	b.n	80021d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4013      	ands	r3, r2
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	bf0c      	ite	eq
 80021c6:	2301      	moveq	r3, #1
 80021c8:	2300      	movne	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d0c3      	beq.n	800215c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800221a:	f023 030c 	bic.w	r3, r3, #12
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6812      	ldr	r2, [r2, #0]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	430b      	orrs	r3, r1
 8002226:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <UART_SetConfig+0x114>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d103      	bne.n	8002250 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002248:	f7ff fa66 	bl	8001718 <HAL_RCC_GetPCLK2Freq>
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	e002      	b.n	8002256 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002250:	f7ff fa4e 	bl	80016f0 <HAL_RCC_GetPCLK1Freq>
 8002254:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	009a      	lsls	r2, r3, #2
 8002260:	441a      	add	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <UART_SetConfig+0x118>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	0119      	lsls	r1, r3, #4
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	009a      	lsls	r2, r3, #2
 8002280:	441a      	add	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fbb2 f2f3 	udiv	r2, r2, r3
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <UART_SetConfig+0x118>)
 800228e:	fba3 0302 	umull	r0, r3, r3, r2
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2064      	movs	r0, #100	; 0x64
 8002296:	fb00 f303 	mul.w	r3, r0, r3
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	3332      	adds	r3, #50	; 0x32
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <UART_SetConfig+0x118>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ac:	4419      	add	r1, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	009a      	lsls	r2, r3, #2
 80022b8:	441a      	add	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <UART_SetConfig+0x118>)
 80022c6:	fba3 0302 	umull	r0, r3, r3, r2
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2064      	movs	r0, #100	; 0x64
 80022ce:	fb00 f303 	mul.w	r3, r0, r3
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	3332      	adds	r3, #50	; 0x32
 80022d8:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <UART_SetConfig+0x118>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	f003 020f 	and.w	r2, r3, #15
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	440a      	add	r2, r1
 80022ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40013800 	.word	0x40013800
 80022f8:	51eb851f 	.word	0x51eb851f

080022fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002300:	4904      	ldr	r1, [pc, #16]	; (8002314 <MX_FATFS_Init+0x18>)
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_FATFS_Init+0x1c>)
 8002304:	f004 f8be 	bl	8006484 <FATFS_LinkDriver>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <MX_FATFS_Init+0x20>)
 800230e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200021d8 	.word	0x200021d8
 8002318:	2000000c 	.word	0x2000000c
 800231c:	200021dc 	.word	0x200021dc

08002320 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002324:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
	...

08002330 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	2110      	movs	r1, #16
 8002338:	4803      	ldr	r0, [pc, #12]	; (8002348 <SELECT+0x18>)
 800233a:	f7fe fded 	bl	8000f18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800233e:	2001      	movs	r0, #1
 8002340:	f7fe fb5e 	bl	8000a00 <HAL_Delay>
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40010800 	.word	0x40010800

0800234c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002350:	2201      	movs	r2, #1
 8002352:	2110      	movs	r1, #16
 8002354:	4803      	ldr	r0, [pc, #12]	; (8002364 <DESELECT+0x18>)
 8002356:	f7fe fddf 	bl	8000f18 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800235a:	2001      	movs	r0, #1
 800235c:	f7fe fb50 	bl	8000a00 <HAL_Delay>
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40010800 	.word	0x40010800

08002368 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
	while (!__HAL_SPI_GET_FLAG(&SD_HSPI, SPI_FLAG_TXE))
 8002372:	bf00      	nop
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <SPI_TxByte+0x30>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b02      	cmp	r3, #2
 8002380:	d1f8      	bne.n	8002374 <SPI_TxByte+0xc>
		;
	HAL_SPI_Transmit(&SD_HSPI, &data, 1, SPI_TIMEOUT);
 8002382:	1df9      	adds	r1, r7, #7
 8002384:	2364      	movs	r3, #100	; 0x64
 8002386:	2201      	movs	r2, #1
 8002388:	4803      	ldr	r0, [pc, #12]	; (8002398 <SPI_TxByte+0x30>)
 800238a:	f7ff fa7b 	bl	8001884 <HAL_SPI_Transmit>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	2000110c 	.word	0x2000110c

0800239c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
	while (!__HAL_SPI_GET_FLAG(&SD_HSPI, SPI_FLAG_TXE))
 80023a8:	bf00      	nop
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <SPI_TxBuffer+0x30>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d1f8      	bne.n	80023aa <SPI_TxBuffer+0xe>
		;
	HAL_SPI_Transmit(&SD_HSPI, buffer, len, SPI_TIMEOUT);
 80023b8:	887a      	ldrh	r2, [r7, #2]
 80023ba:	2364      	movs	r3, #100	; 0x64
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4803      	ldr	r0, [pc, #12]	; (80023cc <SPI_TxBuffer+0x30>)
 80023c0:	f7ff fa60 	bl	8001884 <HAL_SPI_Transmit>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	2000110c 	.word	0x2000110c

080023d0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80023d6:	23ff      	movs	r3, #255	; 0xff
 80023d8:	71fb      	strb	r3, [r7, #7]

	while (!__HAL_SPI_GET_FLAG(&SD_HSPI, SPI_FLAG_TXE))
 80023da:	bf00      	nop
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <SPI_RxByte+0x34>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d1f8      	bne.n	80023dc <SPI_RxByte+0xc>
		;
	HAL_SPI_TransmitReceive(&SD_HSPI, &dummy, &data, 1, SPI_TIMEOUT);
 80023ea:	1dba      	adds	r2, r7, #6
 80023ec:	1df9      	adds	r1, r7, #7
 80023ee:	2364      	movs	r3, #100	; 0x64
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2301      	movs	r3, #1
 80023f4:	4803      	ldr	r0, [pc, #12]	; (8002404 <SPI_RxByte+0x34>)
 80023f6:	f7ff fb81 	bl	8001afc <HAL_SPI_TransmitReceive>

	return data;
 80023fa:	79bb      	ldrb	r3, [r7, #6]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000110c 	.word	0x2000110c

08002408 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8002410:	f7ff ffde 	bl	80023d0 <SPI_RxByte>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	701a      	strb	r2, [r3, #0]
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <SD_ReadyWait+0x30>)
 800242c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002430:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do
	{
		res = SPI_RxByte();
 8002432:	f7ff ffcd 	bl	80023d0 <SPI_RxByte>
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	2bff      	cmp	r3, #255	; 0xff
 800243e:	d003      	beq.n	8002448 <SD_ReadyWait+0x24>
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <SD_ReadyWait+0x30>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f4      	bne.n	8002432 <SD_ReadyWait+0xe>

	return res;
 8002448:	79fb      	ldrb	r3, [r7, #7]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000423c 	.word	0x2000423c

08002458 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800245e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002462:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8002464:	f7ff ff72 	bl	800234c <DESELECT>
	for (int i = 0; i < 10; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	e005      	b.n	800247a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800246e:	20ff      	movs	r0, #255	; 0xff
 8002470:	f7ff ff7a 	bl	8002368 <SPI_TxByte>
	for (int i = 0; i < 10; i++)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b09      	cmp	r3, #9
 800247e:	ddf6      	ble.n	800246e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8002480:	f7ff ff56 	bl	8002330 <SELECT>

	/* make idle state */
	args[0] = CMD0; /* CMD0:GO_IDLE_STATE */
 8002484:	2340      	movs	r3, #64	; 0x40
 8002486:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95; /* CRC */
 8002498:	2395      	movs	r3, #149	; 0x95
 800249a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800249c:	463b      	mov	r3, r7
 800249e:	2106      	movs	r1, #6
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff7b 	bl	800239c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80024a6:	e002      	b.n	80024ae <SD_PowerOn+0x56>
	{
		cnt--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80024ae:	f7ff ff8f 	bl	80023d0 <SPI_RxByte>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d002      	beq.n	80024be <SD_PowerOn+0x66>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f4      	bne.n	80024a8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80024be:	f7ff ff45 	bl	800234c <DESELECT>
	SPI_TxByte(0XFF);
 80024c2:	20ff      	movs	r0, #255	; 0xff
 80024c4:	f7ff ff50 	bl	8002368 <SPI_TxByte>

	PowerFlag = 1;
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <SD_PowerOn+0x80>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200000a5 	.word	0x200000a5

080024dc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <SD_PowerOff+0x14>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	200000a5 	.word	0x200000a5

080024f4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80024f8:	4b02      	ldr	r3, [pc, #8]	; (8002504 <SD_CheckPower+0x10>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	200000a5 	.word	0x200000a5

08002508 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <SD_RxDataBlock+0x58>)
 8002514:	22c8      	movs	r2, #200	; 0xc8
 8002516:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do
	{
		token = SPI_RxByte();
 8002518:	f7ff ff5a 	bl	80023d0 <SPI_RxByte>
 800251c:	4603      	mov	r3, r0
 800251e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2bff      	cmp	r3, #255	; 0xff
 8002524:	d103      	bne.n	800252e <SD_RxDataBlock+0x26>
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <SD_RxDataBlock+0x58>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f4      	bne.n	8002518 <SD_RxDataBlock+0x10>

	/* invalid response */
	if (token != 0xFE)
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2bfe      	cmp	r3, #254	; 0xfe
 8002532:	d001      	beq.n	8002538 <SD_RxDataBlock+0x30>
		return FALSE;
 8002534:	2300      	movs	r3, #0
 8002536:	e00f      	b.n	8002558 <SD_RxDataBlock+0x50>

	/* receive data */
	do
	{
		SPI_RxBytePtr(buff++);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff62 	bl	8002408 <SPI_RxBytePtr>
	} while (len--);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	1e5a      	subs	r2, r3, #1
 8002548:	603a      	str	r2, [r7, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f4      	bne.n	8002538 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800254e:	f7ff ff3f 	bl	80023d0 <SPI_RxByte>
	SPI_RxByte();
 8002552:	f7ff ff3d 	bl	80023d0 <SPI_RxByte>

	return TRUE;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2000423e 	.word	0x2000423e

08002564 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 8002574:	f7ff ff56 	bl	8002424 <SD_ReadyWait>
 8002578:	4603      	mov	r3, r0
 800257a:	2bff      	cmp	r3, #255	; 0xff
 800257c:	d001      	beq.n	8002582 <SD_TxDataBlock+0x1e>
		return FALSE;
 800257e:	2300      	movs	r3, #0
 8002580:	e02f      	b.n	80025e2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff feef 	bl	8002368 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	2bfd      	cmp	r3, #253	; 0xfd
 800258e:	d020      	beq.n	80025d2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t *)buff, 512);
 8002590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ff01 	bl	800239c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800259a:	f7ff ff19 	bl	80023d0 <SPI_RxByte>
		SPI_RxByte();
 800259e:	f7ff ff17 	bl	80023d0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80025a2:	e00b      	b.n	80025bc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80025a4:	f7ff ff14 	bl	80023d0 <SPI_RxByte>
 80025a8:	4603      	mov	r3, r0
 80025aa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05)
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d006      	beq.n	80025c4 <SD_TxDataBlock+0x60>
				break;
			i++;
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	3301      	adds	r3, #1
 80025ba:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80025bc:	7bbb      	ldrb	r3, [r7, #14]
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d9f0      	bls.n	80025a4 <SD_TxDataBlock+0x40>
 80025c2:	e000      	b.n	80025c6 <SD_TxDataBlock+0x62>
				break;
 80025c4:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0)
 80025c6:	bf00      	nop
 80025c8:	f7ff ff02 	bl	80023d0 <SPI_RxByte>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0fa      	beq.n	80025c8 <SD_TxDataBlock+0x64>
			;
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d101      	bne.n	80025e0 <SD_TxDataBlock+0x7c>
		return TRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	6039      	str	r1, [r7, #0]
 80025f4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF)
 80025f6:	f7ff ff15 	bl	8002424 <SD_ReadyWait>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2bff      	cmp	r3, #255	; 0xff
 80025fe:	d001      	beq.n	8002604 <SD_SendCmd+0x1a>
		return 0xFF;
 8002600:	23ff      	movs	r3, #255	; 0xff
 8002602:	e042      	b.n	800268a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd);				  /* Command */
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff feae 	bl	8002368 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); /* Argument[31..24] */
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	0e1b      	lsrs	r3, r3, #24
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fea8 	bl	8002368 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); /* Argument[23..16] */
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	0c1b      	lsrs	r3, r3, #16
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fea2 	bl	8002368 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff fe9c 	bl	8002368 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg);		  /* Argument[7..0] */
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fe97 	bl	8002368 <SPI_TxByte>

	/* prepare CRC */
	if (cmd == CMD0)
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d102      	bne.n	8002646 <SD_SendCmd+0x5c>
		crc = 0x95; /* CRC for CMD0(0) */
 8002640:	2395      	movs	r3, #149	; 0x95
 8002642:	73fb      	strb	r3, [r7, #15]
 8002644:	e007      	b.n	8002656 <SD_SendCmd+0x6c>
	else if (cmd == CMD8)
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b48      	cmp	r3, #72	; 0x48
 800264a:	d102      	bne.n	8002652 <SD_SendCmd+0x68>
		crc = 0x87; /* CRC for CMD8(0x1AA) */
 800264c:	2387      	movs	r3, #135	; 0x87
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	e001      	b.n	8002656 <SD_SendCmd+0x6c>
	else
		crc = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fe85 	bl	8002368 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12)
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b4c      	cmp	r3, #76	; 0x4c
 8002662:	d101      	bne.n	8002668 <SD_SendCmd+0x7e>
		SPI_RxByte();
 8002664:	f7ff feb4 	bl	80023d0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8002668:	230a      	movs	r3, #10
 800266a:	73bb      	strb	r3, [r7, #14]
	do
	{
		res = SPI_RxByte();
 800266c:	f7ff feb0 	bl	80023d0 <SPI_RxByte>
 8002670:	4603      	mov	r3, r0
 8002672:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002674:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002678:	2b00      	cmp	r3, #0
 800267a:	da05      	bge.n	8002688 <SD_SendCmd+0x9e>
 800267c:	7bbb      	ldrb	r3, [r7, #14]
 800267e:	3b01      	subs	r3, #1
 8002680:	73bb      	strb	r3, [r7, #14]
 8002682:	7bbb      	ldrb	r3, [r7, #14]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f1      	bne.n	800266c <SD_SendCmd+0x82>

	return res;
 8002688:	7b7b      	ldrb	r3, [r7, #13]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if (drv)
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <SD_disk_initialize+0x14>
		return STA_NOINIT;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0d1      	b.n	800284c <SD_disk_initialize+0x1b8>

	/* no disk */
	if (Stat & STA_NODISK)
 80026a8:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <SD_disk_initialize+0x1c0>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <SD_disk_initialize+0x2a>
		return Stat;
 80026b6:	4b67      	ldr	r3, [pc, #412]	; (8002854 <SD_disk_initialize+0x1c0>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	e0c6      	b.n	800284c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80026be:	f7ff fecb 	bl	8002458 <SD_PowerOn>

	/* slave select */
	SELECT();
 80026c2:	f7ff fe35 	bl	8002330 <SELECT>

	/* check disk type */
	type = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80026ca:	2100      	movs	r1, #0
 80026cc:	2040      	movs	r0, #64	; 0x40
 80026ce:	f7ff ff8c 	bl	80025ea <SD_SendCmd>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	f040 80a1 	bne.w	800281c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <SD_disk_initialize+0x1c4>)
 80026dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026e0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80026e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80026e6:	2048      	movs	r0, #72	; 0x48
 80026e8:	f7ff ff7f 	bl	80025ea <SD_SendCmd>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d155      	bne.n	800279e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e00c      	b.n	8002712 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80026f8:	7bfc      	ldrb	r4, [r7, #15]
 80026fa:	f7ff fe69 	bl	80023d0 <SPI_RxByte>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4423      	add	r3, r4
 8002708:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	3301      	adds	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d9ef      	bls.n	80026f8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002718:	7abb      	ldrb	r3, [r7, #10]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d17e      	bne.n	800281c <SD_disk_initialize+0x188>
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	2baa      	cmp	r3, #170	; 0xaa
 8002722:	d17b      	bne.n	800281c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002724:	2100      	movs	r1, #0
 8002726:	2077      	movs	r0, #119	; 0x77
 8002728:	f7ff ff5f 	bl	80025ea <SD_SendCmd>
 800272c:	4603      	mov	r3, r0
 800272e:	2b01      	cmp	r3, #1
 8002730:	d807      	bhi.n	8002742 <SD_disk_initialize+0xae>
 8002732:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002736:	2069      	movs	r0, #105	; 0x69
 8002738:	f7ff ff57 	bl	80025ea <SD_SendCmd>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <SD_disk_initialize+0xb8>
						break;
				} while (Timer1);
 8002742:	4b45      	ldr	r3, [pc, #276]	; (8002858 <SD_disk_initialize+0x1c4>)
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ec      	bne.n	8002724 <SD_disk_initialize+0x90>
 800274a:	e000      	b.n	800274e <SD_disk_initialize+0xba>
						break;
 800274c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800274e:	4b42      	ldr	r3, [pc, #264]	; (8002858 <SD_disk_initialize+0x1c4>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d062      	beq.n	800281c <SD_disk_initialize+0x188>
 8002756:	2100      	movs	r1, #0
 8002758:	207a      	movs	r0, #122	; 0x7a
 800275a:	f7ff ff46 	bl	80025ea <SD_SendCmd>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d15b      	bne.n	800281c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e00c      	b.n	8002784 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800276a:	7bfc      	ldrb	r4, [r7, #15]
 800276c:	f7ff fe30 	bl	80023d0 <SPI_RxByte>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	4423      	add	r3, r4
 800277a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	3301      	adds	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d9ef      	bls.n	800276a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800278a:	7a3b      	ldrb	r3, [r7, #8]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <SD_disk_initialize+0x104>
 8002794:	230c      	movs	r3, #12
 8002796:	e000      	b.n	800279a <SD_disk_initialize+0x106>
 8002798:	2304      	movs	r3, #4
 800279a:	73bb      	strb	r3, [r7, #14]
 800279c:	e03e      	b.n	800281c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800279e:	2100      	movs	r1, #0
 80027a0:	2077      	movs	r0, #119	; 0x77
 80027a2:	f7ff ff22 	bl	80025ea <SD_SendCmd>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d808      	bhi.n	80027be <SD_disk_initialize+0x12a>
 80027ac:	2100      	movs	r1, #0
 80027ae:	2069      	movs	r0, #105	; 0x69
 80027b0:	f7ff ff1b 	bl	80025ea <SD_SendCmd>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d801      	bhi.n	80027be <SD_disk_initialize+0x12a>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e000      	b.n	80027c0 <SD_disk_initialize+0x12c>
 80027be:	2301      	movs	r3, #1
 80027c0:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80027c2:	7bbb      	ldrb	r3, [r7, #14]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d10e      	bne.n	80027e6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80027c8:	2100      	movs	r1, #0
 80027ca:	2077      	movs	r0, #119	; 0x77
 80027cc:	f7ff ff0d 	bl	80025ea <SD_SendCmd>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d80e      	bhi.n	80027f4 <SD_disk_initialize+0x160>
 80027d6:	2100      	movs	r1, #0
 80027d8:	2069      	movs	r0, #105	; 0x69
 80027da:	f7ff ff06 	bl	80025ea <SD_SendCmd>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <SD_disk_initialize+0x160>
						break; /* ACMD41 */
 80027e4:	e00c      	b.n	8002800 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0)
 80027e6:	2100      	movs	r1, #0
 80027e8:	2041      	movs	r0, #65	; 0x41
 80027ea:	f7ff fefe 	bl	80025ea <SD_SendCmd>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <SD_disk_initialize+0x16a>
						break; /* CMD1 */
				}

			} while (Timer1);
 80027f4:	4b18      	ldr	r3, [pc, #96]	; (8002858 <SD_disk_initialize+0x1c4>)
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e2      	bne.n	80027c2 <SD_disk_initialize+0x12e>
 80027fc:	e000      	b.n	8002800 <SD_disk_initialize+0x16c>
						break; /* CMD1 */
 80027fe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8002800:	4b15      	ldr	r3, [pc, #84]	; (8002858 <SD_disk_initialize+0x1c4>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <SD_disk_initialize+0x184>
 8002808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800280c:	2050      	movs	r0, #80	; 0x50
 800280e:	f7ff feec 	bl	80025ea <SD_SendCmd>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <SD_disk_initialize+0x188>
				type = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800281c:	4a0f      	ldr	r2, [pc, #60]	; (800285c <SD_disk_initialize+0x1c8>)
 800281e:	7bbb      	ldrb	r3, [r7, #14]
 8002820:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002822:	f7ff fd93 	bl	800234c <DESELECT>
	SPI_RxByte();
 8002826:	f7ff fdd3 	bl	80023d0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800282a:	7bbb      	ldrb	r3, [r7, #14]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <SD_disk_initialize+0x1c0>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f023 0301 	bic.w	r3, r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <SD_disk_initialize+0x1c0>)
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e001      	b.n	8002846 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002842:	f7ff fe4b 	bl	80024dc <SD_PowerOff>
	}

	return Stat;
 8002846:	4b03      	ldr	r3, [pc, #12]	; (8002854 <SD_disk_initialize+0x1c0>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bd90      	pop	{r4, r7, pc}
 8002854:	20000009 	.word	0x20000009
 8002858:	2000423e 	.word	0x2000423e
 800285c:	200000a4 	.word	0x200000a4

08002860 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <SD_disk_status+0x14>
		return STA_NOINIT;
 8002870:	2301      	movs	r3, #1
 8002872:	e002      	b.n	800287a <SD_disk_status+0x1a>
	return Stat;
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <SD_disk_status+0x24>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	b2db      	uxtb	r3, r3
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	20000009 	.word	0x20000009

08002888 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4603      	mov	r3, r0
 8002896:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <SD_disk_read+0x1c>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <SD_disk_read+0x20>
		return RES_PARERR;
 80028a4:	2304      	movs	r3, #4
 80028a6:	e051      	b.n	800294c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT)
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <SD_disk_read+0xcc>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <SD_disk_read+0x32>
		return RES_NOTRDY;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e048      	b.n	800294c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 80028ba:	4b27      	ldr	r3, [pc, #156]	; (8002958 <SD_disk_read+0xd0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <SD_disk_read+0x44>
		sector *= 512;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	025b      	lsls	r3, r3, #9
 80028ca:	607b      	str	r3, [r7, #4]

	SELECT();
 80028cc:	f7ff fd30 	bl	8002330 <SELECT>

	if (count == 1)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d111      	bne.n	80028fa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	2051      	movs	r0, #81	; 0x51
 80028da:	f7ff fe86 	bl	80025ea <SD_SendCmd>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d129      	bne.n	8002938 <SD_disk_read+0xb0>
 80028e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e8:	68b8      	ldr	r0, [r7, #8]
 80028ea:	f7ff fe0d 	bl	8002508 <SD_RxDataBlock>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d021      	beq.n	8002938 <SD_disk_read+0xb0>
			count = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	e01e      	b.n	8002938 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	2052      	movs	r0, #82	; 0x52
 80028fe:	f7ff fe74 	bl	80025ea <SD_SendCmd>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d117      	bne.n	8002938 <SD_disk_read+0xb0>
		{
			do
			{
				if (!SD_RxDataBlock(buff, 512))
 8002908:	f44f 7100 	mov.w	r1, #512	; 0x200
 800290c:	68b8      	ldr	r0, [r7, #8]
 800290e:	f7ff fdfb 	bl	8002508 <SD_RxDataBlock>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <SD_disk_read+0xa6>
					break;
				buff += 512;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800291e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	3b01      	subs	r3, #1
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ed      	bne.n	8002908 <SD_disk_read+0x80>
 800292c:	e000      	b.n	8002930 <SD_disk_read+0xa8>
					break;
 800292e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002930:	2100      	movs	r1, #0
 8002932:	204c      	movs	r0, #76	; 0x4c
 8002934:	f7ff fe59 	bl	80025ea <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002938:	f7ff fd08 	bl	800234c <DESELECT>
	SPI_RxByte();
 800293c:	f7ff fd48 	bl	80023d0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000009 	.word	0x20000009
 8002958:	200000a4 	.word	0x200000a4

0800295c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4603      	mov	r3, r0
 800296a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count)
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <SD_disk_write+0x1c>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <SD_disk_write+0x20>
		return RES_PARERR;
 8002978:	2304      	movs	r3, #4
 800297a:	e06b      	b.n	8002a54 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT)
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <SD_disk_write+0x100>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <SD_disk_write+0x32>
		return RES_NOTRDY;
 800298a:	2303      	movs	r3, #3
 800298c:	e062      	b.n	8002a54 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT)
 800298e:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <SD_disk_write+0x100>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <SD_disk_write+0x44>
		return RES_WRPRT;
 800299c:	2302      	movs	r3, #2
 800299e:	e059      	b.n	8002a54 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2))
 80029a0:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <SD_disk_write+0x104>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <SD_disk_write+0x56>
		sector *= 512;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	607b      	str	r3, [r7, #4]

	SELECT();
 80029b2:	f7ff fcbd 	bl	8002330 <SELECT>

	if (count == 1)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d110      	bne.n	80029de <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	2058      	movs	r0, #88	; 0x58
 80029c0:	f7ff fe13 	bl	80025ea <SD_SendCmd>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d13a      	bne.n	8002a40 <SD_disk_write+0xe4>
 80029ca:	21fe      	movs	r1, #254	; 0xfe
 80029cc:	68b8      	ldr	r0, [r7, #8]
 80029ce:	f7ff fdc9 	bl	8002564 <SD_TxDataBlock>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d033      	beq.n	8002a40 <SD_disk_write+0xe4>
			count = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	e030      	b.n	8002a40 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80029de:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <SD_disk_write+0x104>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80029ea:	2100      	movs	r1, #0
 80029ec:	2077      	movs	r0, #119	; 0x77
 80029ee:	f7ff fdfc 	bl	80025ea <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80029f2:	6839      	ldr	r1, [r7, #0]
 80029f4:	2057      	movs	r0, #87	; 0x57
 80029f6:	f7ff fdf8 	bl	80025ea <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	2059      	movs	r0, #89	; 0x59
 80029fe:	f7ff fdf4 	bl	80025ea <SD_SendCmd>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d11b      	bne.n	8002a40 <SD_disk_write+0xe4>
		{
			do
			{
				if (!SD_TxDataBlock(buff, 0xFC))
 8002a08:	21fc      	movs	r1, #252	; 0xfc
 8002a0a:	68b8      	ldr	r0, [r7, #8]
 8002a0c:	f7ff fdaa 	bl	8002564 <SD_TxDataBlock>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <SD_disk_write+0xd0>
					break;
				buff += 512;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a1c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ee      	bne.n	8002a08 <SD_disk_write+0xac>
 8002a2a:	e000      	b.n	8002a2e <SD_disk_write+0xd2>
					break;
 8002a2c:	bf00      	nop

			/* STOP_TRAN token */
			if (!SD_TxDataBlock(0, 0xFD))
 8002a2e:	21fd      	movs	r1, #253	; 0xfd
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7ff fd97 	bl	8002564 <SD_TxDataBlock>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <SD_disk_write+0xe4>
			{
				count = 1;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002a40:	f7ff fc84 	bl	800234c <DESELECT>
	SPI_RxByte();
 8002a44:	f7ff fcc4 	bl	80023d0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3710      	adds	r7, #16
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	20000009 	.word	0x20000009
 8002a60:	200000a4 	.word	0x200000a4

08002a64 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b08b      	sub	sp, #44	; 0x2c
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	603a      	str	r2, [r7, #0]
 8002a6e:	71fb      	strb	r3, [r7, #7]
 8002a70:	460b      	mov	r3, r1
 8002a72:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv)
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <SD_disk_ioctl+0x1e>
		return RES_PARERR;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	e115      	b.n	8002cae <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8002a88:	79bb      	ldrb	r3, [r7, #6]
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d124      	bne.n	8002ad8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d012      	beq.n	8002abc <SD_disk_ioctl+0x58>
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	dc1a      	bgt.n	8002ad0 <SD_disk_ioctl+0x6c>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <SD_disk_ioctl+0x40>
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d006      	beq.n	8002ab0 <SD_disk_ioctl+0x4c>
 8002aa2:	e015      	b.n	8002ad0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff(); /* Power Off */
 8002aa4:	f7ff fd1a 	bl	80024dc <SD_PowerOff>
			res = RES_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002aae:	e0fc      	b.n	8002caa <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn(); /* Power On */
 8002ab0:	f7ff fcd2 	bl	8002458 <SD_PowerOn>
			res = RES_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002aba:	e0f6      	b.n	8002caa <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	1c5c      	adds	r4, r3, #1
 8002ac0:	f7ff fd18 	bl	80024f4 <SD_CheckPower>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	7023      	strb	r3, [r4, #0]
			res = RES_OK; /* Power Check */
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002ace:	e0ec      	b.n	8002caa <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ad6:	e0e8      	b.n	8002caa <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT)
 8002ad8:	4b77      	ldr	r3, [pc, #476]	; (8002cb8 <SD_disk_ioctl+0x254>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <SD_disk_ioctl+0x86>
			return RES_NOTRDY;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e0e1      	b.n	8002cae <SD_disk_ioctl+0x24a>

		SELECT();
 8002aea:	f7ff fc21 	bl	8002330 <SELECT>

		switch (ctrl)
 8002aee:	79bb      	ldrb	r3, [r7, #6]
 8002af0:	2b0d      	cmp	r3, #13
 8002af2:	f200 80cb 	bhi.w	8002c8c <SD_disk_ioctl+0x228>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <SD_disk_ioctl+0x98>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002bf7 	.word	0x08002bf7
 8002b00:	08002b35 	.word	0x08002b35
 8002b04:	08002be7 	.word	0x08002be7
 8002b08:	08002c8d 	.word	0x08002c8d
 8002b0c:	08002c8d 	.word	0x08002c8d
 8002b10:	08002c8d 	.word	0x08002c8d
 8002b14:	08002c8d 	.word	0x08002c8d
 8002b18:	08002c8d 	.word	0x08002c8d
 8002b1c:	08002c8d 	.word	0x08002c8d
 8002b20:	08002c8d 	.word	0x08002c8d
 8002b24:	08002c8d 	.word	0x08002c8d
 8002b28:	08002c09 	.word	0x08002c09
 8002b2c:	08002c2d 	.word	0x08002c2d
 8002b30:	08002c51 	.word	0x08002c51
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002b34:	2100      	movs	r1, #0
 8002b36:	2049      	movs	r0, #73	; 0x49
 8002b38:	f7ff fd57 	bl	80025ea <SD_SendCmd>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 80a8 	bne.w	8002c94 <SD_disk_ioctl+0x230>
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	2110      	movs	r1, #16
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fcdc 	bl	8002508 <SD_RxDataBlock>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 809e 	beq.w	8002c94 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8002b58:	7b3b      	ldrb	r3, [r7, #12]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10e      	bne.n	8002b80 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
 8002b62:	7d7b      	ldrb	r3, [r7, #21]
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	7d3b      	ldrb	r3, [r7, #20]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	83fb      	strh	r3, [r7, #30]
					*(DWORD *)buff = (DWORD)csize << 10;
 8002b76:	8bfb      	ldrh	r3, [r7, #30]
 8002b78:	029a      	lsls	r2, r3, #10
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e02e      	b.n	8002bde <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002b80:	7c7b      	ldrb	r3, [r7, #17]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	7dbb      	ldrb	r3, [r7, #22]
 8002b8a:	09db      	lsrs	r3, r3, #7
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	7d7b      	ldrb	r3, [r7, #21]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f003 0306 	and.w	r3, r3, #6
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002ba8:	7d3b      	ldrb	r3, [r7, #20]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	7cbb      	ldrb	r3, [r7, #18]
 8002bbe:	029b      	lsls	r3, r3, #10
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	3301      	adds	r3, #1
 8002bce:	83fb      	strh	r3, [r7, #30]
					*(DWORD *)buff = (DWORD)csize << (n - 9);
 8002bd0:	8bfa      	ldrh	r2, [r7, #30]
 8002bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bd6:	3b09      	subs	r3, #9
 8002bd8:	409a      	lsls	r2, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002be4:	e056      	b.n	8002c94 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD *)buff = 512;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bec:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002bf4:	e055      	b.n	8002ca2 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF)
 8002bf6:	f7ff fc15 	bl	8002424 <SD_ReadyWait>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2bff      	cmp	r3, #255	; 0xff
 8002bfe:	d14b      	bne.n	8002c98 <SD_disk_ioctl+0x234>
				res = RES_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c06:	e047      	b.n	8002c98 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2049      	movs	r0, #73	; 0x49
 8002c0c:	f7ff fced 	bl	80025ea <SD_SendCmd>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d142      	bne.n	8002c9c <SD_disk_ioctl+0x238>
 8002c16:	2110      	movs	r1, #16
 8002c18:	6a38      	ldr	r0, [r7, #32]
 8002c1a:	f7ff fc75 	bl	8002508 <SD_RxDataBlock>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d03b      	beq.n	8002c9c <SD_disk_ioctl+0x238>
				res = RES_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c2a:	e037      	b.n	8002c9c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	204a      	movs	r0, #74	; 0x4a
 8002c30:	f7ff fcdb 	bl	80025ea <SD_SendCmd>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d132      	bne.n	8002ca0 <SD_disk_ioctl+0x23c>
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	6a38      	ldr	r0, [r7, #32]
 8002c3e:	f7ff fc63 	bl	8002508 <SD_RxDataBlock>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d02b      	beq.n	8002ca0 <SD_disk_ioctl+0x23c>
				res = RES_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002c4e:	e027      	b.n	8002ca0 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002c50:	2100      	movs	r1, #0
 8002c52:	207a      	movs	r0, #122	; 0x7a
 8002c54:	f7ff fcc9 	bl	80025ea <SD_SendCmd>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d116      	bne.n	8002c8c <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c64:	e00b      	b.n	8002c7e <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8002c66:	6a3c      	ldr	r4, [r7, #32]
 8002c68:	1c63      	adds	r3, r4, #1
 8002c6a:	623b      	str	r3, [r7, #32]
 8002c6c:	f7ff fbb0 	bl	80023d0 <SPI_RxByte>
 8002c70:	4603      	mov	r3, r0
 8002c72:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002c74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002c7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d9ef      	bls.n	8002c66 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002c92:	e006      	b.n	8002ca2 <SD_disk_ioctl+0x23e>
			break;
 8002c94:	bf00      	nop
 8002c96:	e004      	b.n	8002ca2 <SD_disk_ioctl+0x23e>
			break;
 8002c98:	bf00      	nop
 8002c9a:	e002      	b.n	8002ca2 <SD_disk_ioctl+0x23e>
			break;
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <SD_disk_ioctl+0x23e>
			break;
 8002ca0:	bf00      	nop
		}

		DESELECT();
 8002ca2:	f7ff fb53 	bl	800234c <DESELECT>
		SPI_RxByte();
 8002ca6:	f7ff fb93 	bl	80023d0 <SPI_RxByte>
	}

	return res;
 8002caa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	372c      	adds	r7, #44	; 0x2c
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd90      	pop	{r4, r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000009 	.word	0x20000009

08002cbc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fce3 	bl	8002694 <SD_disk_initialize>
 8002cce:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fdbb 	bl	8002860 <SD_disk_status>
 8002cea:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4603      	mov	r3, r0
 8002d02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8002d04:	7bf8      	ldrb	r0, [r7, #15]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	f7ff fdbc 	bl	8002888 <SD_disk_read>
 8002d10:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
 8002d26:	4603      	mov	r3, r0
 8002d28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8002d2a:	7bf8      	ldrb	r0, [r7, #15]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	f7ff fe13 	bl	800295c <SD_disk_write>
 8002d36:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	603a      	str	r2, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8002d50:	79b9      	ldrb	r1, [r7, #6]
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fe84 	bl	8002a64 <SD_disk_ioctl>
 8002d5c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <disk_status+0x30>)
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	79fa      	ldrb	r2, [r7, #7]
 8002d80:	4905      	ldr	r1, [pc, #20]	; (8002d98 <disk_status+0x30>)
 8002d82:	440a      	add	r2, r1
 8002d84:	7a12      	ldrb	r2, [r2, #8]
 8002d86:	4610      	mov	r0, r2
 8002d88:	4798      	blx	r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200000c8 	.word	0x200000c8

08002d9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <disk_initialize+0x48>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d111      	bne.n	8002dd8 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <disk_initialize+0x48>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <disk_initialize+0x48>)
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	79fa      	ldrb	r2, [r7, #7]
 8002dca:	4906      	ldr	r1, [pc, #24]	; (8002de4 <disk_initialize+0x48>)
 8002dcc:	440a      	add	r2, r1
 8002dce:	7a12      	ldrb	r2, [r2, #8]
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4798      	blx	r3
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200000c8 	.word	0x200000c8

08002de8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4603      	mov	r3, r0
 8002df6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <disk_read+0x3c>)
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	689c      	ldr	r4, [r3, #8]
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <disk_read+0x3c>)
 8002e08:	4413      	add	r3, r2
 8002e0a:	7a18      	ldrb	r0, [r3, #8]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	47a0      	blx	r4
 8002e14:	4603      	mov	r3, r0
 8002e16:	75fb      	strb	r3, [r7, #23]
  return res;
 8002e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200000c8 	.word	0x200000c8

08002e28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4603      	mov	r3, r0
 8002e36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <disk_write+0x3c>)
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	68dc      	ldr	r4, [r3, #12]
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <disk_write+0x3c>)
 8002e48:	4413      	add	r3, r2
 8002e4a:	7a18      	ldrb	r0, [r3, #8]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	47a0      	blx	r4
 8002e54:	4603      	mov	r3, r0
 8002e56:	75fb      	strb	r3, [r7, #23]
  return res;
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200000c8 	.word	0x200000c8

08002e68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	603a      	str	r2, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
 8002e74:	460b      	mov	r3, r1
 8002e76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <disk_ioctl+0x38>)
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	79fa      	ldrb	r2, [r7, #7]
 8002e86:	4906      	ldr	r1, [pc, #24]	; (8002ea0 <disk_ioctl+0x38>)
 8002e88:	440a      	add	r2, r1
 8002e8a:	7a10      	ldrb	r0, [r2, #8]
 8002e8c:	79b9      	ldrb	r1, [r7, #6]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	4798      	blx	r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	73fb      	strb	r3, [r7, #15]
  return res;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200000c8 	.word	0x200000c8

08002ea4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002eb8:	e007      	b.n	8002eca <mem_cpy+0x26>
		*d++ = *s++;
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	1c53      	adds	r3, r2, #1
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	1c59      	adds	r1, r3, #1
 8002ec4:	6179      	str	r1, [r7, #20]
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	1e5a      	subs	r2, r3, #1
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f2      	bne.n	8002eba <mem_cpy+0x16>
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8002ef0:	e005      	b.n	8002efe <mem_set+0x1e>
		*d++ = (BYTE)val;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	617a      	str	r2, [r7, #20]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	1e5a      	subs	r2, r3, #1
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1f4      	bne.n	8002ef2 <mem_set+0x12>
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8002f2c:	bf00      	nop
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <mem_cmp+0x40>
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	61fa      	str	r2, [r7, #28]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	61ba      	str	r2, [r7, #24]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	1acb      	subs	r3, r1, r3
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ec      	beq.n	8002f2e <mem_cmp+0x1a>
	return r;
 8002f54:	697b      	ldr	r3, [r7, #20]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	; 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr

08002f60 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8002f6a:	e002      	b.n	8002f72 <chk_chr+0x12>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <chk_chr+0x26>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d1f2      	bne.n	8002f6c <chk_chr+0xc>
	return *str;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	781b      	ldrb	r3, [r3, #0]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	e03d      	b.n	8003024 <chk_lock+0x90>
		if (Files[i].fs) {	/* Existing entry */
 8002fa8:	4932      	ldr	r1, [pc, #200]	; (8003074 <chk_lock+0xe0>)
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02e      	beq.n	800301a <chk_lock+0x86>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002fbc:	492d      	ldr	r1, [pc, #180]	; (8003074 <chk_lock+0xe0>)
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d122      	bne.n	800301e <chk_lock+0x8a>
				Files[i].clu == dp->sclust &&
 8002fd8:	4926      	ldr	r1, [pc, #152]	; (8003074 <chk_lock+0xe0>)
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	681b      	ldr	r3, [r3, #0]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d112      	bne.n	800301e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8002ff8:	491e      	ldr	r1, [pc, #120]	; (8003074 <chk_lock+0xe0>)
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3308      	adds	r3, #8
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003010:	3306      	adds	r3, #6
 8003012:	881b      	ldrh	r3, [r3, #0]
				Files[i].clu == dp->sclust &&
 8003014:	429a      	cmp	r2, r3
 8003016:	d102      	bne.n	800301e <chk_lock+0x8a>
				Files[i].idx == dp->index) break;
 8003018:	e007      	b.n	800302a <chk_lock+0x96>
		} else {			/* Blank entry */
			be = 1;
 800301a:	2301      	movs	r3, #1
 800301c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3301      	adds	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d9be      	bls.n	8002fa8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d109      	bne.n	8003044 <chk_lock+0xb0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <chk_lock+0xa8>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d101      	bne.n	8003040 <chk_lock+0xac>
 800303c:	2300      	movs	r3, #0
 800303e:	e013      	b.n	8003068 <chk_lock+0xd4>
 8003040:	2312      	movs	r3, #18
 8003042:	e011      	b.n	8003068 <chk_lock+0xd4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <chk_lock+0xce>
 800304a:	490a      	ldr	r1, [pc, #40]	; (8003074 <chk_lock+0xe0>)
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	330a      	adds	r3, #10
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003060:	d101      	bne.n	8003066 <chk_lock+0xd2>
 8003062:	2310      	movs	r3, #16
 8003064:	e000      	b.n	8003068 <chk_lock+0xd4>
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	200000b0 	.word	0x200000b0

08003078 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	e002      	b.n	800308a <enq_lock+0x12>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3301      	adds	r3, #1
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d809      	bhi.n	80030a4 <enq_lock+0x2c>
 8003090:	490a      	ldr	r1, [pc, #40]	; (80030bc <enq_lock+0x44>)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ef      	bne.n	8003084 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	200000b0 	.word	0x200000b0

080030c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e030      	b.n	8003132 <inc_lock+0x72>
		if (Files[i].fs == dp->fs &&
 80030d0:	495a      	ldr	r1, [pc, #360]	; (800323c <inc_lock+0x17c>)
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d11f      	bne.n	800312c <inc_lock+0x6c>
			Files[i].clu == dp->sclust &&
 80030ec:	4953      	ldr	r1, [pc, #332]	; (800323c <inc_lock+0x17c>)
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3304      	adds	r3, #4
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003104:	3308      	adds	r3, #8
 8003106:	681b      	ldr	r3, [r3, #0]
		if (Files[i].fs == dp->fs &&
 8003108:	429a      	cmp	r2, r3
 800310a:	d10f      	bne.n	800312c <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800310c:	494b      	ldr	r1, [pc, #300]	; (800323c <inc_lock+0x17c>)
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3308      	adds	r3, #8
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003124:	3306      	adds	r3, #6
 8003126:	881b      	ldrh	r3, [r3, #0]
			Files[i].clu == dp->sclust &&
 8003128:	429a      	cmp	r2, r3
 800312a:	d006      	beq.n	800313a <inc_lock+0x7a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3301      	adds	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d9cb      	bls.n	80030d0 <inc_lock+0x10>
 8003138:	e000      	b.n	800313c <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
 800313a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d14a      	bne.n	80031d8 <inc_lock+0x118>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e002      	b.n	800314e <inc_lock+0x8e>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d809      	bhi.n	8003168 <inc_lock+0xa8>
 8003154:	4939      	ldr	r1, [pc, #228]	; (800323c <inc_lock+0x17c>)
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1ef      	bne.n	8003148 <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d101      	bne.n	8003172 <inc_lock+0xb2>
 800316e:	2300      	movs	r3, #0
 8003170:	e05f      	b.n	8003232 <inc_lock+0x172>
		Files[i].fs = dp->fs;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	4830      	ldr	r0, [pc, #192]	; (800323c <inc_lock+0x17c>)
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4403      	add	r3, r0
 8003188:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003190:	3308      	adds	r3, #8
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	4829      	ldr	r0, [pc, #164]	; (800323c <inc_lock+0x17c>)
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4403      	add	r3, r0
 80031a2:	3304      	adds	r3, #4
 80031a4:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ac:	3306      	adds	r3, #6
 80031ae:	8818      	ldrh	r0, [r3, #0]
 80031b0:	4922      	ldr	r1, [pc, #136]	; (800323c <inc_lock+0x17c>)
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	3308      	adds	r3, #8
 80031c0:	4602      	mov	r2, r0
 80031c2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80031c4:	491d      	ldr	r1, [pc, #116]	; (800323c <inc_lock+0x17c>)
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	330a      	adds	r3, #10
 80031d4:	2200      	movs	r2, #0
 80031d6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <inc_lock+0x138>
 80031de:	4917      	ldr	r1, [pc, #92]	; (800323c <inc_lock+0x17c>)
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	330a      	adds	r3, #10
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <inc_lock+0x138>
 80031f4:	2300      	movs	r3, #0
 80031f6:	e01c      	b.n	8003232 <inc_lock+0x172>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10b      	bne.n	8003216 <inc_lock+0x156>
 80031fe:	490f      	ldr	r1, [pc, #60]	; (800323c <inc_lock+0x17c>)
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	330a      	adds	r3, #10
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	b299      	uxth	r1, r3
 8003214:	e001      	b.n	800321a <inc_lock+0x15a>
 8003216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800321a:	4808      	ldr	r0, [pc, #32]	; (800323c <inc_lock+0x17c>)
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4403      	add	r3, r0
 8003228:	330a      	adds	r3, #10
 800322a:	460a      	mov	r2, r1
 800322c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	3301      	adds	r3, #1
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	200000b0 	.word	0x200000b0

08003240 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d82e      	bhi.n	80032b2 <dec_lock+0x72>
		n = Files[i].ctr;
 8003254:	491b      	ldr	r1, [pc, #108]	; (80032c4 <dec_lock+0x84>)
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	330a      	adds	r3, #10
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003268:	89fb      	ldrh	r3, [r7, #14]
 800326a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800326e:	d101      	bne.n	8003274 <dec_lock+0x34>
 8003270:	2300      	movs	r3, #0
 8003272:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8003274:	89fb      	ldrh	r3, [r7, #14]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d002      	beq.n	8003280 <dec_lock+0x40>
 800327a:	89fb      	ldrh	r3, [r7, #14]
 800327c:	3b01      	subs	r3, #1
 800327e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003280:	4910      	ldr	r1, [pc, #64]	; (80032c4 <dec_lock+0x84>)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	330a      	adds	r3, #10
 8003290:	89fa      	ldrh	r2, [r7, #14]
 8003292:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003294:	89fb      	ldrh	r3, [r7, #14]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d108      	bne.n	80032ac <dec_lock+0x6c>
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <dec_lock+0x84>)
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	737b      	strb	r3, [r7, #13]
 80032b0:	e001      	b.n	80032b6 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80032b2:	2302      	movs	r3, #2
 80032b4:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80032b6:	7b7b      	ldrb	r3, [r7, #13]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	200000b0 	.word	0x200000b0

080032c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e016      	b.n	8003304 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80032d6:	4910      	ldr	r1, [pc, #64]	; (8003318 <clear_lock+0x50>)
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d108      	bne.n	80032fe <clear_lock+0x36>
 80032ec:	490a      	ldr	r1, [pc, #40]	; (8003318 <clear_lock+0x50>)
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3301      	adds	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d9e5      	bls.n	80032d6 <clear_lock+0xe>
	}
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	200000b0 	.word	0x200000b0

0800331c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800332e:	3304      	adds	r3, #4
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d047      	beq.n	80033c6 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800333c:	330c      	adds	r3, #12
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003348:	3301      	adds	r3, #1
 800334a:	7818      	ldrb	r0, [r3, #0]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	2301      	movs	r3, #1
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	f7ff fd69 	bl	8002e28 <disk_write>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <sync_window+0x46>
			res = FR_DISK_ERR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
 8003360:	e031      	b.n	80033c6 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003368:	3304      	adds	r3, #4
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	1ad2      	subs	r2, r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003380:	3318      	adds	r3, #24
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d21e      	bcs.n	80033c6 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338e:	3303      	adds	r3, #3
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	e014      	b.n	80033c0 <sync_window+0xa4>
					wsect += fs->fsize;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339c:	3318      	adds	r3, #24
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	4413      	add	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ac:	3301      	adds	r3, #1
 80033ae:	7818      	ldrb	r0, [r3, #0]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	2301      	movs	r3, #1
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	f7ff fd37 	bl	8002e28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	3b01      	subs	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d8e7      	bhi.n	8003396 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80033e4:	330c      	adds	r3, #12
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d01f      	beq.n	800342e <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ff94 	bl	800331c <sync_window>
 80033f4:	4603      	mov	r3, r0
 80033f6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d117      	bne.n	800342e <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003404:	3301      	adds	r3, #1
 8003406:	7818      	ldrb	r0, [r3, #0]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	2301      	movs	r3, #1
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	f7ff fceb 	bl	8002de8 <disk_read>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800341c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003428:	330c      	adds	r3, #12
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff ff6b 	bl	800331c <sync_window>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f040 80bd 	bne.w	80035cc <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b03      	cmp	r3, #3
 800345c:	f040 80a7 	bne.w	80035ae <sync_fs+0x176>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003466:	3305      	adds	r3, #5
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	f040 809f 	bne.w	80035ae <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003478:	330a      	adds	r3, #10
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	2100      	movs	r1, #0
 8003480:	f7ff fd2e 	bl	8002ee0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2255      	movs	r2, #85	; 0x55
 8003488:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	22aa      	movs	r2, #170	; 0xaa
 8003490:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2252      	movs	r2, #82	; 0x52
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2252      	movs	r2, #82	; 0x52
 800349e:	705a      	strb	r2, [r3, #1]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2261      	movs	r2, #97	; 0x61
 80034a4:	709a      	strb	r2, [r3, #2]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2241      	movs	r2, #65	; 0x41
 80034aa:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2272      	movs	r2, #114	; 0x72
 80034b0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2272      	movs	r2, #114	; 0x72
 80034b8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2241      	movs	r2, #65	; 0x41
 80034c0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2261      	movs	r2, #97	; 0x61
 80034c8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034d2:	3310      	adds	r3, #16
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034e4:	3310      	adds	r3, #16
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034fc:	3310      	adds	r3, #16
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	b2da      	uxtb	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003510:	3310      	adds	r3, #16
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0e1b      	lsrs	r3, r3, #24
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003524:	330c      	adds	r3, #12
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003536:	330c      	adds	r3, #12
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	b29b      	uxth	r3, r3
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354e:	330c      	adds	r3, #12
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	b2da      	uxtb	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003562:	330c      	adds	r3, #12
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	0e1b      	lsrs	r3, r3, #24
 8003568:	b2da      	uxtb	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003576:	331c      	adds	r3, #28
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003582:	330c      	adds	r3, #12
 8003584:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358c:	3301      	adds	r3, #1
 800358e:	7818      	ldrb	r0, [r3, #0]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003598:	330c      	adds	r3, #12
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	2301      	movs	r3, #1
 800359e:	f7ff fc43 	bl	8002e28 <disk_write>
			fs->fsi_flag = 0;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a8:	3305      	adds	r3, #5
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035b4:	3301      	adds	r3, #1
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fc53 	bl	8002e68 <disk_ioctl>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <sync_fs+0x194>
			res = FR_DISK_ERR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	3b02      	subs	r3, #2
 80035e4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ec:	3314      	adds	r3, #20
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3b02      	subs	r3, #2
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d301      	bcc.n	80035fc <clust2sect+0x26>
 80035f8:	2300      	movs	r3, #0
 80035fa:	e00e      	b.n	800361a <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003602:	3302      	adds	r3, #2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	fb03 f202 	mul.w	r2, r3, r2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003614:	3308      	adds	r3, #8
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4413      	add	r3, r2
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d907      	bls.n	8003644 <get_fat+0x20>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363a:	3314      	adds	r3, #20
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d302      	bcc.n	800364a <get_fat+0x26>
		val = 1;	/* Internal error */
 8003644:	2301      	movs	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	e0ec      	b.n	8003824 <get_fat+0x200>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800364a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800364e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b03      	cmp	r3, #3
 800365a:	f000 809e 	beq.w	800379a <get_fat+0x176>
 800365e:	2b03      	cmp	r3, #3
 8003660:	f300 80d6 	bgt.w	8003810 <get_fat+0x1ec>
 8003664:	2b01      	cmp	r3, #1
 8003666:	d002      	beq.n	800366e <get_fat+0x4a>
 8003668:	2b02      	cmp	r3, #2
 800366a:	d063      	beq.n	8003734 <get_fat+0x110>
 800366c:	e0d0      	b.n	8003810 <get_fat+0x1ec>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4413      	add	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368a:	330a      	adds	r3, #10
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	4619      	mov	r1, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	fbb3 f3f1 	udiv	r3, r3, r1
 8003696:	4413      	add	r3, r2
 8003698:	4619      	mov	r1, r3
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fe98 	bl	80033d0 <move_window>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f040 80b7 	bne.w	8003816 <get_fat+0x1f2>
			wc = fs->win.d8[bc++ % SS(fs)];
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	60fa      	str	r2, [r7, #12]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036b4:	320a      	adds	r2, #10
 80036b6:	8812      	ldrh	r2, [r2, #0]
 80036b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80036bc:	fb02 f201 	mul.w	r2, r2, r1
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	5cd3      	ldrb	r3, [r2, r3]
 80036c6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036d6:	330a      	adds	r3, #10
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	4619      	mov	r1, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	fbb3 f3f1 	udiv	r3, r3, r1
 80036e2:	4413      	add	r3, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff fe72 	bl	80033d0 <move_window>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 8093 	bne.w	800381a <get_fat+0x1f6>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036fa:	330a      	adds	r3, #10
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	fbb3 f1f2 	udiv	r1, r3, r2
 8003706:	fb02 f201 	mul.w	r2, r2, r1
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <get_fat+0x106>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	e002      	b.n	8003730 <get_fat+0x10c>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003730:	617b      	str	r3, [r7, #20]
			break;
 8003732:	e077      	b.n	8003824 <get_fat+0x200>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003742:	330a      	adds	r3, #10
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	b29b      	uxth	r3, r3
 800374a:	4619      	mov	r1, r3
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003752:	4413      	add	r3, r2
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff fe3a 	bl	80033d0 <move_window>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d15d      	bne.n	800381e <get_fat+0x1fa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	005a      	lsls	r2, r3, #1
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376c:	330a      	adds	r3, #10
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	fbb2 f1f3 	udiv	r1, r2, r3
 8003774:	fb03 f301 	mul.w	r3, r3, r1
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	3301      	adds	r3, #1
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	b21a      	sxth	r2, r3
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b21b      	sxth	r3, r3
 8003790:	4313      	orrs	r3, r2
 8003792:	b21b      	sxth	r3, r3
 8003794:	b29b      	uxth	r3, r3
 8003796:	617b      	str	r3, [r7, #20]
			break;
 8003798:	e044      	b.n	8003824 <get_fat+0x200>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a8:	330a      	adds	r3, #10
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	4619      	mov	r1, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b8:	4413      	add	r3, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fe07 	bl	80033d0 <move_window>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d12c      	bne.n	8003822 <get_fat+0x1fe>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	009a      	lsls	r2, r3, #2
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d2:	330a      	adds	r3, #10
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80037da:	fb03 f301 	mul.w	r3, r3, r1
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	4413      	add	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	3303      	adds	r3, #3
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	061a      	lsls	r2, r3, #24
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	3302      	adds	r3, #2
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	041b      	lsls	r3, r3, #16
 80037f6:	4313      	orrs	r3, r2
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	3201      	adds	r2, #1
 80037fc:	7812      	ldrb	r2, [r2, #0]
 80037fe:	0212      	lsls	r2, r2, #8
 8003800:	4313      	orrs	r3, r2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	7812      	ldrb	r2, [r2, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800380c:	617b      	str	r3, [r7, #20]
			break;
 800380e:	e009      	b.n	8003824 <get_fat+0x200>

		default:
			val = 1;	/* Internal error */
 8003810:	2301      	movs	r3, #1
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	e006      	b.n	8003824 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003816:	bf00      	nop
 8003818:	e004      	b.n	8003824 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800381a:	bf00      	nop
 800381c:	e002      	b.n	8003824 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <get_fat+0x200>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003822:	bf00      	nop
		}
	}

	return val;
 8003824:	697b      	ldr	r3, [r7, #20]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b088      	sub	sp, #32
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d907      	bls.n	8003850 <put_fat+0x22>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003846:	3314      	adds	r3, #20
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <put_fat+0x28>
		res = FR_INT_ERR;
 8003850:	2302      	movs	r3, #2
 8003852:	77fb      	strb	r3, [r7, #31]
 8003854:	e146      	b.n	8003ae4 <put_fat+0x2b6>

	} else {
		switch (fs->fs_type) {
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b03      	cmp	r3, #3
 8003860:	f000 80d9 	beq.w	8003a16 <put_fat+0x1e8>
 8003864:	2b03      	cmp	r3, #3
 8003866:	f300 8133 	bgt.w	8003ad0 <put_fat+0x2a2>
 800386a:	2b01      	cmp	r3, #1
 800386c:	d003      	beq.n	8003876 <put_fat+0x48>
 800386e:	2b02      	cmp	r3, #2
 8003870:	f000 8095 	beq.w	800399e <put_fat+0x170>
 8003874:	e12c      	b.n	8003ad0 <put_fat+0x2a2>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4413      	add	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003892:	330a      	adds	r3, #10
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	4619      	mov	r1, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fbb3 f3f1 	udiv	r3, r3, r1
 800389e:	4413      	add	r3, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff fd94 	bl	80033d0 <move_window>
 80038a8:	4603      	mov	r3, r0
 80038aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80038ac:	7ffb      	ldrb	r3, [r7, #31]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 8111 	bne.w	8003ad6 <put_fat+0x2a8>
			p = &fs->win.d8[bc++ % SS(fs)];
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	617a      	str	r2, [r7, #20]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038c0:	320a      	adds	r2, #10
 80038c2:	8812      	ldrh	r2, [r2, #0]
 80038c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80038c8:	fb02 f201 	mul.w	r2, r2, r1
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4413      	add	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <put_fat+0xcc>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b25b      	sxtb	r3, r3
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	b25a      	sxtb	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	4313      	orrs	r3, r2
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	e001      	b.n	80038fe <put_fat+0xd0>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003908:	3304      	adds	r3, #4
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800391c:	330a      	adds	r3, #10
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	4619      	mov	r1, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fbb3 f3f1 	udiv	r3, r3, r1
 8003928:	4413      	add	r3, r2
 800392a:	4619      	mov	r1, r3
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff fd4f 	bl	80033d0 <move_window>
 8003932:	4603      	mov	r3, r0
 8003934:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003936:	7ffb      	ldrb	r3, [r7, #31]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f040 80ce 	bne.w	8003ada <put_fat+0x2ac>
			p = &fs->win.d8[bc % SS(fs)];
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003944:	330a      	adds	r3, #10
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003950:	fb02 f201 	mul.w	r2, r2, r1
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4413      	add	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <put_fat+0x140>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	b2db      	uxtb	r3, r3
 800396c:	e00e      	b.n	800398c <put_fat+0x15e>
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b25b      	sxtb	r3, r3
 8003974:	f023 030f 	bic.w	r3, r3, #15
 8003978:	b25a      	sxtb	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0a1b      	lsrs	r3, r3, #8
 800397e:	b25b      	sxtb	r3, r3
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	b25b      	sxtb	r3, r3
 8003986:	4313      	orrs	r3, r2
 8003988:	b25b      	sxtb	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003996:	3304      	adds	r3, #4
 8003998:	2201      	movs	r2, #1
 800399a:	701a      	strb	r2, [r3, #0]
			break;
 800399c:	e0a2      	b.n	8003ae4 <put_fat+0x2b6>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ac:	330a      	adds	r3, #10
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4619      	mov	r1, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80039bc:	4413      	add	r3, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fd05 	bl	80033d0 <move_window>
 80039c6:	4603      	mov	r3, r0
 80039c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80039ca:	7ffb      	ldrb	r3, [r7, #31]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 8086 	bne.w	8003ade <put_fat+0x2b0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	005a      	lsls	r2, r3, #1
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039dc:	330a      	adds	r3, #10
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80039e4:	fb03 f301 	mul.w	r3, r3, r1
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	3301      	adds	r3, #1
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a0e:	3304      	adds	r3, #4
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
			break;
 8003a14:	e066      	b.n	8003ae4 <put_fat+0x2b6>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a24:	330a      	adds	r3, #10
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a34:	4413      	add	r3, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff fcc9 	bl	80033d0 <move_window>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003a42:	7ffb      	ldrb	r3, [r7, #31]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d14c      	bne.n	8003ae2 <put_fat+0x2b4>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a52:	330a      	adds	r3, #10
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	fbb2 f1f3 	udiv	r1, r2, r3
 8003a5a:	fb03 f301 	mul.w	r3, r3, r1
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3303      	adds	r3, #3
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	061a      	lsls	r2, r3, #24
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	3302      	adds	r3, #2
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	4313      	orrs	r3, r2
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	3201      	adds	r2, #1
 8003a7c:	7812      	ldrb	r2, [r2, #0]
 8003a7e:	0212      	lsls	r2, r2, #8
 8003a80:	4313      	orrs	r3, r2
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	7812      	ldrb	r2, [r2, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0c1a      	lsrs	r2, r3, #16
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	0e1a      	lsrs	r2, r3, #24
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3303      	adds	r3, #3
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
			break;
 8003ace:	e009      	b.n	8003ae4 <put_fat+0x2b6>

		default :
			res = FR_INT_ERR;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e006      	b.n	8003ae4 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8003ad6:	bf00      	nop
 8003ad8:	e004      	b.n	8003ae4 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8003ada:	bf00      	nop
 8003adc:	e002      	b.n	8003ae4 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <put_fat+0x2b6>
			if (res != FR_OK) break;
 8003ae2:	bf00      	nop
		}
	}

	return res;
 8003ae4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d907      	bls.n	8003b0e <remove_chain+0x20>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b04:	3314      	adds	r3, #20
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <remove_chain+0x26>
		res = FR_INT_ERR;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	e04f      	b.n	8003bb4 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003b18:	e040      	b.n	8003b9c <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003b1a:	6839      	ldr	r1, [r7, #0]
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fd81 	bl	8003624 <get_fat>
 8003b22:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d041      	beq.n	8003bae <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d102      	bne.n	8003b36 <remove_chain+0x48>
 8003b30:	2302      	movs	r3, #2
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e03e      	b.n	8003bb4 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b3c:	d102      	bne.n	8003b44 <remove_chain+0x56>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
 8003b42:	e037      	b.n	8003bb4 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003b44:	2200      	movs	r2, #0
 8003b46:	6839      	ldr	r1, [r7, #0]
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff fe70 	bl	800382e <put_fat>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d12c      	bne.n	8003bb2 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5e:	3310      	adds	r3, #16
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b66:	d017      	beq.n	8003b98 <remove_chain+0xaa>
				fs->free_clust++;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6e:	3310      	adds	r3, #16
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7a:	3310      	adds	r3, #16
 8003b7c:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b84:	3305      	adds	r3, #5
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b94:	3305      	adds	r3, #5
 8003b96:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba2:	3314      	adds	r3, #20
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d3b6      	bcc.n	8003b1a <remove_chain+0x2c>
 8003bac:	e002      	b.n	8003bb4 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8003bb2:	bf00      	nop
		}
	}

	return res;
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b086      	sub	sp, #24
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d113      	bne.n	8003bf6 <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bd4:	330c      	adds	r3, #12
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d007      	beq.n	8003bf0 <create_chain+0x32>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be6:	3314      	adds	r3, #20
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d31e      	bcc.n	8003c2e <create_chain+0x70>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	e01b      	b.n	8003c2e <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003bf6:	6839      	ldr	r1, [r7, #0]
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fd13 	bl	8003624 <get_fat>
 8003bfe:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d801      	bhi.n	8003c0a <create_chain+0x4c>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e086      	b.n	8003d18 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c10:	d101      	bne.n	8003c16 <create_chain+0x58>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	e080      	b.n	8003d18 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d201      	bcs.n	8003c2a <create_chain+0x6c>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	e076      	b.n	8003d18 <create_chain+0x15a>
		scl = clst;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c3e:	3314      	adds	r3, #20
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d307      	bcc.n	8003c58 <create_chain+0x9a>
			ncl = 2;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d901      	bls.n	8003c58 <create_chain+0x9a>
 8003c54:	2300      	movs	r3, #0
 8003c56:	e05f      	b.n	8003d18 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003c58:	6979      	ldr	r1, [r7, #20]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fce2 	bl	8003624 <get_fat>
 8003c60:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00e      	beq.n	8003c86 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c6e:	d002      	beq.n	8003c76 <create_chain+0xb8>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <create_chain+0xbc>
			return cs;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	e04e      	b.n	8003d18 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d1d7      	bne.n	8003c32 <create_chain+0x74>
 8003c82:	2300      	movs	r3, #0
 8003c84:	e048      	b.n	8003d18 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8003c86:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003c88:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003c8c:	6979      	ldr	r1, [r7, #20]
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff fdcd 	bl	800382e <put_fat>
 8003c94:	4603      	mov	r3, r0
 8003c96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <create_chain+0xf4>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d006      	beq.n	8003cb2 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	6839      	ldr	r1, [r7, #0]
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff fdc0 	bl	800382e <put_fat>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d126      	bne.n	8003d06 <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cca:	3310      	adds	r3, #16
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd2:	d020      	beq.n	8003d16 <create_chain+0x158>
			fs->free_clust--;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cda:	3310      	adds	r3, #16
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	1e5a      	subs	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ce6:	3310      	adds	r3, #16
 8003ce8:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf0:	3305      	adds	r3, #5
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d00:	3305      	adds	r3, #5
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	e007      	b.n	8003d16 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d102      	bne.n	8003d12 <create_chain+0x154>
 8003d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d10:	e000      	b.n	8003d14 <create_chain+0x156>
 8003d12:	2301      	movs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003d16:	697b      	ldr	r3, [r7, #20]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3718      	adds	r7, #24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003d30:	3304      	adds	r3, #4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3304      	adds	r3, #4
 8003d36:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d44:	330a      	adds	r3, #10
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1d1a      	adds	r2, r3, #4
 8003d6a:	613a      	str	r2, [r7, #16]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <clmt_clust+0x5a>
 8003d76:	2300      	movs	r3, #0
 8003d78:	e010      	b.n	8003d9c <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d307      	bcc.n	8003d92 <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003d90:	e7e9      	b.n	8003d66 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
 8003d92:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	4413      	add	r3, r2
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dba:	3306      	adds	r3, #6
 8003dbc:	801a      	strh	r2, [r3, #0]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d00a      	beq.n	8003de6 <dir_sdi+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ddc:	3314      	adds	r3, #20
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d301      	bcc.n	8003dea <dir_sdi+0x44>
		return FR_INT_ERR;
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0b4      	b.n	8003f54 <dir_sdi+0x1ae>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d111      	bne.n	8003e14 <dir_sdi+0x6e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d108      	bne.n	8003e14 <dir_sdi+0x6e>
		clst = dp->fs->dirbase;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003e0e:	3304      	adds	r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d117      	bne.n	8003e4a <dir_sdi+0xa4>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e26:	3308      	adds	r3, #8
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d301      	bcc.n	8003e36 <dir_sdi+0x90>
			return FR_INT_ERR;
 8003e32:	2302      	movs	r3, #2
 8003e34:	e08e      	b.n	8003f54 <dir_sdi+0x1ae>
		sect = dp->fs->dirbase;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003e42:	3304      	adds	r3, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e046      	b.n	8003ed8 <dir_sdi+0x132>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e56:	330a      	adds	r3, #10
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	fb03 f302 	mul.w	r3, r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8003e76:	e022      	b.n	8003ebe <dir_sdi+0x118>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fbce 	bl	8003624 <get_fat>
 8003e88:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e90:	d101      	bne.n	8003e96 <dir_sdi+0xf0>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e05e      	b.n	8003f54 <dir_sdi+0x1ae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d90a      	bls.n	8003eb2 <dir_sdi+0x10c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d301      	bcc.n	8003eb6 <dir_sdi+0x110>
				return FR_INT_ERR;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e04e      	b.n	8003f54 <dir_sdi+0x1ae>
			idx -= ic;
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d2d8      	bcs.n	8003e78 <dir_sdi+0xd2>
		}
		sect = clust2sect(dp->fs, clst);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6979      	ldr	r1, [r7, #20]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff fb80 	bl	80035d6 <clust2sect>
 8003ed6:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ede:	330c      	adds	r3, #12
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	601a      	str	r2, [r3, #0]
	if (!sect) return FR_INT_ERR;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <dir_sdi+0x148>
 8003eea:	2302      	movs	r3, #2
 8003eec:	e032      	b.n	8003f54 <dir_sdi+0x1ae>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efa:	330a      	adds	r3, #10
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f14:	3310      	adds	r3, #16
 8003f16:	601a      	str	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2e:	330a      	adds	r3, #10
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f3e:	fb02 f201 	mul.w	r2, r2, r1
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	015b      	lsls	r3, r3, #5
 8003f46:	18c2      	adds	r2, r0, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4e:	3314      	adds	r3, #20
 8003f50:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003f5c:	b590      	push	{r4, r7, lr}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6c:	3306      	adds	r3, #6
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <dir_next+0x2e>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f82:	3310      	adds	r3, #16
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <dir_next+0x32>
		return FR_NO_FILE;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	e144      	b.n	8004218 <dir_next+0x2bc>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9a:	330a      	adds	r3, #10
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8003faa:	fb02 f201 	mul.w	r2, r2, r1
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 810c 	bne.w	80041ce <dir_next+0x272>
		dp->sect++;					/* Next sector */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc8:	3310      	adds	r3, #16
 8003fca:	601a      	str	r2, [r3, #0]

		if (!dp->clust) {		/* Static table */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd2:	330c      	adds	r3, #12
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10e      	bne.n	8003ff8 <dir_next+0x9c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	f0c0 80ed 	bcc.w	80041ce <dir_next+0x272>
				return FR_NO_FILE;
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	e10f      	b.n	8004218 <dir_next+0x2bc>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004004:	330a      	adds	r3, #10
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	b29b      	uxth	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	fbb3 f2f2 	udiv	r2, r3, r2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004020:	3302      	adds	r3, #2
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	3b01      	subs	r3, #1
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 80d0 	bne.w	80041ce <dir_next+0x272>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	330c      	adds	r3, #12
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f7ff faee 	bl	8003624 <get_fat>
 8004048:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d801      	bhi.n	8004054 <dir_next+0xf8>
 8004050:	2302      	movs	r3, #2
 8004052:	e0e1      	b.n	8004218 <dir_next+0x2bc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405a:	d101      	bne.n	8004060 <dir_next+0x104>
 800405c:	2301      	movs	r3, #1
 800405e:	e0db      	b.n	8004218 <dir_next+0x2bc>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406c:	3314      	adds	r3, #20
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	429a      	cmp	r2, r3
 8004074:	f0c0 8097 	bcc.w	80041a6 <dir_next+0x24a>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <dir_next+0x126>
 800407e:	2304      	movs	r3, #4
 8004080:	e0ca      	b.n	8004218 <dir_next+0x2bc>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004090:	330c      	adds	r3, #12
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7ff fd91 	bl	8003bbe <create_chain>
 800409c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <dir_next+0x14c>
 80040a4:	2307      	movs	r3, #7
 80040a6:	e0b7      	b.n	8004218 <dir_next+0x2bc>
					if (clst == 1) return FR_INT_ERR;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <dir_next+0x156>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e0b2      	b.n	8004218 <dir_next+0x2bc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040b8:	d101      	bne.n	80040be <dir_next+0x162>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0ac      	b.n	8004218 <dir_next+0x2bc>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff f928 	bl	800331c <sync_window>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <dir_next+0x17a>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0a0      	b.n	8004218 <dir_next+0x2bc>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ec:	330a      	adds	r3, #10
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	2100      	movs	r1, #0
 80040f4:	f7fe fef4 	bl	8002ee0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004106:	681c      	ldr	r4, [r3, #0]
 8004108:	6979      	ldr	r1, [r7, #20]
 800410a:	4610      	mov	r0, r2
 800410c:	f7ff fa63 	bl	80035d6 <clust2sect>
 8004110:	4602      	mov	r2, r0
 8004112:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8004116:	330c      	adds	r3, #12
 8004118:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]
 800411e:	e024      	b.n	800416a <dir_next+0x20e>
						dp->fs->wflag = 1;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412c:	3304      	adds	r3, #4
 800412e:	2201      	movs	r2, #1
 8004130:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff f8ee 	bl	800331c <sync_window>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <dir_next+0x1ee>
 8004146:	2301      	movs	r3, #1
 8004148:	e066      	b.n	8004218 <dir_next+0x2bc>
						dp->fs->winsect++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004156:	330c      	adds	r3, #12
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	1c59      	adds	r1, r3, #1
 800415c:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004160:	330c      	adds	r3, #12
 8004162:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	3301      	adds	r3, #1
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004176:	3302      	adds	r3, #2
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4293      	cmp	r3, r2
 8004180:	d3ce      	bcc.n	8004120 <dir_next+0x1c4>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800418e:	330c      	adds	r3, #12
 8004190:	6819      	ldr	r1, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	1a8a      	subs	r2, r1, r2
 800419e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80041a2:	330c      	adds	r3, #12
 80041a4:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ac:	330c      	adds	r3, #12
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	601a      	str	r2, [r3, #0]
				dp->sect = clust2sect(dp->fs, clst);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6979      	ldr	r1, [r7, #20]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fa0a 	bl	80035d6 <clust2sect>
 80041c2:	4602      	mov	r2, r0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ca:	3310      	adds	r3, #16
 80041cc:	601a      	str	r2, [r3, #0]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d8:	3306      	adds	r3, #6
 80041da:	801a      	strh	r2, [r3, #0]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f2:	330a      	adds	r3, #10
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8004202:	fb02 f201 	mul.w	r2, r2, r1
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	015b      	lsls	r3, r3, #5
 800420a:	18c2      	adds	r2, r0, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004212:	3314      	adds	r3, #20
 8004214:	601a      	str	r2, [r3, #0]

	return FR_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd90      	pop	{r4, r7, pc}

08004220 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800422a:	2100      	movs	r1, #0
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fdba 	bl	8003da6 <dir_sdi>
 8004232:	4603      	mov	r3, r0
 8004234:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d138      	bne.n	80042ae <dir_alloc+0x8e>
		n = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	3310      	adds	r3, #16
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7ff f8bb 	bl	80033d0 <move_window>
 800425a:	4603      	mov	r3, r0
 800425c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d123      	bne.n	80042ac <dir_alloc+0x8c>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426a:	3314      	adds	r3, #20
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2be5      	cmp	r3, #229	; 0xe5
 8004272:	d007      	beq.n	8004284 <dir_alloc+0x64>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800427a:	3314      	adds	r3, #20
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <dir_alloc+0x74>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d102      	bne.n	8004298 <dir_alloc+0x78>
 8004292:	e00c      	b.n	80042ae <dir_alloc+0x8e>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004294:	2300      	movs	r3, #0
 8004296:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004298:	2101      	movs	r1, #1
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff fe5e 	bl	8003f5c <dir_next>
 80042a0:	4603      	mov	r3, r0
 80042a2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ca      	beq.n	8004240 <dir_alloc+0x20>
 80042aa:	e000      	b.n	80042ae <dir_alloc+0x8e>
			if (res != FR_OK) break;
 80042ac:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d101      	bne.n	80042b8 <dir_alloc+0x98>
 80042b4:	2307      	movs	r3, #7
 80042b6:	73fb      	strb	r3, [r7, #15]
	return res;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	331b      	adds	r3, #27
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	b21a      	sxth	r2, r3
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	331a      	adds	r3, #26
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b21b      	sxth	r3, r3
 80042de:	4313      	orrs	r3, r2
 80042e0:	b21b      	sxth	r3, r3
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d10f      	bne.n	8004312 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	3315      	adds	r3, #21
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	b21a      	sxth	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	3314      	adds	r3, #20
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b21b      	sxth	r3, r3
 8004304:	4313      	orrs	r3, r2
 8004306:	b21b      	sxth	r3, r3
 8004308:	b29b      	uxth	r3, r3
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]

	return cl;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	4770      	bx	lr

0800431e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	331a      	adds	r3, #26
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b29b      	uxth	r3, r3
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	331b      	adds	r3, #27
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	0c1a      	lsrs	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3314      	adds	r3, #20
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	0c1b      	lsrs	r3, r3, #16
 8004352:	b29b      	uxth	r3, r3
 8004354:	0a1b      	lsrs	r3, r3, #8
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3315      	adds	r3, #21
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr

0800436a <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004372:	2100      	movs	r1, #0
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff fd16 	bl	8003da6 <dir_sdi>
 800437a:	4603      	mov	r3, r0
 800437c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <dir_find+0x1e>
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	e042      	b.n	800440e <dir_find+0xa4>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004396:	3310      	adds	r3, #16
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4619      	mov	r1, r3
 800439c:	4610      	mov	r0, r2
 800439e:	f7ff f817 	bl	80033d0 <move_window>
 80043a2:	4603      	mov	r3, r0
 80043a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d12c      	bne.n	8004406 <dir_find+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b2:	3314      	adds	r3, #20
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <dir_find+0x60>
 80043c4:	2304      	movs	r3, #4
 80043c6:	75fb      	strb	r3, [r7, #23]
 80043c8:	e020      	b.n	800440c <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	330b      	adds	r3, #11
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10c      	bne.n	80043f2 <dir_find+0x88>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043de:	3318      	adds	r3, #24
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	220b      	movs	r2, #11
 80043e4:	4619      	mov	r1, r3
 80043e6:	6938      	ldr	r0, [r7, #16]
 80043e8:	f7fe fd94 	bl	8002f14 <mem_cmp>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <dir_find+0xa0>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80043f2:	2100      	movs	r1, #0
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fdb1 	bl	8003f5c <dir_next>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0c1      	beq.n	8004388 <dir_find+0x1e>
 8004404:	e002      	b.n	800440c <dir_find+0xa2>
		if (res != FR_OK) break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <dir_find+0xa2>
			break;
 800440a:	bf00      	nop

	return res;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800441e:	2101      	movs	r1, #1
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff fefd 	bl	8004220 <dir_alloc>
 8004426:	4603      	mov	r3, r0
 8004428:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d132      	bne.n	8004496 <dir_register+0x80>
		res = move_window(dp->fs, dp->sect);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443e:	3310      	adds	r3, #16
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f7fe ffc3 	bl	80033d0 <move_window>
 800444a:	4603      	mov	r3, r0
 800444c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d120      	bne.n	8004496 <dir_register+0x80>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800445a:	3314      	adds	r3, #20
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2220      	movs	r2, #32
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fd3c 	bl	8002ee0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446e:	3314      	adds	r3, #20
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004478:	3318      	adds	r3, #24
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	220b      	movs	r2, #11
 800447e:	4619      	mov	r1, r3
 8004480:	f7fe fd10 	bl	8002ea4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004490:	3304      	adds	r3, #4
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8004496:	7bfb      	ldrb	r3, [r7, #15]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b088      	sub	sp, #32
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e002      	b.n	80044b8 <create_name+0x18>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b2f      	cmp	r3, #47	; 0x2f
 80044be:	d0f8      	beq.n	80044b2 <create_name+0x12>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b5c      	cmp	r3, #92	; 0x5c
 80044c6:	d0f4      	beq.n	80044b2 <create_name+0x12>
	sfn = dp->fn;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ce:	3318      	adds	r3, #24
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80044d4:	220b      	movs	r2, #11
 80044d6:	2120      	movs	r1, #32
 80044d8:	68b8      	ldr	r0, [r7, #8]
 80044da:	f7fe fd01 	bl	8002ee0 <mem_set>
	si = i = b = 0; ni = 8;
 80044de:	2300      	movs	r3, #0
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	2308      	movs	r3, #8
 80044ec:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	617a      	str	r2, [r7, #20]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80044fc:	7fbb      	ldrb	r3, [r7, #30]
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d953      	bls.n	80045aa <create_name+0x10a>
 8004502:	7fbb      	ldrb	r3, [r7, #30]
 8004504:	2b2f      	cmp	r3, #47	; 0x2f
 8004506:	d050      	beq.n	80045aa <create_name+0x10a>
 8004508:	7fbb      	ldrb	r3, [r7, #30]
 800450a:	2b5c      	cmp	r3, #92	; 0x5c
 800450c:	d04d      	beq.n	80045aa <create_name+0x10a>
		if (c == '.' || i >= ni) {
 800450e:	7fbb      	ldrb	r3, [r7, #30]
 8004510:	2b2e      	cmp	r3, #46	; 0x2e
 8004512:	d003      	beq.n	800451c <create_name+0x7c>
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	429a      	cmp	r2, r3
 800451a:	d30f      	bcc.n	800453c <create_name+0x9c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b08      	cmp	r3, #8
 8004520:	d102      	bne.n	8004528 <create_name+0x88>
 8004522:	7fbb      	ldrb	r3, [r7, #30]
 8004524:	2b2e      	cmp	r3, #46	; 0x2e
 8004526:	d001      	beq.n	800452c <create_name+0x8c>
 8004528:	2306      	movs	r3, #6
 800452a:	e073      	b.n	8004614 <create_name+0x174>
			i = 8; ni = 11;
 800452c:	2308      	movs	r3, #8
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	230b      	movs	r3, #11
 8004532:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8004534:	7ffb      	ldrb	r3, [r7, #31]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	77fb      	strb	r3, [r7, #31]
 800453a:	e035      	b.n	80045a8 <create_name+0x108>
		}
		if (c >= 0x80) {				/* Extended character? */
 800453c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004540:	2b00      	cmp	r3, #0
 8004542:	da08      	bge.n	8004556 <create_name+0xb6>
			b |= 3;						/* Eliminate NT flag */
 8004544:	7ffb      	ldrb	r3, [r7, #31]
 8004546:	f043 0303 	orr.w	r3, r3, #3
 800454a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800454c:	7fbb      	ldrb	r3, [r7, #30]
 800454e:	3b80      	subs	r3, #128	; 0x80
 8004550:	4a32      	ldr	r2, [pc, #200]	; (800461c <create_name+0x17c>)
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8004556:	7fbb      	ldrb	r3, [r7, #30]
 8004558:	4619      	mov	r1, r3
 800455a:	4831      	ldr	r0, [pc, #196]	; (8004620 <create_name+0x180>)
 800455c:	f7fe fd00 	bl	8002f60 <chk_chr>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <create_name+0xca>
				return FR_INVALID_NAME;
 8004566:	2306      	movs	r3, #6
 8004568:	e054      	b.n	8004614 <create_name+0x174>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800456a:	7fbb      	ldrb	r3, [r7, #30]
 800456c:	2b40      	cmp	r3, #64	; 0x40
 800456e:	d907      	bls.n	8004580 <create_name+0xe0>
 8004570:	7fbb      	ldrb	r3, [r7, #30]
 8004572:	2b5a      	cmp	r3, #90	; 0x5a
 8004574:	d804      	bhi.n	8004580 <create_name+0xe0>
				b |= 2;
 8004576:	7ffb      	ldrb	r3, [r7, #31]
 8004578:	f043 0302 	orr.w	r3, r3, #2
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e00c      	b.n	800459a <create_name+0xfa>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8004580:	7fbb      	ldrb	r3, [r7, #30]
 8004582:	2b60      	cmp	r3, #96	; 0x60
 8004584:	d909      	bls.n	800459a <create_name+0xfa>
 8004586:	7fbb      	ldrb	r3, [r7, #30]
 8004588:	2b7a      	cmp	r3, #122	; 0x7a
 800458a:	d806      	bhi.n	800459a <create_name+0xfa>
					b |= 1; c -= 0x20;
 800458c:	7ffb      	ldrb	r3, [r7, #31]
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	7fbb      	ldrb	r3, [r7, #30]
 8004596:	3b20      	subs	r3, #32
 8004598:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	613a      	str	r2, [r7, #16]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	4413      	add	r3, r2
 80045a4:	7fba      	ldrb	r2, [r7, #30]
 80045a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80045a8:	e7a1      	b.n	80044ee <create_name+0x4e>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	441a      	add	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80045b4:	7fbb      	ldrb	r3, [r7, #30]
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	d801      	bhi.n	80045be <create_name+0x11e>
 80045ba:	2304      	movs	r3, #4
 80045bc:	e000      	b.n	80045c0 <create_name+0x120>
 80045be:	2300      	movs	r3, #0
 80045c0:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <create_name+0x12c>
 80045c8:	2306      	movs	r3, #6
 80045ca:	e023      	b.n	8004614 <create_name+0x174>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2be5      	cmp	r3, #229	; 0xe5
 80045d2:	d102      	bne.n	80045da <create_name+0x13a>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2205      	movs	r2, #5
 80045d8:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d102      	bne.n	80045e6 <create_name+0x146>
 80045e0:	7ffb      	ldrb	r3, [r7, #31]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80045e6:	7ffb      	ldrb	r3, [r7, #31]
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d103      	bne.n	80045f8 <create_name+0x158>
 80045f0:	7fbb      	ldrb	r3, [r7, #30]
 80045f2:	f043 0310 	orr.w	r3, r3, #16
 80045f6:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80045f8:	7ffb      	ldrb	r3, [r7, #31]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d103      	bne.n	800460a <create_name+0x16a>
 8004602:	7fbb      	ldrb	r3, [r7, #30]
 8004604:	f043 0308 	orr.w	r3, r3, #8
 8004608:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	330b      	adds	r3, #11
 800460e:	7fba      	ldrb	r2, [r7, #30]
 8004610:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004612:	2300      	movs	r3, #0
#endif
}
 8004614:	4618      	mov	r0, r3
 8004616:	3720      	adds	r7, #32
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	08007724 	.word	0x08007724
 8004620:	080076c8 	.word	0x080076c8

08004624 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b2f      	cmp	r3, #47	; 0x2f
 8004634:	d003      	beq.n	800463e <follow_path+0x1a>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b5c      	cmp	r3, #92	; 0x5c
 800463c:	d102      	bne.n	8004644 <follow_path+0x20>
		path++;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800464a:	3308      	adds	r3, #8
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b1f      	cmp	r3, #31
 8004656:	d80c      	bhi.n	8004672 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8004658:	2100      	movs	r1, #0
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff fba3 	bl	8003da6 <dir_sdi>
 8004660:	4603      	mov	r3, r0
 8004662:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466a:	3314      	adds	r3, #20
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	e04c      	b.n	800470c <follow_path+0xe8>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004672:	463b      	mov	r3, r7
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff ff12 	bl	80044a0 <create_name>
 800467c:	4603      	mov	r3, r0
 800467e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d13d      	bne.n	8004702 <follow_path+0xde>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff fe6f 	bl	800436a <dir_find>
 800468c:	4603      	mov	r3, r0
 800468e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004696:	3318      	adds	r3, #24
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	7adb      	ldrb	r3, [r3, #11]
 800469c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <follow_path+0x96>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d12d      	bne.n	8004706 <follow_path+0xe2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80046aa:	7bbb      	ldrb	r3, [r7, #14]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d128      	bne.n	8004706 <follow_path+0xe2>
 80046b4:	2305      	movs	r3, #5
 80046b6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80046b8:	e025      	b.n	8004706 <follow_path+0xe2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80046ba:	7bbb      	ldrb	r3, [r7, #14]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d122      	bne.n	800470a <follow_path+0xe6>
			dir = dp->dir;						/* Follow the sub-directory */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ca:	3314      	adds	r3, #20
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	330b      	adds	r3, #11
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <follow_path+0xc0>
				res = FR_NO_PATH; break;
 80046de:	2305      	movs	r3, #5
 80046e0:	73fb      	strb	r3, [r7, #15]
 80046e2:	e013      	b.n	800470c <follow_path+0xe8>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fde7 	bl	80042c2 <ld_clust>
 80046f4:	4602      	mov	r2, r0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	3308      	adds	r3, #8
 80046fe:	601a      	str	r2, [r3, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004700:	e7b7      	b.n	8004672 <follow_path+0x4e>
			if (res != FR_OK) break;
 8004702:	bf00      	nop
 8004704:	e002      	b.n	800470c <follow_path+0xe8>
				break;
 8004706:	bf00      	nop
 8004708:	e000      	b.n	800470c <follow_path+0xe8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800470a:	bf00      	nop
		}
	}

	return res;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004716:	b480      	push	{r7}
 8004718:	b087      	sub	sp, #28
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800471e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004722:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d031      	beq.n	8004790 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	e002      	b.n	800473a <get_ldnumber+0x24>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3301      	adds	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b20      	cmp	r3, #32
 8004740:	d903      	bls.n	800474a <get_ldnumber+0x34>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b3a      	cmp	r3, #58	; 0x3a
 8004748:	d1f4      	bne.n	8004734 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b3a      	cmp	r3, #58	; 0x3a
 8004750:	d11c      	bne.n	800478c <get_ldnumber+0x76>
			tp = *path;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	60fa      	str	r2, [r7, #12]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	3b30      	subs	r3, #48	; 0x30
 8004762:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b09      	cmp	r3, #9
 8004768:	d80e      	bhi.n	8004788 <get_ldnumber+0x72>
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	429a      	cmp	r2, r3
 8004770:	d10a      	bne.n	8004788 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d107      	bne.n	8004788 <get_ldnumber+0x72>
					vol = (int)i;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3301      	adds	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	e002      	b.n	8004792 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004790:	693b      	ldr	r3, [r7, #16]
}
 8004792:	4618      	mov	r0, r3
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	3304      	adds	r3, #4
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80047b8:	330c      	adds	r3, #12
 80047ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047be:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fe fe04 	bl	80033d0 <move_window>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <check_fs+0x36>
		return 3;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e04a      	b.n	8004868 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80047d8:	3301      	adds	r3, #1
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	b21a      	sxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80047e6:	b21b      	sxth	r3, r3
 80047e8:	4313      	orrs	r3, r2
 80047ea:	b21b      	sxth	r3, r3
 80047ec:	4a20      	ldr	r2, [pc, #128]	; (8004870 <check_fs+0xd4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d001      	beq.n	80047f6 <check_fs+0x5a>
		return 2;
 80047f2:	2302      	movs	r3, #2
 80047f4:	e038      	b.n	8004868 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3336      	adds	r3, #54	; 0x36
 80047fa:	3303      	adds	r3, #3
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	061a      	lsls	r2, r3, #24
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3336      	adds	r3, #54	; 0x36
 8004804:	3302      	adds	r3, #2
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	4313      	orrs	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	3236      	adds	r2, #54	; 0x36
 8004810:	3201      	adds	r2, #1
 8004812:	7812      	ldrb	r2, [r2, #0]
 8004814:	0212      	lsls	r2, r2, #8
 8004816:	4313      	orrs	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800481e:	4313      	orrs	r3, r2
 8004820:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004824:	4a13      	ldr	r2, [pc, #76]	; (8004874 <check_fs+0xd8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <check_fs+0x92>
		return 0;
 800482a:	2300      	movs	r3, #0
 800482c:	e01c      	b.n	8004868 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3352      	adds	r3, #82	; 0x52
 8004832:	3303      	adds	r3, #3
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	061a      	lsls	r2, r3, #24
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3352      	adds	r3, #82	; 0x52
 800483c:	3302      	adds	r3, #2
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	4313      	orrs	r3, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	3252      	adds	r2, #82	; 0x52
 8004848:	3201      	adds	r2, #1
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	0212      	lsls	r2, r2, #8
 800484e:	4313      	orrs	r3, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8004856:	4313      	orrs	r3, r2
 8004858:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800485c:	4a05      	ldr	r2, [pc, #20]	; (8004874 <check_fs+0xd8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d101      	bne.n	8004866 <check_fs+0xca>
		return 0;
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <check_fs+0xcc>

	return 1;
 8004866:	2301      	movs	r3, #1
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	ffffaa55 	.word	0xffffaa55
 8004874:	00544146 	.word	0x00544146

08004878 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b096      	sub	sp, #88	; 0x58
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800488c:	68b8      	ldr	r0, [r7, #8]
 800488e:	f7ff ff42 	bl	8004716 <get_ldnumber>
 8004892:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	da01      	bge.n	800489e <find_volume+0x26>
 800489a:	230b      	movs	r3, #11
 800489c:	e33c      	b.n	8004f18 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800489e:	4ab3      	ldr	r2, [pc, #716]	; (8004b6c <find_volume+0x2f4>)
 80048a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <find_volume+0x3a>
 80048ae:	230c      	movs	r3, #12
 80048b0:	e332      	b.n	8004f18 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048b6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01d      	beq.n	8004900 <find_volume+0x88>
		stat = disk_status(fs->drv);
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ca:	3301      	adds	r3, #1
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fa4a 	bl	8002d68 <disk_status>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80048da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10c      	bne.n	8004900 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <find_volume+0x84>
 80048ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80048f8:	230a      	movs	r3, #10
 80048fa:	e30d      	b.n	8004f18 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 80048fc:	2300      	movs	r3, #0
 80048fe:	e30b      	b.n	8004f18 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800490a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490c:	b2da      	uxtb	r2, r3
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004914:	3301      	adds	r3, #1
 8004916:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491e:	3301      	adds	r3, #1
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe fa3a 	bl	8002d9c <disk_initialize>
 8004928:	4603      	mov	r3, r0
 800492a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800492e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800493a:	2303      	movs	r3, #3
 800493c:	e2ec      	b.n	8004f18 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <find_volume+0xdc>
 8004944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8004950:	230a      	movs	r3, #10
 8004952:	e2e1      	b.n	8004f18 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495a:	3301      	adds	r3, #1
 800495c:	7818      	ldrb	r0, [r3, #0]
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004964:	330a      	adds	r3, #10
 8004966:	461a      	mov	r2, r3
 8004968:	2102      	movs	r1, #2
 800496a:	f7fe fa7d 	bl	8002e68 <disk_ioctl>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10f      	bne.n	8004994 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497a:	330a      	adds	r3, #10
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004982:	d307      	bcc.n	8004994 <find_volume+0x11c>
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	330a      	adds	r3, #10
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004992:	d901      	bls.n	8004998 <find_volume+0x120>
 8004994:	2301      	movs	r3, #1
 8004996:	e2bf      	b.n	8004f18 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800499c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800499e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049a0:	f7ff fefc 	bl	800479c <check_fs>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80049aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d155      	bne.n	8004a5e <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80049b2:	2300      	movs	r3, #0
 80049b4:	643b      	str	r3, [r7, #64]	; 0x40
 80049b6:	e029      	b.n	8004a0c <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80049b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80049c2:	4413      	add	r3, r2
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	3304      	adds	r3, #4
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d012      	beq.n	80049f6 <find_volume+0x17e>
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	330b      	adds	r3, #11
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	061a      	lsls	r2, r3, #24
 80049d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049da:	330a      	adds	r3, #10
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	041b      	lsls	r3, r3, #16
 80049e0:	4313      	orrs	r3, r2
 80049e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e4:	3209      	adds	r2, #9
 80049e6:	7812      	ldrb	r2, [r2, #0]
 80049e8:	0212      	lsls	r2, r2, #8
 80049ea:	4313      	orrs	r3, r2
 80049ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ee:	3208      	adds	r2, #8
 80049f0:	7812      	ldrb	r2, [r2, #0]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	e000      	b.n	80049f8 <find_volume+0x180>
 80049f6:	2200      	movs	r2, #0
 80049f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004a00:	440b      	add	r3, r1
 8004a02:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a08:	3301      	adds	r3, #1
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d9d2      	bls.n	80049b8 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8004a12:	2300      	movs	r3, #0
 8004a14:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <find_volume+0x1aa>
 8004a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8004a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004a30:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <find_volume+0x1cc>
 8004a38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a3c:	f7ff feae 	bl	800479c <check_fs>
 8004a40:	4603      	mov	r3, r0
 8004a42:	e000      	b.n	8004a46 <find_volume+0x1ce>
 8004a44:	2302      	movs	r3, #2
 8004a46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004a4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <find_volume+0x1e6>
 8004a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a54:	3301      	adds	r3, #1
 8004a56:	643b      	str	r3, [r7, #64]	; 0x40
 8004a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d9e1      	bls.n	8004a22 <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004a5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d101      	bne.n	8004a6a <find_volume+0x1f2>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e256      	b.n	8004f18 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004a6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <find_volume+0x1fe>
 8004a72:	230d      	movs	r3, #13
 8004a74:	e250      	b.n	8004f18 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	7b1b      	ldrb	r3, [r3, #12]
 8004a7a:	021b      	lsls	r3, r3, #8
 8004a7c:	b21a      	sxth	r2, r3
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	7adb      	ldrb	r3, [r3, #11]
 8004a82:	b21b      	sxth	r3, r3
 8004a84:	4313      	orrs	r3, r2
 8004a86:	b21a      	sxth	r2, r3
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8e:	330a      	adds	r3, #10
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b21b      	sxth	r3, r3
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8004a98:	230d      	movs	r3, #13
 8004a9a:	e23d      	b.n	8004f18 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	7ddb      	ldrb	r3, [r3, #23]
 8004aa0:	021b      	lsls	r3, r3, #8
 8004aa2:	b21a      	sxth	r2, r3
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa6:	7d9b      	ldrb	r3, [r3, #22]
 8004aa8:	b21b      	sxth	r3, r3
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	b21b      	sxth	r3, r3
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d112      	bne.n	8004ade <find_volume+0x266>
 8004ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aba:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004abe:	061a      	lsls	r2, r3, #24
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004ac6:	041b      	lsls	r3, r3, #16
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004acc:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8004ad0:	0212      	lsls	r2, r2, #8
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad6:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004ada:	4313      	orrs	r3, r2
 8004adc:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae4:	3318      	adds	r3, #24
 8004ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ae8:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aec:	7c1a      	ldrb	r2, [r3, #16]
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af4:	3303      	adds	r3, #3
 8004af6:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004afe:	3303      	adds	r3, #3
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d008      	beq.n	8004b18 <find_volume+0x2a0>
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b0c:	3303      	adds	r3, #3
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d001      	beq.n	8004b18 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8004b14:	230d      	movs	r3, #13
 8004b16:	e1ff      	b.n	8004f18 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1e:	3303      	adds	r3, #3
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	7b5a      	ldrb	r2, [r3, #13]
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b36:	3302      	adds	r3, #2
 8004b38:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b40:	3302      	adds	r3, #2
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00e      	beq.n	8004b66 <find_volume+0x2ee>
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4e:	3302      	adds	r3, #2
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b5a:	3302      	adds	r3, #2
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d004      	beq.n	8004b70 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8004b66:	230d      	movs	r3, #13
 8004b68:	e1d6      	b.n	8004f18 <find_volume+0x6a0>
 8004b6a:	bf00      	nop
 8004b6c:	200000a8 	.word	0x200000a8

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	7c9b      	ldrb	r3, [r3, #18]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	b21a      	sxth	r2, r3
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	7c5b      	ldrb	r3, [r3, #17]
 8004b7c:	b21b      	sxth	r3, r3
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	b21b      	sxth	r3, r3
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b94:	3308      	adds	r3, #8
 8004b96:	881a      	ldrh	r2, [r3, #0]
 8004b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b9e:	330a      	adds	r3, #10
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	fbb2 f1f3 	udiv	r1, r2, r3
 8004baa:	fb03 f301 	mul.w	r3, r3, r1
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8004bb6:	230d      	movs	r3, #13
 8004bb8:	e1ae      	b.n	8004f18 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	7d1b      	ldrb	r3, [r3, #20]
 8004bbe:	021b      	lsls	r3, r3, #8
 8004bc0:	b21a      	sxth	r2, r3
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	7cdb      	ldrb	r3, [r3, #19]
 8004bc6:	b21b      	sxth	r3, r3
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	b21b      	sxth	r3, r3
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d112      	bne.n	8004bfc <find_volume+0x384>
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004bdc:	061a      	lsls	r2, r3, #24
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	4313      	orrs	r3, r2
 8004be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bea:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8004bee:	0212      	lsls	r2, r2, #8
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bf4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	7bdb      	ldrb	r3, [r3, #15]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	b21a      	sxth	r2, r3
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	7b9b      	ldrb	r3, [r3, #14]
 8004c08:	b21b      	sxth	r3, r3
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	b21b      	sxth	r3, r3
 8004c0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004c10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <find_volume+0x3a2>
 8004c16:	230d      	movs	r3, #13
 8004c18:	e17e      	b.n	8004f18 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004c1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1e:	441a      	add	r2, r3
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c26:	3308      	adds	r3, #8
 8004c28:	8819      	ldrh	r1, [r3, #0]
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c30:	330a      	adds	r3, #10
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4413      	add	r3, r2
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d201      	bcs.n	8004c4e <find_volume+0x3d6>
 8004c4a:	230d      	movs	r3, #13
 8004c4c:	e164      	b.n	8004f18 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	1ad2      	subs	r2, r2, r3
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <find_volume+0x3f6>
 8004c6a:	230d      	movs	r3, #13
 8004c6c:	e154      	b.n	8004f18 <find_volume+0x6a0>
	fmt = FS_FAT12;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d902      	bls.n	8004c84 <find_volume+0x40c>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d902      	bls.n	8004c94 <find_volume+0x41c>
 8004c8e:	2303      	movs	r3, #3
 8004c90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	1c9a      	adds	r2, r3, #2
 8004c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca8:	331c      	adds	r3, #28
 8004caa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cac:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004cae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb2:	441a      	add	r2, r3
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004cba:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8004cbc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	441a      	add	r2, r3
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004cc8:	3308      	adds	r3, #8
 8004cca:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8004ccc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d127      	bne.n	8004d24 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cda:	3308      	adds	r3, #8
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <find_volume+0x46e>
 8004ce2:	230d      	movs	r3, #13
 8004ce4:	e118      	b.n	8004f18 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004cec:	061a      	lsls	r2, r3, #24
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cfa:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8004cfe:	0212      	lsls	r2, r2, #8
 8004d00:	4313      	orrs	r3, r2
 8004d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d04:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d10:	3304      	adds	r3, #4
 8004d12:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1a:	3314      	adds	r3, #20
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
 8004d22:	e030      	b.n	8004d86 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <find_volume+0x4be>
 8004d32:	230d      	movs	r3, #13
 8004d34:	e0f0      	b.n	8004f18 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d40:	441a      	add	r2, r3
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004d48:	3304      	adds	r3, #4
 8004d4a:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004d4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d106      	bne.n	8004d62 <find_volume+0x4ea>
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5a:	3314      	adds	r3, #20
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	e010      	b.n	8004d84 <find_volume+0x50c>
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d68:	3314      	adds	r3, #20
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4413      	add	r3, r2
 8004d72:	085a      	lsrs	r2, r3, #1
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d7a:	3314      	adds	r3, #20
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8004d84:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d8c:	3318      	adds	r3, #24
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d96:	330a      	adds	r3, #10
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9e:	440b      	add	r3, r1
 8004da0:	1e59      	subs	r1, r3, #1
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da8:	330a      	adds	r3, #10
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d201      	bcs.n	8004db8 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8004db4:	230d      	movs	r3, #13
 8004db6:	e0af      	b.n	8004f18 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dbe:	3310      	adds	r3, #16
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dcc:	3310      	adds	r3, #16
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de0:	3305      	adds	r3, #5
 8004de2:	2280      	movs	r2, #128	; 0x80
 8004de4:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004de6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d17d      	bne.n	8004eea <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004df4:	021b      	lsls	r3, r3, #8
 8004df6:	b21a      	sxth	r2, r3
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dfe:	b21b      	sxth	r3, r3
 8004e00:	4313      	orrs	r3, r2
 8004e02:	b21b      	sxth	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d170      	bne.n	8004eea <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004e10:	f7fe fade 	bl	80033d0 <move_window>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d167      	bne.n	8004eea <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e20:	3305      	adds	r3, #5
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8004e2c:	021b      	lsls	r3, r3, #8
 8004e2e:	b21a      	sxth	r2, r3
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004e36:	b21b      	sxth	r3, r3
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	b21b      	sxth	r3, r3
 8004e3c:	4a38      	ldr	r2, [pc, #224]	; (8004f20 <find_volume+0x6a8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d153      	bne.n	8004eea <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	78db      	ldrb	r3, [r3, #3]
 8004e46:	061a      	lsls	r2, r3, #24
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	789b      	ldrb	r3, [r3, #2]
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e52:	7852      	ldrb	r2, [r2, #1]
 8004e54:	0212      	lsls	r2, r2, #8
 8004e56:	4313      	orrs	r3, r2
 8004e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e5a:	7812      	ldrb	r2, [r2, #0]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	4a31      	ldr	r2, [pc, #196]	; (8004f24 <find_volume+0x6ac>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d142      	bne.n	8004eea <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8004e6a:	061a      	lsls	r2, r3, #24
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6e:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	4313      	orrs	r3, r2
 8004e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e78:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8004e7c:	0212      	lsls	r2, r2, #8
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e82:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8004e86:	4313      	orrs	r3, r2
 8004e88:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <find_volume+0x6b0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d12d      	bne.n	8004eea <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8004e94:	061a      	lsls	r2, r3, #24
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea2:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8004ea6:	0212      	lsls	r2, r2, #8
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eac:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb8:	3310      	adds	r3, #16
 8004eba:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8004ec2:	061a      	lsls	r2, r3, #24
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8004eca:	041b      	lsls	r3, r3, #16
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed0:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8004ed4:	0212      	lsls	r2, r2, #8
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eda:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004ef4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <find_volume+0x6b4>)
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	3301      	adds	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <find_volume+0x6b4>)
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <find_volume+0x6b4>)
 8004f04:	881a      	ldrh	r2, [r3, #0]
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f0c:	3306      	adds	r3, #6
 8004f0e:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8004f10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f12:	f7fe f9d9 	bl	80032c8 <clear_lock>
#endif

	return FR_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3758      	adds	r7, #88	; 0x58
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	ffffaa55 	.word	0xffffaa55
 8004f24:	41615252 	.word	0x41615252
 8004f28:	61417272 	.word	0x61417272
 8004f2c:	200000ac 	.word	0x200000ac

08004f30 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d02d      	beq.n	8004f9e <validate+0x6e>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d027      	beq.n	8004f9e <validate+0x6e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01e      	beq.n	8004f9e <validate+0x6e>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6c:	3306      	adds	r3, #6
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f76:	3304      	adds	r3, #4
 8004f78:	881b      	ldrh	r3, [r3, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d10f      	bne.n	8004f9e <validate+0x6e>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd feea 	bl	8002d68 <disk_status>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <validate+0x72>
		return FR_INVALID_OBJECT;
 8004f9e:	2309      	movs	r3, #9
 8004fa0:	e000      	b.n	8004fa4 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8004fbe:	f107 0310 	add.w	r3, r7, #16
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fba7 	bl	8004716 <get_ldnumber>
 8004fc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	da01      	bge.n	8004fd4 <f_mount+0x28>
 8004fd0:	230b      	movs	r3, #11
 8004fd2:	e02f      	b.n	8005034 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004fd4:	4a19      	ldr	r2, [pc, #100]	; (800503c <f_mount+0x90>)
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fdc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8004fe4:	69b8      	ldr	r0, [r7, #24]
 8004fe6:	f7fe f96f 	bl	80032c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d004      	beq.n	8005004 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	490d      	ldr	r1, [pc, #52]	; (800503c <f_mount+0x90>)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <f_mount+0x6e>
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <f_mount+0x72>
 800501a:	2300      	movs	r3, #0
 800501c:	e00a      	b.n	8005034 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800501e:	f107 0108 	add.w	r1, r7, #8
 8005022:	f107 030c 	add.w	r3, r7, #12
 8005026:	2200      	movs	r2, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f7ff fc25 	bl	8004878 <find_volume>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005032:	7dfb      	ldrb	r3, [r7, #23]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3720      	adds	r7, #32
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	200000a8 	.word	0x200000a8

08005040 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	f107 0310 	add.w	r3, r7, #16
 800504e:	3b04      	subs	r3, #4
 8005050:	6018      	str	r0, [r3, #0]
 8005052:	f107 0310 	add.w	r3, r7, #16
 8005056:	3b08      	subs	r3, #8
 8005058:	6019      	str	r1, [r3, #0]
 800505a:	f107 0310 	add.w	r3, r7, #16
 800505e:	3b09      	subs	r3, #9
 8005060:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005062:	f107 0310 	add.w	r3, r7, #16
 8005066:	3b04      	subs	r3, #4
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <f_open+0x32>
 800506e:	2309      	movs	r3, #9
 8005070:	e307      	b.n	8005682 <f_open+0x642>
	fp->fs = 0;			/* Clear file object */
 8005072:	f107 0310 	add.w	r3, r7, #16
 8005076:	3b04      	subs	r3, #4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005082:	f107 0310 	add.w	r3, r7, #16
 8005086:	3b09      	subs	r3, #9
 8005088:	f107 0210 	add.w	r2, r7, #16
 800508c:	3a09      	subs	r2, #9
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	f002 021f 	and.w	r2, r2, #31
 8005094:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005096:	f107 0310 	add.w	r3, r7, #16
 800509a:	3b09      	subs	r3, #9
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	f107 0110 	add.w	r1, r7, #16
 80050a8:	3908      	subs	r1, #8
 80050aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050ae:	3b10      	subs	r3, #16
 80050b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff fbdf 	bl	8004878 <find_volume>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80050c0:	f102 020f 	add.w	r2, r2, #15
 80050c4:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80050c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80050ca:	f103 030f 	add.w	r3, r3, #15
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f040 82d1 	bne.w	8005678 <f_open+0x638>
		INIT_BUF(dj);
 80050d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050da:	3b10      	subs	r3, #16
 80050dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e0:	3318      	adds	r3, #24
 80050e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80050e6:	3a1c      	subs	r2, #28
 80050e8:	601a      	str	r2, [r3, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
 80050ea:	f107 0310 	add.w	r3, r7, #16
 80050ee:	3b08      	subs	r3, #8
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050f6:	3b10      	subs	r3, #16
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fa92 	bl	8004624 <follow_path>
 8005100:	4603      	mov	r3, r0
 8005102:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005106:	f102 020f 	add.w	r2, r2, #15
 800510a:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800510c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005110:	3b10      	subs	r3, #16
 8005112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005116:	3314      	adds	r3, #20
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800511e:	f102 0208 	add.w	r2, r2, #8
 8005122:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005124:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005128:	f103 030f 	add.w	r3, r3, #15
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d126      	bne.n	8005180 <f_open+0x140>
			if (!dir)	/* Default directory itself */
 8005132:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005136:	f103 0308 	add.w	r3, r3, #8
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d106      	bne.n	800514e <f_open+0x10e>
				res = FR_INVALID_NAME;
 8005140:	2306      	movs	r3, #6
 8005142:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005146:	f102 020f 	add.w	r2, r2, #15
 800514a:	7013      	strb	r3, [r2, #0]
 800514c:	e018      	b.n	8005180 <f_open+0x140>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800514e:	f107 0310 	add.w	r3, r7, #16
 8005152:	3b09      	subs	r3, #9
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	bf14      	ite	ne
 800515e:	2301      	movne	r3, #1
 8005160:	2300      	moveq	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800516a:	3b10      	subs	r3, #16
 800516c:	4611      	mov	r1, r2
 800516e:	4618      	mov	r0, r3
 8005170:	f7fd ff10 	bl	8002f94 <chk_lock>
 8005174:	4603      	mov	r3, r0
 8005176:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800517a:	f102 020f 	add.w	r2, r2, #15
 800517e:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	3b09      	subs	r3, #9
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	f003 031c 	and.w	r3, r3, #28
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8145 	beq.w	800541c <f_open+0x3dc>
			if (res != FR_OK) {					/* No file, create new */
 8005192:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005196:	f103 030f 	add.w	r3, r3, #15
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d030      	beq.n	8005202 <f_open+0x1c2>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80051a0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80051a4:	f103 030f 	add.w	r3, r3, #15
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d112      	bne.n	80051d4 <f_open+0x194>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80051ae:	f7fd ff63 	bl	8003078 <enq_lock>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <f_open+0x188>
 80051b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051bc:	3b10      	subs	r3, #16
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff f929 	bl	8004416 <dir_register>
 80051c4:	4603      	mov	r3, r0
 80051c6:	e000      	b.n	80051ca <f_open+0x18a>
 80051c8:	2312      	movs	r3, #18
 80051ca:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80051ce:	f102 020f 	add.w	r2, r2, #15
 80051d2:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80051d4:	f107 0310 	add.w	r3, r7, #16
 80051d8:	3b09      	subs	r3, #9
 80051da:	f107 0210 	add.w	r2, r7, #16
 80051de:	3a09      	subs	r2, #9
 80051e0:	7812      	ldrb	r2, [r2, #0]
 80051e2:	f042 0208 	orr.w	r2, r2, #8
 80051e6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80051e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80051ec:	3b10      	subs	r3, #16
 80051ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f2:	3314      	adds	r3, #20
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80051fa:	f102 0208 	add.w	r2, r2, #8
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	e01f      	b.n	8005242 <f_open+0x202>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005202:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005206:	f103 0308 	add.w	r3, r3, #8
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330b      	adds	r3, #11
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	f003 0311 	and.w	r3, r3, #17
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <f_open+0x1e6>
					res = FR_DENIED;
 8005218:	2307      	movs	r3, #7
 800521a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800521e:	f102 020f 	add.w	r2, r2, #15
 8005222:	7013      	strb	r3, [r2, #0]
 8005224:	e00d      	b.n	8005242 <f_open+0x202>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005226:	f107 0310 	add.w	r3, r7, #16
 800522a:	3b09      	subs	r3, #9
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <f_open+0x202>
						res = FR_EXIST;
 8005236:	2308      	movs	r3, #8
 8005238:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800523c:	f102 020f 	add.w	r2, r2, #15
 8005240:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005242:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005246:	f103 030f 	add.w	r3, r3, #15
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	f040 8117 	bne.w	8005480 <f_open+0x440>
 8005252:	f107 0310 	add.w	r3, r7, #16
 8005256:	3b09      	subs	r3, #9
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 810e 	beq.w	8005480 <f_open+0x440>
				dw = GET_FATTIME();				/* Created time */
 8005264:	f7fd f85c 	bl	8002320 <get_fattime>
 8005268:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800526c:	f103 0304 	add.w	r3, r3, #4
 8005270:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005272:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005276:	f103 0308 	add.w	r3, r3, #8
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330e      	adds	r3, #14
 800527e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005282:	f102 0204 	add.w	r2, r2, #4
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005290:	f103 0304 	add.w	r3, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	b29a      	uxth	r2, r3
 800529c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052a0:	f103 0308 	add.w	r3, r3, #8
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	330f      	adds	r3, #15
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052b0:	f103 0304 	add.w	r3, r3, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	0c1a      	lsrs	r2, r3, #16
 80052b8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052bc:	f103 0308 	add.w	r3, r3, #8
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3310      	adds	r3, #16
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
 80052c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052cc:	f103 0304 	add.w	r3, r3, #4
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	0e1a      	lsrs	r2, r3, #24
 80052d4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052d8:	f103 0308 	add.w	r3, r3, #8
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3311      	adds	r3, #17
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80052e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052e8:	f103 0308 	add.w	r3, r3, #8
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330b      	adds	r3, #11
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80052f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052f8:	f103 0308 	add.w	r3, r3, #8
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	331c      	adds	r3, #28
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005308:	f103 0308 	add.w	r3, r3, #8
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	331d      	adds	r3, #29
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005318:	f103 0308 	add.w	r3, r3, #8
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	331e      	adds	r3, #30
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005328:	f103 0308 	add.w	r3, r3, #8
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	331f      	adds	r3, #31
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005334:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005338:	3b10      	subs	r3, #16
 800533a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005344:	f102 0208 	add.w	r2, r2, #8
 8005348:	6811      	ldr	r1, [r2, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe ffb9 	bl	80042c2 <ld_clust>
 8005350:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005354:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8005356:	2100      	movs	r1, #0
 8005358:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800535c:	f103 0308 	add.w	r3, r3, #8
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	f7fe ffdc 	bl	800431e <st_clust>
				dj.fs->wflag = 1;
 8005366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800536a:	3b10      	subs	r3, #16
 800536c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005376:	3304      	adds	r3, #4
 8005378:	2201      	movs	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 800537c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d07c      	beq.n	8005480 <f_open+0x440>
					dw = dj.fs->winsect;
 8005386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800538a:	3b10      	subs	r3, #16
 800538c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005396:	330c      	adds	r3, #12
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800539e:	f102 0204 	add.w	r2, r2, #4
 80053a2:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 80053a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053a8:	3b10      	subs	r3, #16
 80053aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80053b4:	6811      	ldr	r1, [r2, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe fb99 	bl	8003aee <remove_chain>
 80053bc:	4603      	mov	r3, r0
 80053be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80053c2:	f102 020f 	add.w	r2, r2, #15
 80053c6:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80053c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053cc:	f103 030f 	add.w	r3, r3, #15
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d154      	bne.n	8005480 <f_open+0x440>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80053d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053da:	3b10      	subs	r3, #16
 80053dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80053e6:	6812      	ldr	r2, [r2, #0]
 80053e8:	3a01      	subs	r2, #1
 80053ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ee:	330c      	adds	r3, #12
 80053f0:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80053f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053f6:	3b10      	subs	r3, #16
 80053f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005402:	f102 0204 	add.w	r2, r2, #4
 8005406:	6811      	ldr	r1, [r2, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7fd ffe1 	bl	80033d0 <move_window>
 800540e:	4603      	mov	r3, r0
 8005410:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005414:	f102 020f 	add.w	r2, r2, #15
 8005418:	7013      	strb	r3, [r2, #0]
 800541a:	e031      	b.n	8005480 <f_open+0x440>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800541c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005420:	f103 030f 	add.w	r3, r3, #15
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d12a      	bne.n	8005480 <f_open+0x440>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800542a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800542e:	f103 0308 	add.w	r3, r3, #8
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330b      	adds	r3, #11
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	d006      	beq.n	800544e <f_open+0x40e>
					res = FR_NO_FILE;
 8005440:	2304      	movs	r3, #4
 8005442:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005446:	f102 020f 	add.w	r2, r2, #15
 800544a:	7013      	strb	r3, [r2, #0]
 800544c:	e018      	b.n	8005480 <f_open+0x440>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800544e:	f107 0310 	add.w	r3, r7, #16
 8005452:	3b09      	subs	r3, #9
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d010      	beq.n	8005480 <f_open+0x440>
 800545e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005462:	f103 0308 	add.w	r3, r3, #8
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330b      	adds	r3, #11
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <f_open+0x440>
						res = FR_DENIED;
 8005474:	2307      	movs	r3, #7
 8005476:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800547a:	f102 020f 	add.w	r2, r2, #15
 800547e:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8005480:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005484:	f103 030f 	add.w	r3, r3, #15
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d15b      	bne.n	8005546 <f_open+0x506>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800548e:	f107 0310 	add.w	r3, r7, #16
 8005492:	3b09      	subs	r3, #9
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <f_open+0x472>
				mode |= FA__WRITTEN;
 800549e:	f107 0310 	add.w	r3, r7, #16
 80054a2:	3b09      	subs	r3, #9
 80054a4:	f107 0210 	add.w	r2, r7, #16
 80054a8:	3a09      	subs	r2, #9
 80054aa:	7812      	ldrb	r2, [r2, #0]
 80054ac:	f042 0220 	orr.w	r2, r2, #32
 80054b0:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80054b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054b6:	3b10      	subs	r3, #16
 80054b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054c2:	330c      	adds	r3, #12
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	f107 0310 	add.w	r3, r7, #16
 80054ca:	3b04      	subs	r3, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d2:	331c      	adds	r3, #28
 80054d4:	601a      	str	r2, [r3, #0]
			fp->dir_ptr = dir;
 80054d6:	f107 0310 	add.w	r3, r7, #16
 80054da:	3b04      	subs	r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80054e6:	f102 0208 	add.w	r2, r2, #8
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	601a      	str	r2, [r3, #0]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80054ee:	f107 0310 	add.w	r3, r7, #16
 80054f2:	3b09      	subs	r3, #9
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bf14      	ite	ne
 80054fe:	2301      	movne	r3, #1
 8005500:	2300      	moveq	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800550a:	3b10      	subs	r3, #16
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f7fd fdd6 	bl	80030c0 <inc_lock>
 8005514:	4602      	mov	r2, r0
 8005516:	f107 0310 	add.w	r3, r7, #16
 800551a:	3b04      	subs	r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005522:	3308      	adds	r3, #8
 8005524:	601a      	str	r2, [r3, #0]
			if (!fp->lockid) res = FR_INT_ERR;
 8005526:	f107 0310 	add.w	r3, r7, #16
 800552a:	3b04      	subs	r3, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005532:	3308      	adds	r3, #8
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <f_open+0x506>
 800553a:	2302      	movs	r3, #2
 800553c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005540:	f102 020f 	add.w	r2, r2, #15
 8005544:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005546:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800554a:	f103 030f 	add.w	r3, r3, #15
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	f040 8091 	bne.w	8005678 <f_open+0x638>
			fp->flag = mode;					/* File access mode */
 8005556:	f107 0310 	add.w	r3, r7, #16
 800555a:	3b04      	subs	r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005562:	3306      	adds	r3, #6
 8005564:	f107 0210 	add.w	r2, r7, #16
 8005568:	3a09      	subs	r2, #9
 800556a:	7812      	ldrb	r2, [r2, #0]
 800556c:	701a      	strb	r2, [r3, #0]
			fp->err = 0;						/* Clear error flag */
 800556e:	f107 0310 	add.w	r3, r7, #16
 8005572:	3b04      	subs	r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557a:	3307      	adds	r3, #7
 800557c:	2200      	movs	r2, #0
 800557e:	701a      	strb	r2, [r3, #0]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005584:	3b10      	subs	r3, #16
 8005586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005590:	f102 0208 	add.w	r2, r2, #8
 8005594:	6811      	ldr	r1, [r2, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f7fe fe93 	bl	80042c2 <ld_clust>
 800559c:	4602      	mov	r2, r0
 800559e:	f107 0310 	add.w	r3, r7, #16
 80055a2:	3b04      	subs	r3, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055aa:	3310      	adds	r3, #16
 80055ac:	601a      	str	r2, [r3, #0]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80055ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80055b2:	f103 0308 	add.w	r3, r3, #8
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	331f      	adds	r3, #31
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	061a      	lsls	r2, r3, #24
 80055be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80055c2:	f103 0308 	add.w	r3, r3, #8
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	331e      	adds	r3, #30
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80055d4:	f102 0208 	add.w	r2, r2, #8
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	321d      	adds	r2, #29
 80055dc:	7812      	ldrb	r2, [r2, #0]
 80055de:	0212      	lsls	r2, r2, #8
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80055e6:	f102 0208 	add.w	r2, r2, #8
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	321c      	adds	r2, #28
 80055ee:	7812      	ldrb	r2, [r2, #0]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	f107 0310 	add.w	r3, r7, #16
 80055f6:	3b04      	subs	r3, #4
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fe:	330c      	adds	r3, #12
 8005600:	601a      	str	r2, [r3, #0]
			fp->fptr = 0;						/* File pointer */
 8005602:	f107 0310 	add.w	r3, r7, #16
 8005606:	3b04      	subs	r3, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560e:	3308      	adds	r3, #8
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
			fp->dsect = 0;
 8005614:	f107 0310 	add.w	r3, r7, #16
 8005618:	3b04      	subs	r3, #4
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005620:	3318      	adds	r3, #24
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005626:	f107 0310 	add.w	r3, r7, #16
 800562a:	3b04      	subs	r3, #4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005632:	3304      	adds	r3, #4
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005638:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800563c:	3b10      	subs	r3, #16
 800563e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	f107 0310 	add.w	r3, r7, #16
 8005648:	3b04      	subs	r3, #4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005650:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8005652:	f107 0310 	add.w	r3, r7, #16
 8005656:	3b04      	subs	r3, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005664:	3306      	adds	r3, #6
 8005666:	881a      	ldrh	r2, [r3, #0]
 8005668:	f107 0310 	add.w	r3, r7, #16
 800566c:	3b04      	subs	r3, #4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005674:	3304      	adds	r3, #4
 8005676:	801a      	strh	r2, [r3, #0]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005678:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800567c:	f103 030f 	add.w	r3, r3, #15
 8005680:	781b      	ldrb	r3, [r3, #0]
}
 8005682:	4618      	mov	r0, r3
 8005684:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b08c      	sub	sp, #48	; 0x30
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff fc42 	bl	8004f30 <validate>
 80056ac:	4603      	mov	r3, r0
 80056ae:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80056b0:	7ffb      	ldrb	r3, [r7, #31]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <f_read+0x2c>
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	e1fb      	b.n	8005ab2 <f_read+0x424>
	if (fp->err)								/* Check error */
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c0:	3307      	adds	r3, #7
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <f_read+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ce:	3307      	adds	r3, #7
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	e1ee      	b.n	8005ab2 <f_read+0x424>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056da:	3306      	adds	r3, #6
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <f_read+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 80056e6:	2307      	movs	r3, #7
 80056e8:	e1e3      	b.n	8005ab2 <f_read+0x424>
	remain = fp->fsize - fp->fptr;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056f0:	330c      	adds	r3, #12
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056fa:	3308      	adds	r3, #8
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	429a      	cmp	r2, r3
 8005708:	f240 81ce 	bls.w	8005aa8 <f_read+0x41a>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005710:	e1ca      	b.n	8005aa8 <f_read+0x41a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005718:	3308      	adds	r3, #8
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005728:	330a      	adds	r3, #10
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005730:	fb03 f301 	mul.w	r3, r3, r1
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 8160 	bne.w	80059fc <f_read+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005742:	3308      	adds	r3, #8
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005752:	330a      	adds	r3, #10
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	fbb2 f3f3 	udiv	r3, r2, r3
 800575a:	b2da      	uxtb	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005768:	3302      	adds	r3, #2
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	b2db      	uxtb	r3, r3
 8005770:	4013      	ands	r3, r2
 8005772:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d14a      	bne.n	8005810 <f_read+0x182>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005780:	3308      	adds	r3, #8
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <f_read+0x108>
					clst = fp->sclust;			/* Follow from the origin */
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578e:	3310      	adds	r3, #16
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005794:	e01f      	b.n	80057d6 <f_read+0x148>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800579c:	3304      	adds	r3, #4
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <f_read+0x12c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057aa:	3308      	adds	r3, #8
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4619      	mov	r1, r3
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7fe fab5 	bl	8003d20 <clmt_clust>
 80057b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80057b8:	e00d      	b.n	80057d6 <f_read+0x148>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c8:	3314      	adds	r3, #20
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fd ff28 	bl	8003624 <get_fat>
 80057d4:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80057d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d807      	bhi.n	80057ec <f_read+0x15e>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e2:	3307      	adds	r3, #7
 80057e4:	2202      	movs	r2, #2
 80057e6:	701a      	strb	r2, [r3, #0]
 80057e8:	2302      	movs	r3, #2
 80057ea:	e162      	b.n	8005ab2 <f_read+0x424>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80057ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f2:	d107      	bne.n	8005804 <f_read+0x176>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057fa:	3307      	adds	r3, #7
 80057fc:	2201      	movs	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	2301      	movs	r3, #1
 8005802:	e156      	b.n	8005ab2 <f_read+0x424>
				fp->clust = clst;				/* Update current cluster */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800580a:	3314      	adds	r3, #20
 800580c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800580e:	601a      	str	r2, [r3, #0]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581e:	3314      	adds	r3, #20
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4619      	mov	r1, r3
 8005824:	4610      	mov	r0, r2
 8005826:	f7fd fed6 	bl	80035d6 <clust2sect>
 800582a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d107      	bne.n	8005842 <f_read+0x1b4>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005838:	3307      	adds	r3, #7
 800583a:	2202      	movs	r2, #2
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	2302      	movs	r3, #2
 8005840:	e137      	b.n	8005ab2 <f_read+0x424>
			sect += csect;
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4413      	add	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005856:	330a      	adds	r3, #10
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	d070      	beq.n	800594c <f_read+0x2be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800586a:	7dfa      	ldrb	r2, [r7, #23]
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	441a      	add	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587c:	3302      	adds	r3, #2
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d90b      	bls.n	800589c <f_read+0x20e>
					cc = fp->fs->csize - csect;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005890:	3302      	adds	r3, #2
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a8:	3301      	adds	r3, #1
 80058aa:	7818      	ldrb	r0, [r3, #0]
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	6a39      	ldr	r1, [r7, #32]
 80058b2:	f7fd fa99 	bl	8002de8 <disk_read>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <f_read+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c2:	3307      	adds	r3, #7
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0f2      	b.n	8005ab2 <f_read+0x424>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d2:	3306      	adds	r3, #6
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d028      	beq.n	8005930 <f_read+0x2a2>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	3318      	adds	r3, #24
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d91e      	bls.n	8005930 <f_read+0x2a2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f8:	3318      	adds	r3, #24
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590c:	330a      	adds	r3, #10
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	fb03 f302 	mul.w	r3, r3, r2
 8005914:	6a3a      	ldr	r2, [r7, #32]
 8005916:	18d0      	adds	r0, r2, r3
 8005918:	68f9      	ldr	r1, [r7, #12]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005926:	330a      	adds	r3, #10
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	f7fd faba 	bl	8002ea4 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593c:	330a      	adds	r3, #10
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	461a      	mov	r2, r3
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	fb02 f303 	mul.w	r3, r2, r3
 8005948:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800594a:	e093      	b.n	8005a74 <f_read+0x3e6>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005952:	3318      	adds	r3, #24
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	429a      	cmp	r2, r3
 800595a:	d049      	beq.n	80059f0 <f_read+0x362>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005962:	3306      	adds	r3, #6
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d028      	beq.n	80059c0 <f_read+0x332>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597a:	3301      	adds	r3, #1
 800597c:	7818      	ldrb	r0, [r3, #0]
 800597e:	68f9      	ldr	r1, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005986:	3318      	adds	r3, #24
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	2301      	movs	r3, #1
 800598c:	f7fd fa4c 	bl	8002e28 <disk_write>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <f_read+0x318>
						ABORT(fp->fs, FR_DISK_ERR);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800599c:	3307      	adds	r3, #7
 800599e:	2201      	movs	r2, #1
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	2301      	movs	r3, #1
 80059a4:	e085      	b.n	8005ab2 <f_read+0x424>
					fp->flag &= ~FA__DIRTY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ac:	3306      	adds	r3, #6
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059bc:	3306      	adds	r3, #6
 80059be:	701a      	strb	r2, [r3, #0]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059cc:	3301      	adds	r3, #1
 80059ce:	7818      	ldrb	r0, [r3, #0]
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	2301      	movs	r3, #1
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	f7fd fa07 	bl	8002de8 <disk_read>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <f_read+0x362>
					ABORT(fp->fs, FR_DISK_ERR);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e6:	3307      	adds	r3, #7
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	2301      	movs	r3, #1
 80059ee:	e060      	b.n	8005ab2 <f_read+0x424>
			}
#endif
			fp->dsect = sect;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f6:	3318      	adds	r3, #24
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	601a      	str	r2, [r3, #0]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a08:	330a      	adds	r3, #10
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a14:	3308      	adds	r3, #8
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a24:	330a      	adds	r3, #10
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a2c:	fb03 f301 	mul.w	r3, r3, r1
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	1ac3      	subs	r3, r0, r3
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d901      	bls.n	8005a42 <f_read+0x3b4>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a48:	3308      	adds	r3, #8
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a58:	330a      	adds	r3, #10
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a60:	fb03 f301 	mul.w	r3, r3, r1
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6a38      	ldr	r0, [r7, #32]
 8005a70:	f7fd fa18 	bl	8002ea4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	4413      	add	r3, r2
 8005a7a:	623b      	str	r3, [r7, #32]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a82:	3308      	adds	r3, #8
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	441a      	add	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a90:	3308      	adds	r3, #8
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	441a      	add	r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f47f ae31 	bne.w	8005712 <f_read+0x84>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3730      	adds	r7, #48	; 0x30
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b08a      	sub	sp, #40	; 0x28
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff fa2c 	bl	8004f30 <validate>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <f_write+0x2c>
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
 8005ae4:	e258      	b.n	8005f98 <f_write+0x4de>
	if (fp->err)							/* Check error */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	3307      	adds	r3, #7
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <f_write+0x46>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005afa:	3307      	adds	r3, #7
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	e24b      	b.n	8005f98 <f_write+0x4de>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b06:	3306      	adds	r3, #6
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <f_write+0x5c>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005b12:	2307      	movs	r3, #7
 8005b14:	e240      	b.n	8005f98 <f_write+0x4de>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	441a      	add	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	f080 8208 	bcs.w	8005f44 <f_write+0x48a>
 8005b34:	2300      	movs	r3, #0
 8005b36:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005b38:	e204      	b.n	8005f44 <f_write+0x48a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b40:	3308      	adds	r3, #8
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b50:	330a      	adds	r3, #10
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b58:	fb03 f301 	mul.w	r3, r3, r1
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f040 818d 	bne.w	8005e7e <f_write+0x3c4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6a:	3308      	adds	r3, #8
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7a:	330a      	adds	r3, #10
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b90:	3302      	adds	r3, #2
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	4013      	ands	r3, r2
 8005b9a:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005b9c:	7dbb      	ldrb	r3, [r7, #22]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d167      	bne.n	8005c72 <f_write+0x1b8>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba8:	3308      	adds	r3, #8
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d112      	bne.n	8005bd6 <f_write+0x11c>
					clst = fp->sclust;		/* Follow from the origin */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb6:	3310      	adds	r3, #16
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d129      	bne.n	8005c16 <f_write+0x15c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fd fff6 	bl	8003bbe <create_chain>
 8005bd2:	6278      	str	r0, [r7, #36]	; 0x24
 8005bd4:	e01f      	b.n	8005c16 <f_write+0x15c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005bdc:	3304      	adds	r3, #4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <f_write+0x140>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bea:	3308      	adds	r3, #8
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7fe f895 	bl	8003d20 <clmt_clust>
 8005bf6:	6278      	str	r0, [r7, #36]	; 0x24
 8005bf8:	e00d      	b.n	8005c16 <f_write+0x15c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c08:	3314      	adds	r3, #20
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f7fd ffd5 	bl	8003bbe <create_chain>
 8005c14:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8198 	beq.w	8005f4e <f_write+0x494>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d107      	bne.n	8005c34 <f_write+0x17a>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2a:	3307      	adds	r3, #7
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	2302      	movs	r3, #2
 8005c32:	e1b1      	b.n	8005f98 <f_write+0x4de>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c3a:	d107      	bne.n	8005c4c <f_write+0x192>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c42:	3307      	adds	r3, #7
 8005c44:	2201      	movs	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e1a5      	b.n	8005f98 <f_write+0x4de>
				fp->clust = clst;			/* Update current cluster */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c52:	3314      	adds	r3, #20
 8005c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c56:	601a      	str	r2, [r3, #0]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c5e:	3310      	adds	r3, #16
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <f_write+0x1b8>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6c:	3310      	adds	r3, #16
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c70:	601a      	str	r2, [r3, #0]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c78:	3306      	adds	r3, #6
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d028      	beq.n	8005cd6 <f_write+0x21c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c90:	3301      	adds	r3, #1
 8005c92:	7818      	ldrb	r0, [r3, #0]
 8005c94:	68f9      	ldr	r1, [r7, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f7fd f8c1 	bl	8002e28 <disk_write>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <f_write+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb2:	3307      	adds	r3, #7
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e16d      	b.n	8005f98 <f_write+0x4de>
				fp->flag &= ~FA__DIRTY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc2:	3306      	adds	r3, #6
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd2:	3306      	adds	r3, #6
 8005cd4:	701a      	strb	r2, [r3, #0]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce4:	3314      	adds	r3, #20
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7fd fc73 	bl	80035d6 <clust2sect>
 8005cf0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d107      	bne.n	8005d08 <f_write+0x24e>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfe:	3307      	adds	r3, #7
 8005d00:	2202      	movs	r2, #2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	2302      	movs	r3, #2
 8005d06:	e147      	b.n	8005f98 <f_write+0x4de>
			sect += csect;
 8005d08:	7dbb      	ldrb	r3, [r7, #22]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1c:	330a      	adds	r3, #10
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d28:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d074      	beq.n	8005e1a <f_write+0x360>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005d30:	7dba      	ldrb	r2, [r7, #22]
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	441a      	add	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d42:	3302      	adds	r3, #2
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d90b      	bls.n	8005d62 <f_write+0x2a8>
					cc = fp->fs->csize - csect;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d56:	3302      	adds	r3, #2
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	7dbb      	ldrb	r3, [r7, #22]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d6e:	3301      	adds	r3, #1
 8005d70:	7818      	ldrb	r0, [r3, #0]
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	69b9      	ldr	r1, [r7, #24]
 8005d78:	f7fd f856 	bl	8002e28 <disk_write>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <f_write+0x2d8>
					ABORT(fp->fs, FR_DISK_ERR);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d88:	3307      	adds	r3, #7
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e102      	b.n	8005f98 <f_write+0x4de>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d98:	3318      	adds	r3, #24
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	69fa      	ldr	r2, [r7, #28]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d92b      	bls.n	8005dfe <f_write+0x344>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dae:	3318      	adds	r3, #24
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc2:	330a      	adds	r3, #10
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	fb03 f302 	mul.w	r3, r3, r2
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	18d1      	adds	r1, r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dda:	330a      	adds	r3, #10
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	461a      	mov	r2, r3
 8005de0:	f7fd f860 	bl	8002ea4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dea:	3306      	adds	r3, #6
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfa:	3306      	adds	r3, #6
 8005dfc:	701a      	strb	r2, [r3, #0]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e0a:	330a      	adds	r3, #10
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	fb02 f303 	mul.w	r3, r2, r3
 8005e16:	623b      	str	r3, [r7, #32]
				continue;
 8005e18:	e07a      	b.n	8005f10 <f_write+0x456>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e20:	3318      	adds	r3, #24
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d023      	beq.n	8005e72 <f_write+0x3b8>
				if (fp->fptr < fp->fsize &&
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e30:	3308      	adds	r3, #8
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d217      	bcs.n	8005e72 <f_write+0x3b8>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e4e:	3301      	adds	r3, #1
 8005e50:	7818      	ldrb	r0, [r3, #0]
 8005e52:	68f9      	ldr	r1, [r7, #12]
 8005e54:	2301      	movs	r3, #1
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	f7fc ffc6 	bl	8002de8 <disk_read>
 8005e5c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <f_write+0x3b8>
						ABORT(fp->fs, FR_DISK_ERR);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e68:	3307      	adds	r3, #7
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e092      	b.n	8005f98 <f_write+0x4de>
			}
#endif
			fp->dsect = sect;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e78:	3318      	adds	r3, #24
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	601a      	str	r2, [r3, #0]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e8a:	330a      	adds	r3, #10
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e96:	3308      	adds	r3, #8
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ea6:	330a      	adds	r3, #10
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	fbb2 f1f3 	udiv	r1, r2, r3
 8005eae:	fb03 f301 	mul.w	r3, r3, r1
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	1ac3      	subs	r3, r0, r3
 8005eb6:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005eb8:	6a3a      	ldr	r2, [r7, #32]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d901      	bls.n	8005ec4 <f_write+0x40a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eca:	3308      	adds	r3, #8
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	330a      	adds	r3, #10
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ee2:	fb03 f301 	mul.w	r3, r3, r1
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	6a3a      	ldr	r2, [r7, #32]
 8005eee:	69b9      	ldr	r1, [r7, #24]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fc ffd7 	bl	8002ea4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005efc:	3306      	adds	r3, #6
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f0c:	3306      	adds	r3, #6
 8005f0e:	701a      	strb	r2, [r3, #0]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	4413      	add	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1e:	3308      	adds	r3, #8
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	441a      	add	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	441a      	add	r2, r3
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f47f adf7 	bne.w	8005b3a <f_write+0x80>
 8005f4c:	e000      	b.n	8005f50 <f_write+0x496>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005f4e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f56:	3308      	adds	r3, #8
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f60:	330c      	adds	r3, #12
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d909      	bls.n	8005f7c <f_write+0x4c2>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6e:	3308      	adds	r3, #8
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f78:	330c      	adds	r3, #12
 8005f7a:	601a      	str	r2, [r3, #0]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f82:	3306      	adds	r3, #6
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	f043 0320 	orr.w	r3, r3, #32
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f92:	3306      	adds	r3, #6
 8005f94:	701a      	strb	r2, [r3, #0]

	LEAVE_FF(fp->fs, FR_OK);
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3728      	adds	r7, #40	; 0x28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fe ffc1 	bl	8004f30 <validate>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 80cc 	bne.w	8006152 <f_sync+0x1b2>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc0:	3306      	adds	r3, #6
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80c2 	beq.w	8006152 <f_sync+0x1b2>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd4:	3306      	adds	r3, #6
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d022      	beq.n	8006026 <f_sync+0x86>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fec:	3301      	adds	r3, #1
 8005fee:	7818      	ldrb	r0, [r3, #0]
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff8:	3318      	adds	r3, #24
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f7fc ff13 	bl	8002e28 <disk_write>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <f_sync+0x6c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006008:	2301      	movs	r3, #1
 800600a:	e0a3      	b.n	8006154 <f_sync+0x1b4>
				fp->flag &= ~FA__DIRTY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006012:	3306      	adds	r3, #6
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601a:	b2da      	uxtb	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006022:	3306      	adds	r3, #6
 8006024:	701a      	strb	r2, [r3, #0]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006034:	331c      	adds	r3, #28
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f7fd f9c8 	bl	80033d0 <move_window>
 8006040:	4603      	mov	r3, r0
 8006042:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	f040 8083 	bne.w	8006152 <f_sync+0x1b2>
				dir = fp->dir_ptr;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	330b      	adds	r3, #11
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	330b      	adds	r3, #11
 8006060:	f042 0220 	orr.w	r2, r2, #32
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800606e:	330c      	adds	r3, #12
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	331c      	adds	r3, #28
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006080:	330c      	adds	r3, #12
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	b29a      	uxth	r2, r3
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	331d      	adds	r3, #29
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006098:	330c      	adds	r3, #12
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	0c1a      	lsrs	r2, r3, #16
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	331e      	adds	r3, #30
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ac:	330c      	adds	r3, #12
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	0e1a      	lsrs	r2, r3, #24
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	331f      	adds	r3, #31
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060c0:	3310      	adds	r3, #16
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6938      	ldr	r0, [r7, #16]
 80060c8:	f7fe f929 	bl	800431e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80060cc:	f7fc f928 	bl	8002320 <get_fattime>
 80060d0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	3316      	adds	r3, #22
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	0a1b      	lsrs	r3, r3, #8
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3317      	adds	r3, #23
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	0c1a      	lsrs	r2, r3, #16
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	3318      	adds	r3, #24
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	0e1a      	lsrs	r2, r3, #24
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	3319      	adds	r3, #25
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	3312      	adds	r3, #18
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	3313      	adds	r3, #19
 8006110:	2200      	movs	r2, #0
 8006112:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800611a:	3306      	adds	r3, #6
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	f023 0320 	bic.w	r3, r3, #32
 8006122:	b2da      	uxtb	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800612a:	3306      	adds	r3, #6
 800612c:	701a      	strb	r2, [r3, #0]
				fp->fs->wflag = 1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800613a:	3304      	adds	r3, #4
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f7fd f975 	bl	8003438 <sync_fs>
 800614e:	4603      	mov	r3, r0
 8006150:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8006152:	7dfb      	ldrb	r3, [r7, #23]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff ff1b 	bl	8005fa0 <f_sync>
 800616a:	4603      	mov	r3, r0
 800616c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d119      	bne.n	80061a8 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7fe fedb 	bl	8004f30 <validate>
 800617a:	4603      	mov	r3, r0
 800617c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d111      	bne.n	80061a8 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800618a:	3308      	adds	r3, #8
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f7fd f856 	bl	8003240 <dec_lock>
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b08e      	sub	sp, #56	; 0x38
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80061be:	f107 030c 	add.w	r3, r7, #12
 80061c2:	2200      	movs	r2, #0
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fe fb56 	bl	8004878 <find_volume>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80061d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 80c4 	bne.w	800636a <f_getfree+0x1b8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e8:	3310      	adds	r3, #16
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061f2:	3314      	adds	r3, #20
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3b02      	subs	r3, #2
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d807      	bhi.n	800620c <f_getfree+0x5a>
			*nclst = fs->free_clust;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006202:	3310      	adds	r3, #16
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	e0ae      	b.n	800636a <f_getfree+0x1b8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 800621a:	7efb      	ldrb	r3, [r7, #27]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d127      	bne.n	8006270 <f_getfree+0xbe>
				clst = 2;
 8006220:	2302      	movs	r3, #2
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8006224:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006226:	69f8      	ldr	r0, [r7, #28]
 8006228:	f7fd f9fc 	bl	8003624 <get_fat>
 800622c:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006234:	d103      	bne.n	800623e <f_getfree+0x8c>
 8006236:	2301      	movs	r3, #1
 8006238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800623c:	e07f      	b.n	800633e <f_getfree+0x18c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d103      	bne.n	800624c <f_getfree+0x9a>
 8006244:	2302      	movs	r3, #2
 8006246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800624a:	e078      	b.n	800633e <f_getfree+0x18c>
					if (stat == 0) n++;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <f_getfree+0xa6>
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	3301      	adds	r3, #1
 8006256:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	3301      	adds	r3, #1
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006264:	3314      	adds	r3, #20
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800626a:	429a      	cmp	r2, r3
 800626c:	d3da      	bcc.n	8006224 <f_getfree+0x72>
 800626e:	e066      	b.n	800633e <f_getfree+0x18c>
			} else {
				clst = fs->n_fatent;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006276:	3314      	adds	r3, #20
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
 800628a:	2300      	movs	r3, #0
 800628c:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	2b00      	cmp	r3, #0
 8006292:	d115      	bne.n	80062c0 <f_getfree+0x10e>
						res = move_window(fs, sect++);
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	1c5a      	adds	r2, r3, #1
 8006298:	62ba      	str	r2, [r7, #40]	; 0x28
 800629a:	4619      	mov	r1, r3
 800629c:	69f8      	ldr	r0, [r7, #28]
 800629e:	f7fd f897 	bl	80033d0 <move_window>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 80062a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d145      	bne.n	800633c <f_getfree+0x18a>
						p = fs->win.d8;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ba:	330a      	adds	r3, #10
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 80062c0:	7efb      	ldrb	r3, [r7, #27]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d115      	bne.n	80062f2 <f_getfree+0x140>
						if (LD_WORD(p) == 0) n++;
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	3301      	adds	r3, #1
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	b21a      	sxth	r2, r3
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	b21b      	sxth	r3, r3
 80062d6:	4313      	orrs	r3, r2
 80062d8:	b21b      	sxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <f_getfree+0x132>
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	3301      	adds	r3, #1
 80062e2:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	3302      	adds	r3, #2
 80062e8:	623b      	str	r3, [r7, #32]
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	3b02      	subs	r3, #2
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
 80062f0:	e01d      	b.n	800632e <f_getfree+0x17c>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	3303      	adds	r3, #3
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	061a      	lsls	r2, r3, #24
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	3302      	adds	r3, #2
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	4313      	orrs	r3, r2
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	3201      	adds	r2, #1
 8006308:	7812      	ldrb	r2, [r2, #0]
 800630a:	0212      	lsls	r2, r2, #8
 800630c:	4313      	orrs	r3, r2
 800630e:	6a3a      	ldr	r2, [r7, #32]
 8006310:	7812      	ldrb	r2, [r2, #0]
 8006312:	4313      	orrs	r3, r2
 8006314:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <f_getfree+0x170>
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	3301      	adds	r3, #1
 8006320:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	3304      	adds	r3, #4
 8006326:	623b      	str	r3, [r7, #32]
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	3b04      	subs	r3, #4
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	3b01      	subs	r3, #1
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1a9      	bne.n	800628e <f_getfree+0xdc>
 800633a:	e000      	b.n	800633e <f_getfree+0x18c>
						if (res != FR_OK) break;
 800633c:	bf00      	nop
			}
			fs->free_clust = n;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006344:	3310      	adds	r3, #16
 8006346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006348:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006350:	3305      	adds	r3, #5
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	b2da      	uxtb	r2, r3
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006360:	3305      	adds	r3, #5
 8006362:	701a      	strb	r2, [r3, #0]
			*nclst = n;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006368:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800636a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800636e:	4618      	mov	r0, r3
 8006370:	3738      	adds	r7, #56	; 0x38
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b088      	sub	sp, #32
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800638a:	e01b      	b.n	80063c4 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800638c:	f107 0310 	add.w	r3, r7, #16
 8006390:	f107 0114 	add.w	r1, r7, #20
 8006394:	2201      	movs	r2, #1
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff f979 	bl	800568e <f_read>
		if (rc != 1) break;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d116      	bne.n	80063d0 <f_gets+0x5a>
		c = s[0];
 80063a2:	7d3b      	ldrb	r3, [r7, #20]
 80063a4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	2b0d      	cmp	r3, #13
 80063aa:	d100      	bne.n	80063ae <f_gets+0x38>
 80063ac:	e00a      	b.n	80063c4 <f_gets+0x4e>
		*p++ = c;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	61ba      	str	r2, [r7, #24]
 80063b4:	7dfa      	ldrb	r2, [r7, #23]
 80063b6:	701a      	strb	r2, [r3, #0]
		n++;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	2b0a      	cmp	r3, #10
 80063c2:	d007      	beq.n	80063d4 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	dbde      	blt.n	800638c <f_gets+0x16>
 80063ce:	e002      	b.n	80063d6 <f_gets+0x60>
		if (rc != 1) break;
 80063d0:	bf00      	nop
 80063d2:	e000      	b.n	80063d6 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80063d4:	bf00      	nop
	}
	*p = 0;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <f_gets+0x70>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	e000      	b.n	80063e8 <f_gets+0x72>
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3720      	adds	r7, #32
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	4613      	mov	r3, r2
 80063fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80063fe:	2301      	movs	r3, #1
 8006400:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006406:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <FATFS_LinkDriverEx+0x90>)
 8006408:	7a5b      	ldrb	r3, [r3, #9]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d831      	bhi.n	8006474 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <FATFS_LinkDriverEx+0x90>)
 8006412:	7a5b      	ldrb	r3, [r3, #9]
 8006414:	b2db      	uxtb	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	4b19      	ldr	r3, [pc, #100]	; (8006480 <FATFS_LinkDriverEx+0x90>)
 800641a:	2100      	movs	r1, #0
 800641c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800641e:	4b18      	ldr	r3, [pc, #96]	; (8006480 <FATFS_LinkDriverEx+0x90>)
 8006420:	7a5b      	ldrb	r3, [r3, #9]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	4a16      	ldr	r2, [pc, #88]	; (8006480 <FATFS_LinkDriverEx+0x90>)
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800642e:	4b14      	ldr	r3, [pc, #80]	; (8006480 <FATFS_LinkDriverEx+0x90>)
 8006430:	7a5b      	ldrb	r3, [r3, #9]
 8006432:	b2db      	uxtb	r3, r3
 8006434:	461a      	mov	r2, r3
 8006436:	4b12      	ldr	r3, [pc, #72]	; (8006480 <FATFS_LinkDriverEx+0x90>)
 8006438:	4413      	add	r3, r2
 800643a:	79fa      	ldrb	r2, [r7, #7]
 800643c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800643e:	4b10      	ldr	r3, [pc, #64]	; (8006480 <FATFS_LinkDriverEx+0x90>)
 8006440:	7a5b      	ldrb	r3, [r3, #9]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	b2d1      	uxtb	r1, r2
 8006448:	4a0d      	ldr	r2, [pc, #52]	; (8006480 <FATFS_LinkDriverEx+0x90>)
 800644a:	7251      	strb	r1, [r2, #9]
 800644c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800644e:	7dbb      	ldrb	r3, [r7, #22]
 8006450:	3330      	adds	r3, #48	; 0x30
 8006452:	b2da      	uxtb	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	3301      	adds	r3, #1
 800645c:	223a      	movs	r2, #58	; 0x3a
 800645e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3302      	adds	r3, #2
 8006464:	222f      	movs	r2, #47	; 0x2f
 8006466:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	3303      	adds	r3, #3
 800646c:	2200      	movs	r2, #0
 800646e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006470:	2300      	movs	r3, #0
 8006472:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
}
 8006476:	4618      	mov	r0, r3
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	200000c8 	.word	0x200000c8

08006484 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800648e:	2200      	movs	r2, #0
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff ffac 	bl	80063f0 <FATFS_LinkDriverEx>
 8006498:	4603      	mov	r3, r0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <__errno>:
 80064a4:	4b01      	ldr	r3, [pc, #4]	; (80064ac <__errno+0x8>)
 80064a6:	6818      	ldr	r0, [r3, #0]
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	20000020 	.word	0x20000020

080064b0 <__libc_init_array>:
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	2600      	movs	r6, #0
 80064b4:	4d0c      	ldr	r5, [pc, #48]	; (80064e8 <__libc_init_array+0x38>)
 80064b6:	4c0d      	ldr	r4, [pc, #52]	; (80064ec <__libc_init_array+0x3c>)
 80064b8:	1b64      	subs	r4, r4, r5
 80064ba:	10a4      	asrs	r4, r4, #2
 80064bc:	42a6      	cmp	r6, r4
 80064be:	d109      	bne.n	80064d4 <__libc_init_array+0x24>
 80064c0:	f001 f80c 	bl	80074dc <_init>
 80064c4:	2600      	movs	r6, #0
 80064c6:	4d0a      	ldr	r5, [pc, #40]	; (80064f0 <__libc_init_array+0x40>)
 80064c8:	4c0a      	ldr	r4, [pc, #40]	; (80064f4 <__libc_init_array+0x44>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	42a6      	cmp	r6, r4
 80064d0:	d105      	bne.n	80064de <__libc_init_array+0x2e>
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d8:	4798      	blx	r3
 80064da:	3601      	adds	r6, #1
 80064dc:	e7ee      	b.n	80064bc <__libc_init_array+0xc>
 80064de:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e2:	4798      	blx	r3
 80064e4:	3601      	adds	r6, #1
 80064e6:	e7f2      	b.n	80064ce <__libc_init_array+0x1e>
 80064e8:	0800783c 	.word	0x0800783c
 80064ec:	0800783c 	.word	0x0800783c
 80064f0:	0800783c 	.word	0x0800783c
 80064f4:	08007840 	.word	0x08007840

080064f8 <memset>:
 80064f8:	4603      	mov	r3, r0
 80064fa:	4402      	add	r2, r0
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d100      	bne.n	8006502 <memset+0xa>
 8006500:	4770      	bx	lr
 8006502:	f803 1b01 	strb.w	r1, [r3], #1
 8006506:	e7f9      	b.n	80064fc <memset+0x4>

08006508 <iprintf>:
 8006508:	b40f      	push	{r0, r1, r2, r3}
 800650a:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <iprintf+0x2c>)
 800650c:	b513      	push	{r0, r1, r4, lr}
 800650e:	681c      	ldr	r4, [r3, #0]
 8006510:	b124      	cbz	r4, 800651c <iprintf+0x14>
 8006512:	69a3      	ldr	r3, [r4, #24]
 8006514:	b913      	cbnz	r3, 800651c <iprintf+0x14>
 8006516:	4620      	mov	r0, r4
 8006518:	f000 fa72 	bl	8006a00 <__sinit>
 800651c:	ab05      	add	r3, sp, #20
 800651e:	4620      	mov	r0, r4
 8006520:	9a04      	ldr	r2, [sp, #16]
 8006522:	68a1      	ldr	r1, [r4, #8]
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	f000 fc3d 	bl	8006da4 <_vfiprintf_r>
 800652a:	b002      	add	sp, #8
 800652c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006530:	b004      	add	sp, #16
 8006532:	4770      	bx	lr
 8006534:	20000020 	.word	0x20000020

08006538 <_puts_r>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	460e      	mov	r6, r1
 800653c:	4605      	mov	r5, r0
 800653e:	b118      	cbz	r0, 8006548 <_puts_r+0x10>
 8006540:	6983      	ldr	r3, [r0, #24]
 8006542:	b90b      	cbnz	r3, 8006548 <_puts_r+0x10>
 8006544:	f000 fa5c 	bl	8006a00 <__sinit>
 8006548:	69ab      	ldr	r3, [r5, #24]
 800654a:	68ac      	ldr	r4, [r5, #8]
 800654c:	b913      	cbnz	r3, 8006554 <_puts_r+0x1c>
 800654e:	4628      	mov	r0, r5
 8006550:	f000 fa56 	bl	8006a00 <__sinit>
 8006554:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <_puts_r+0xd0>)
 8006556:	429c      	cmp	r4, r3
 8006558:	d120      	bne.n	800659c <_puts_r+0x64>
 800655a:	686c      	ldr	r4, [r5, #4]
 800655c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800655e:	07db      	lsls	r3, r3, #31
 8006560:	d405      	bmi.n	800656e <_puts_r+0x36>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	0598      	lsls	r0, r3, #22
 8006566:	d402      	bmi.n	800656e <_puts_r+0x36>
 8006568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656a:	f000 fae7 	bl	8006b3c <__retarget_lock_acquire_recursive>
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	0719      	lsls	r1, r3, #28
 8006572:	d51d      	bpl.n	80065b0 <_puts_r+0x78>
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	b1db      	cbz	r3, 80065b0 <_puts_r+0x78>
 8006578:	3e01      	subs	r6, #1
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006580:	3b01      	subs	r3, #1
 8006582:	60a3      	str	r3, [r4, #8]
 8006584:	bb39      	cbnz	r1, 80065d6 <_puts_r+0x9e>
 8006586:	2b00      	cmp	r3, #0
 8006588:	da38      	bge.n	80065fc <_puts_r+0xc4>
 800658a:	4622      	mov	r2, r4
 800658c:	210a      	movs	r1, #10
 800658e:	4628      	mov	r0, r5
 8006590:	f000 f85c 	bl	800664c <__swbuf_r>
 8006594:	3001      	adds	r0, #1
 8006596:	d011      	beq.n	80065bc <_puts_r+0x84>
 8006598:	250a      	movs	r5, #10
 800659a:	e011      	b.n	80065c0 <_puts_r+0x88>
 800659c:	4b1b      	ldr	r3, [pc, #108]	; (800660c <_puts_r+0xd4>)
 800659e:	429c      	cmp	r4, r3
 80065a0:	d101      	bne.n	80065a6 <_puts_r+0x6e>
 80065a2:	68ac      	ldr	r4, [r5, #8]
 80065a4:	e7da      	b.n	800655c <_puts_r+0x24>
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <_puts_r+0xd8>)
 80065a8:	429c      	cmp	r4, r3
 80065aa:	bf08      	it	eq
 80065ac:	68ec      	ldreq	r4, [r5, #12]
 80065ae:	e7d5      	b.n	800655c <_puts_r+0x24>
 80065b0:	4621      	mov	r1, r4
 80065b2:	4628      	mov	r0, r5
 80065b4:	f000 f89c 	bl	80066f0 <__swsetup_r>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	d0dd      	beq.n	8006578 <_puts_r+0x40>
 80065bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80065c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065c2:	07da      	lsls	r2, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_puts_r+0x9a>
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	059b      	lsls	r3, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_puts_r+0x9a>
 80065cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ce:	f000 fab6 	bl	8006b3e <__retarget_lock_release_recursive>
 80065d2:	4628      	mov	r0, r5
 80065d4:	bd70      	pop	{r4, r5, r6, pc}
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	da04      	bge.n	80065e4 <_puts_r+0xac>
 80065da:	69a2      	ldr	r2, [r4, #24]
 80065dc:	429a      	cmp	r2, r3
 80065de:	dc06      	bgt.n	80065ee <_puts_r+0xb6>
 80065e0:	290a      	cmp	r1, #10
 80065e2:	d004      	beq.n	80065ee <_puts_r+0xb6>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	6022      	str	r2, [r4, #0]
 80065ea:	7019      	strb	r1, [r3, #0]
 80065ec:	e7c5      	b.n	800657a <_puts_r+0x42>
 80065ee:	4622      	mov	r2, r4
 80065f0:	4628      	mov	r0, r5
 80065f2:	f000 f82b 	bl	800664c <__swbuf_r>
 80065f6:	3001      	adds	r0, #1
 80065f8:	d1bf      	bne.n	800657a <_puts_r+0x42>
 80065fa:	e7df      	b.n	80065bc <_puts_r+0x84>
 80065fc:	250a      	movs	r5, #10
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	6022      	str	r2, [r4, #0]
 8006604:	701d      	strb	r5, [r3, #0]
 8006606:	e7db      	b.n	80065c0 <_puts_r+0x88>
 8006608:	080077c8 	.word	0x080077c8
 800660c:	080077e8 	.word	0x080077e8
 8006610:	080077a8 	.word	0x080077a8

08006614 <puts>:
 8006614:	4b02      	ldr	r3, [pc, #8]	; (8006620 <puts+0xc>)
 8006616:	4601      	mov	r1, r0
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	f7ff bf8d 	b.w	8006538 <_puts_r>
 800661e:	bf00      	nop
 8006620:	20000020 	.word	0x20000020

08006624 <strncpy>:
 8006624:	4603      	mov	r3, r0
 8006626:	b510      	push	{r4, lr}
 8006628:	3901      	subs	r1, #1
 800662a:	b132      	cbz	r2, 800663a <strncpy+0x16>
 800662c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006630:	3a01      	subs	r2, #1
 8006632:	f803 4b01 	strb.w	r4, [r3], #1
 8006636:	2c00      	cmp	r4, #0
 8006638:	d1f7      	bne.n	800662a <strncpy+0x6>
 800663a:	2100      	movs	r1, #0
 800663c:	441a      	add	r2, r3
 800663e:	4293      	cmp	r3, r2
 8006640:	d100      	bne.n	8006644 <strncpy+0x20>
 8006642:	bd10      	pop	{r4, pc}
 8006644:	f803 1b01 	strb.w	r1, [r3], #1
 8006648:	e7f9      	b.n	800663e <strncpy+0x1a>
	...

0800664c <__swbuf_r>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	460e      	mov	r6, r1
 8006650:	4614      	mov	r4, r2
 8006652:	4605      	mov	r5, r0
 8006654:	b118      	cbz	r0, 800665e <__swbuf_r+0x12>
 8006656:	6983      	ldr	r3, [r0, #24]
 8006658:	b90b      	cbnz	r3, 800665e <__swbuf_r+0x12>
 800665a:	f000 f9d1 	bl	8006a00 <__sinit>
 800665e:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <__swbuf_r+0x98>)
 8006660:	429c      	cmp	r4, r3
 8006662:	d12b      	bne.n	80066bc <__swbuf_r+0x70>
 8006664:	686c      	ldr	r4, [r5, #4]
 8006666:	69a3      	ldr	r3, [r4, #24]
 8006668:	60a3      	str	r3, [r4, #8]
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	071a      	lsls	r2, r3, #28
 800666e:	d52f      	bpl.n	80066d0 <__swbuf_r+0x84>
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	b36b      	cbz	r3, 80066d0 <__swbuf_r+0x84>
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	6820      	ldr	r0, [r4, #0]
 8006678:	b2f6      	uxtb	r6, r6
 800667a:	1ac0      	subs	r0, r0, r3
 800667c:	6963      	ldr	r3, [r4, #20]
 800667e:	4637      	mov	r7, r6
 8006680:	4283      	cmp	r3, r0
 8006682:	dc04      	bgt.n	800668e <__swbuf_r+0x42>
 8006684:	4621      	mov	r1, r4
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f926 	bl	80068d8 <_fflush_r>
 800668c:	bb30      	cbnz	r0, 80066dc <__swbuf_r+0x90>
 800668e:	68a3      	ldr	r3, [r4, #8]
 8006690:	3001      	adds	r0, #1
 8006692:	3b01      	subs	r3, #1
 8006694:	60a3      	str	r3, [r4, #8]
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	6022      	str	r2, [r4, #0]
 800669c:	701e      	strb	r6, [r3, #0]
 800669e:	6963      	ldr	r3, [r4, #20]
 80066a0:	4283      	cmp	r3, r0
 80066a2:	d004      	beq.n	80066ae <__swbuf_r+0x62>
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	07db      	lsls	r3, r3, #31
 80066a8:	d506      	bpl.n	80066b8 <__swbuf_r+0x6c>
 80066aa:	2e0a      	cmp	r6, #10
 80066ac:	d104      	bne.n	80066b8 <__swbuf_r+0x6c>
 80066ae:	4621      	mov	r1, r4
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 f911 	bl	80068d8 <_fflush_r>
 80066b6:	b988      	cbnz	r0, 80066dc <__swbuf_r+0x90>
 80066b8:	4638      	mov	r0, r7
 80066ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <__swbuf_r+0x9c>)
 80066be:	429c      	cmp	r4, r3
 80066c0:	d101      	bne.n	80066c6 <__swbuf_r+0x7a>
 80066c2:	68ac      	ldr	r4, [r5, #8]
 80066c4:	e7cf      	b.n	8006666 <__swbuf_r+0x1a>
 80066c6:	4b09      	ldr	r3, [pc, #36]	; (80066ec <__swbuf_r+0xa0>)
 80066c8:	429c      	cmp	r4, r3
 80066ca:	bf08      	it	eq
 80066cc:	68ec      	ldreq	r4, [r5, #12]
 80066ce:	e7ca      	b.n	8006666 <__swbuf_r+0x1a>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f80c 	bl	80066f0 <__swsetup_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d0cb      	beq.n	8006674 <__swbuf_r+0x28>
 80066dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80066e0:	e7ea      	b.n	80066b8 <__swbuf_r+0x6c>
 80066e2:	bf00      	nop
 80066e4:	080077c8 	.word	0x080077c8
 80066e8:	080077e8 	.word	0x080077e8
 80066ec:	080077a8 	.word	0x080077a8

080066f0 <__swsetup_r>:
 80066f0:	4b32      	ldr	r3, [pc, #200]	; (80067bc <__swsetup_r+0xcc>)
 80066f2:	b570      	push	{r4, r5, r6, lr}
 80066f4:	681d      	ldr	r5, [r3, #0]
 80066f6:	4606      	mov	r6, r0
 80066f8:	460c      	mov	r4, r1
 80066fa:	b125      	cbz	r5, 8006706 <__swsetup_r+0x16>
 80066fc:	69ab      	ldr	r3, [r5, #24]
 80066fe:	b913      	cbnz	r3, 8006706 <__swsetup_r+0x16>
 8006700:	4628      	mov	r0, r5
 8006702:	f000 f97d 	bl	8006a00 <__sinit>
 8006706:	4b2e      	ldr	r3, [pc, #184]	; (80067c0 <__swsetup_r+0xd0>)
 8006708:	429c      	cmp	r4, r3
 800670a:	d10f      	bne.n	800672c <__swsetup_r+0x3c>
 800670c:	686c      	ldr	r4, [r5, #4]
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006714:	0719      	lsls	r1, r3, #28
 8006716:	d42c      	bmi.n	8006772 <__swsetup_r+0x82>
 8006718:	06dd      	lsls	r5, r3, #27
 800671a:	d411      	bmi.n	8006740 <__swsetup_r+0x50>
 800671c:	2309      	movs	r3, #9
 800671e:	6033      	str	r3, [r6, #0]
 8006720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006728:	81a3      	strh	r3, [r4, #12]
 800672a:	e03e      	b.n	80067aa <__swsetup_r+0xba>
 800672c:	4b25      	ldr	r3, [pc, #148]	; (80067c4 <__swsetup_r+0xd4>)
 800672e:	429c      	cmp	r4, r3
 8006730:	d101      	bne.n	8006736 <__swsetup_r+0x46>
 8006732:	68ac      	ldr	r4, [r5, #8]
 8006734:	e7eb      	b.n	800670e <__swsetup_r+0x1e>
 8006736:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <__swsetup_r+0xd8>)
 8006738:	429c      	cmp	r4, r3
 800673a:	bf08      	it	eq
 800673c:	68ec      	ldreq	r4, [r5, #12]
 800673e:	e7e6      	b.n	800670e <__swsetup_r+0x1e>
 8006740:	0758      	lsls	r0, r3, #29
 8006742:	d512      	bpl.n	800676a <__swsetup_r+0x7a>
 8006744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006746:	b141      	cbz	r1, 800675a <__swsetup_r+0x6a>
 8006748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800674c:	4299      	cmp	r1, r3
 800674e:	d002      	beq.n	8006756 <__swsetup_r+0x66>
 8006750:	4630      	mov	r0, r6
 8006752:	f000 fa59 	bl	8006c08 <_free_r>
 8006756:	2300      	movs	r3, #0
 8006758:	6363      	str	r3, [r4, #52]	; 0x34
 800675a:	89a3      	ldrh	r3, [r4, #12]
 800675c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006760:	81a3      	strh	r3, [r4, #12]
 8006762:	2300      	movs	r3, #0
 8006764:	6063      	str	r3, [r4, #4]
 8006766:	6923      	ldr	r3, [r4, #16]
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	f043 0308 	orr.w	r3, r3, #8
 8006770:	81a3      	strh	r3, [r4, #12]
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	b94b      	cbnz	r3, 800678a <__swsetup_r+0x9a>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800677c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006780:	d003      	beq.n	800678a <__swsetup_r+0x9a>
 8006782:	4621      	mov	r1, r4
 8006784:	4630      	mov	r0, r6
 8006786:	f000 f9ff 	bl	8006b88 <__smakebuf_r>
 800678a:	89a0      	ldrh	r0, [r4, #12]
 800678c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006790:	f010 0301 	ands.w	r3, r0, #1
 8006794:	d00a      	beq.n	80067ac <__swsetup_r+0xbc>
 8006796:	2300      	movs	r3, #0
 8006798:	60a3      	str	r3, [r4, #8]
 800679a:	6963      	ldr	r3, [r4, #20]
 800679c:	425b      	negs	r3, r3
 800679e:	61a3      	str	r3, [r4, #24]
 80067a0:	6923      	ldr	r3, [r4, #16]
 80067a2:	b943      	cbnz	r3, 80067b6 <__swsetup_r+0xc6>
 80067a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067a8:	d1ba      	bne.n	8006720 <__swsetup_r+0x30>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	0781      	lsls	r1, r0, #30
 80067ae:	bf58      	it	pl
 80067b0:	6963      	ldrpl	r3, [r4, #20]
 80067b2:	60a3      	str	r3, [r4, #8]
 80067b4:	e7f4      	b.n	80067a0 <__swsetup_r+0xb0>
 80067b6:	2000      	movs	r0, #0
 80067b8:	e7f7      	b.n	80067aa <__swsetup_r+0xba>
 80067ba:	bf00      	nop
 80067bc:	20000020 	.word	0x20000020
 80067c0:	080077c8 	.word	0x080077c8
 80067c4:	080077e8 	.word	0x080077e8
 80067c8:	080077a8 	.word	0x080077a8

080067cc <__sflush_r>:
 80067cc:	898a      	ldrh	r2, [r1, #12]
 80067ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d2:	4605      	mov	r5, r0
 80067d4:	0710      	lsls	r0, r2, #28
 80067d6:	460c      	mov	r4, r1
 80067d8:	d458      	bmi.n	800688c <__sflush_r+0xc0>
 80067da:	684b      	ldr	r3, [r1, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dc05      	bgt.n	80067ec <__sflush_r+0x20>
 80067e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dc02      	bgt.n	80067ec <__sflush_r+0x20>
 80067e6:	2000      	movs	r0, #0
 80067e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	d0f9      	beq.n	80067e6 <__sflush_r+0x1a>
 80067f2:	2300      	movs	r3, #0
 80067f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067f8:	682f      	ldr	r7, [r5, #0]
 80067fa:	602b      	str	r3, [r5, #0]
 80067fc:	d032      	beq.n	8006864 <__sflush_r+0x98>
 80067fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	075a      	lsls	r2, r3, #29
 8006804:	d505      	bpl.n	8006812 <__sflush_r+0x46>
 8006806:	6863      	ldr	r3, [r4, #4]
 8006808:	1ac0      	subs	r0, r0, r3
 800680a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800680c:	b10b      	cbz	r3, 8006812 <__sflush_r+0x46>
 800680e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006810:	1ac0      	subs	r0, r0, r3
 8006812:	2300      	movs	r3, #0
 8006814:	4602      	mov	r2, r0
 8006816:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006818:	4628      	mov	r0, r5
 800681a:	6a21      	ldr	r1, [r4, #32]
 800681c:	47b0      	blx	r6
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	d106      	bne.n	8006832 <__sflush_r+0x66>
 8006824:	6829      	ldr	r1, [r5, #0]
 8006826:	291d      	cmp	r1, #29
 8006828:	d82c      	bhi.n	8006884 <__sflush_r+0xb8>
 800682a:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <__sflush_r+0x108>)
 800682c:	40ca      	lsrs	r2, r1
 800682e:	07d6      	lsls	r6, r2, #31
 8006830:	d528      	bpl.n	8006884 <__sflush_r+0xb8>
 8006832:	2200      	movs	r2, #0
 8006834:	6062      	str	r2, [r4, #4]
 8006836:	6922      	ldr	r2, [r4, #16]
 8006838:	04d9      	lsls	r1, r3, #19
 800683a:	6022      	str	r2, [r4, #0]
 800683c:	d504      	bpl.n	8006848 <__sflush_r+0x7c>
 800683e:	1c42      	adds	r2, r0, #1
 8006840:	d101      	bne.n	8006846 <__sflush_r+0x7a>
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	b903      	cbnz	r3, 8006848 <__sflush_r+0x7c>
 8006846:	6560      	str	r0, [r4, #84]	; 0x54
 8006848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800684a:	602f      	str	r7, [r5, #0]
 800684c:	2900      	cmp	r1, #0
 800684e:	d0ca      	beq.n	80067e6 <__sflush_r+0x1a>
 8006850:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006854:	4299      	cmp	r1, r3
 8006856:	d002      	beq.n	800685e <__sflush_r+0x92>
 8006858:	4628      	mov	r0, r5
 800685a:	f000 f9d5 	bl	8006c08 <_free_r>
 800685e:	2000      	movs	r0, #0
 8006860:	6360      	str	r0, [r4, #52]	; 0x34
 8006862:	e7c1      	b.n	80067e8 <__sflush_r+0x1c>
 8006864:	6a21      	ldr	r1, [r4, #32]
 8006866:	2301      	movs	r3, #1
 8006868:	4628      	mov	r0, r5
 800686a:	47b0      	blx	r6
 800686c:	1c41      	adds	r1, r0, #1
 800686e:	d1c7      	bne.n	8006800 <__sflush_r+0x34>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0c4      	beq.n	8006800 <__sflush_r+0x34>
 8006876:	2b1d      	cmp	r3, #29
 8006878:	d001      	beq.n	800687e <__sflush_r+0xb2>
 800687a:	2b16      	cmp	r3, #22
 800687c:	d101      	bne.n	8006882 <__sflush_r+0xb6>
 800687e:	602f      	str	r7, [r5, #0]
 8006880:	e7b1      	b.n	80067e6 <__sflush_r+0x1a>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006888:	81a3      	strh	r3, [r4, #12]
 800688a:	e7ad      	b.n	80067e8 <__sflush_r+0x1c>
 800688c:	690f      	ldr	r7, [r1, #16]
 800688e:	2f00      	cmp	r7, #0
 8006890:	d0a9      	beq.n	80067e6 <__sflush_r+0x1a>
 8006892:	0793      	lsls	r3, r2, #30
 8006894:	bf18      	it	ne
 8006896:	2300      	movne	r3, #0
 8006898:	680e      	ldr	r6, [r1, #0]
 800689a:	bf08      	it	eq
 800689c:	694b      	ldreq	r3, [r1, #20]
 800689e:	eba6 0807 	sub.w	r8, r6, r7
 80068a2:	600f      	str	r7, [r1, #0]
 80068a4:	608b      	str	r3, [r1, #8]
 80068a6:	f1b8 0f00 	cmp.w	r8, #0
 80068aa:	dd9c      	ble.n	80067e6 <__sflush_r+0x1a>
 80068ac:	4643      	mov	r3, r8
 80068ae:	463a      	mov	r2, r7
 80068b0:	4628      	mov	r0, r5
 80068b2:	6a21      	ldr	r1, [r4, #32]
 80068b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80068b6:	47b0      	blx	r6
 80068b8:	2800      	cmp	r0, #0
 80068ba:	dc06      	bgt.n	80068ca <__sflush_r+0xfe>
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068c6:	81a3      	strh	r3, [r4, #12]
 80068c8:	e78e      	b.n	80067e8 <__sflush_r+0x1c>
 80068ca:	4407      	add	r7, r0
 80068cc:	eba8 0800 	sub.w	r8, r8, r0
 80068d0:	e7e9      	b.n	80068a6 <__sflush_r+0xda>
 80068d2:	bf00      	nop
 80068d4:	20400001 	.word	0x20400001

080068d8 <_fflush_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	690b      	ldr	r3, [r1, #16]
 80068dc:	4605      	mov	r5, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	b913      	cbnz	r3, 80068e8 <_fflush_r+0x10>
 80068e2:	2500      	movs	r5, #0
 80068e4:	4628      	mov	r0, r5
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	b118      	cbz	r0, 80068f2 <_fflush_r+0x1a>
 80068ea:	6983      	ldr	r3, [r0, #24]
 80068ec:	b90b      	cbnz	r3, 80068f2 <_fflush_r+0x1a>
 80068ee:	f000 f887 	bl	8006a00 <__sinit>
 80068f2:	4b14      	ldr	r3, [pc, #80]	; (8006944 <_fflush_r+0x6c>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	d11b      	bne.n	8006930 <_fflush_r+0x58>
 80068f8:	686c      	ldr	r4, [r5, #4]
 80068fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0ef      	beq.n	80068e2 <_fflush_r+0xa>
 8006902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006904:	07d0      	lsls	r0, r2, #31
 8006906:	d404      	bmi.n	8006912 <_fflush_r+0x3a>
 8006908:	0599      	lsls	r1, r3, #22
 800690a:	d402      	bmi.n	8006912 <_fflush_r+0x3a>
 800690c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690e:	f000 f915 	bl	8006b3c <__retarget_lock_acquire_recursive>
 8006912:	4628      	mov	r0, r5
 8006914:	4621      	mov	r1, r4
 8006916:	f7ff ff59 	bl	80067cc <__sflush_r>
 800691a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800691c:	4605      	mov	r5, r0
 800691e:	07da      	lsls	r2, r3, #31
 8006920:	d4e0      	bmi.n	80068e4 <_fflush_r+0xc>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	059b      	lsls	r3, r3, #22
 8006926:	d4dd      	bmi.n	80068e4 <_fflush_r+0xc>
 8006928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800692a:	f000 f908 	bl	8006b3e <__retarget_lock_release_recursive>
 800692e:	e7d9      	b.n	80068e4 <_fflush_r+0xc>
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <_fflush_r+0x70>)
 8006932:	429c      	cmp	r4, r3
 8006934:	d101      	bne.n	800693a <_fflush_r+0x62>
 8006936:	68ac      	ldr	r4, [r5, #8]
 8006938:	e7df      	b.n	80068fa <_fflush_r+0x22>
 800693a:	4b04      	ldr	r3, [pc, #16]	; (800694c <_fflush_r+0x74>)
 800693c:	429c      	cmp	r4, r3
 800693e:	bf08      	it	eq
 8006940:	68ec      	ldreq	r4, [r5, #12]
 8006942:	e7da      	b.n	80068fa <_fflush_r+0x22>
 8006944:	080077c8 	.word	0x080077c8
 8006948:	080077e8 	.word	0x080077e8
 800694c:	080077a8 	.word	0x080077a8

08006950 <std>:
 8006950:	2300      	movs	r3, #0
 8006952:	b510      	push	{r4, lr}
 8006954:	4604      	mov	r4, r0
 8006956:	e9c0 3300 	strd	r3, r3, [r0]
 800695a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800695e:	6083      	str	r3, [r0, #8]
 8006960:	8181      	strh	r1, [r0, #12]
 8006962:	6643      	str	r3, [r0, #100]	; 0x64
 8006964:	81c2      	strh	r2, [r0, #14]
 8006966:	6183      	str	r3, [r0, #24]
 8006968:	4619      	mov	r1, r3
 800696a:	2208      	movs	r2, #8
 800696c:	305c      	adds	r0, #92	; 0x5c
 800696e:	f7ff fdc3 	bl	80064f8 <memset>
 8006972:	4b05      	ldr	r3, [pc, #20]	; (8006988 <std+0x38>)
 8006974:	6224      	str	r4, [r4, #32]
 8006976:	6263      	str	r3, [r4, #36]	; 0x24
 8006978:	4b04      	ldr	r3, [pc, #16]	; (800698c <std+0x3c>)
 800697a:	62a3      	str	r3, [r4, #40]	; 0x28
 800697c:	4b04      	ldr	r3, [pc, #16]	; (8006990 <std+0x40>)
 800697e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006980:	4b04      	ldr	r3, [pc, #16]	; (8006994 <std+0x44>)
 8006982:	6323      	str	r3, [r4, #48]	; 0x30
 8006984:	bd10      	pop	{r4, pc}
 8006986:	bf00      	nop
 8006988:	08007351 	.word	0x08007351
 800698c:	08007373 	.word	0x08007373
 8006990:	080073ab 	.word	0x080073ab
 8006994:	080073cf 	.word	0x080073cf

08006998 <_cleanup_r>:
 8006998:	4901      	ldr	r1, [pc, #4]	; (80069a0 <_cleanup_r+0x8>)
 800699a:	f000 b8af 	b.w	8006afc <_fwalk_reent>
 800699e:	bf00      	nop
 80069a0:	080068d9 	.word	0x080068d9

080069a4 <__sfmoreglue>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	2568      	movs	r5, #104	; 0x68
 80069a8:	1e4a      	subs	r2, r1, #1
 80069aa:	4355      	muls	r5, r2
 80069ac:	460e      	mov	r6, r1
 80069ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80069b2:	f000 f975 	bl	8006ca0 <_malloc_r>
 80069b6:	4604      	mov	r4, r0
 80069b8:	b140      	cbz	r0, 80069cc <__sfmoreglue+0x28>
 80069ba:	2100      	movs	r1, #0
 80069bc:	e9c0 1600 	strd	r1, r6, [r0]
 80069c0:	300c      	adds	r0, #12
 80069c2:	60a0      	str	r0, [r4, #8]
 80069c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069c8:	f7ff fd96 	bl	80064f8 <memset>
 80069cc:	4620      	mov	r0, r4
 80069ce:	bd70      	pop	{r4, r5, r6, pc}

080069d0 <__sfp_lock_acquire>:
 80069d0:	4801      	ldr	r0, [pc, #4]	; (80069d8 <__sfp_lock_acquire+0x8>)
 80069d2:	f000 b8b3 	b.w	8006b3c <__retarget_lock_acquire_recursive>
 80069d6:	bf00      	nop
 80069d8:	20004248 	.word	0x20004248

080069dc <__sfp_lock_release>:
 80069dc:	4801      	ldr	r0, [pc, #4]	; (80069e4 <__sfp_lock_release+0x8>)
 80069de:	f000 b8ae 	b.w	8006b3e <__retarget_lock_release_recursive>
 80069e2:	bf00      	nop
 80069e4:	20004248 	.word	0x20004248

080069e8 <__sinit_lock_acquire>:
 80069e8:	4801      	ldr	r0, [pc, #4]	; (80069f0 <__sinit_lock_acquire+0x8>)
 80069ea:	f000 b8a7 	b.w	8006b3c <__retarget_lock_acquire_recursive>
 80069ee:	bf00      	nop
 80069f0:	20004243 	.word	0x20004243

080069f4 <__sinit_lock_release>:
 80069f4:	4801      	ldr	r0, [pc, #4]	; (80069fc <__sinit_lock_release+0x8>)
 80069f6:	f000 b8a2 	b.w	8006b3e <__retarget_lock_release_recursive>
 80069fa:	bf00      	nop
 80069fc:	20004243 	.word	0x20004243

08006a00 <__sinit>:
 8006a00:	b510      	push	{r4, lr}
 8006a02:	4604      	mov	r4, r0
 8006a04:	f7ff fff0 	bl	80069e8 <__sinit_lock_acquire>
 8006a08:	69a3      	ldr	r3, [r4, #24]
 8006a0a:	b11b      	cbz	r3, 8006a14 <__sinit+0x14>
 8006a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a10:	f7ff bff0 	b.w	80069f4 <__sinit_lock_release>
 8006a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006a18:	6523      	str	r3, [r4, #80]	; 0x50
 8006a1a:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <__sinit+0x68>)
 8006a1c:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <__sinit+0x6c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	bf08      	it	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	4620      	mov	r0, r4
 8006a2a:	bf08      	it	eq
 8006a2c:	61a3      	streq	r3, [r4, #24]
 8006a2e:	f000 f81f 	bl	8006a70 <__sfp>
 8006a32:	6060      	str	r0, [r4, #4]
 8006a34:	4620      	mov	r0, r4
 8006a36:	f000 f81b 	bl	8006a70 <__sfp>
 8006a3a:	60a0      	str	r0, [r4, #8]
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 f817 	bl	8006a70 <__sfp>
 8006a42:	2200      	movs	r2, #0
 8006a44:	2104      	movs	r1, #4
 8006a46:	60e0      	str	r0, [r4, #12]
 8006a48:	6860      	ldr	r0, [r4, #4]
 8006a4a:	f7ff ff81 	bl	8006950 <std>
 8006a4e:	2201      	movs	r2, #1
 8006a50:	2109      	movs	r1, #9
 8006a52:	68a0      	ldr	r0, [r4, #8]
 8006a54:	f7ff ff7c 	bl	8006950 <std>
 8006a58:	2202      	movs	r2, #2
 8006a5a:	2112      	movs	r1, #18
 8006a5c:	68e0      	ldr	r0, [r4, #12]
 8006a5e:	f7ff ff77 	bl	8006950 <std>
 8006a62:	2301      	movs	r3, #1
 8006a64:	61a3      	str	r3, [r4, #24]
 8006a66:	e7d1      	b.n	8006a0c <__sinit+0xc>
 8006a68:	080077a4 	.word	0x080077a4
 8006a6c:	08006999 	.word	0x08006999

08006a70 <__sfp>:
 8006a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a72:	4607      	mov	r7, r0
 8006a74:	f7ff ffac 	bl	80069d0 <__sfp_lock_acquire>
 8006a78:	4b1e      	ldr	r3, [pc, #120]	; (8006af4 <__sfp+0x84>)
 8006a7a:	681e      	ldr	r6, [r3, #0]
 8006a7c:	69b3      	ldr	r3, [r6, #24]
 8006a7e:	b913      	cbnz	r3, 8006a86 <__sfp+0x16>
 8006a80:	4630      	mov	r0, r6
 8006a82:	f7ff ffbd 	bl	8006a00 <__sinit>
 8006a86:	3648      	adds	r6, #72	; 0x48
 8006a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	d503      	bpl.n	8006a98 <__sfp+0x28>
 8006a90:	6833      	ldr	r3, [r6, #0]
 8006a92:	b30b      	cbz	r3, 8006ad8 <__sfp+0x68>
 8006a94:	6836      	ldr	r6, [r6, #0]
 8006a96:	e7f7      	b.n	8006a88 <__sfp+0x18>
 8006a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a9c:	b9d5      	cbnz	r5, 8006ad4 <__sfp+0x64>
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <__sfp+0x88>)
 8006aa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006aa4:	60e3      	str	r3, [r4, #12]
 8006aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8006aa8:	f000 f847 	bl	8006b3a <__retarget_lock_init_recursive>
 8006aac:	f7ff ff96 	bl	80069dc <__sfp_lock_release>
 8006ab0:	2208      	movs	r2, #8
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006abc:	6025      	str	r5, [r4, #0]
 8006abe:	61a5      	str	r5, [r4, #24]
 8006ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ac4:	f7ff fd18 	bl	80064f8 <memset>
 8006ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad4:	3468      	adds	r4, #104	; 0x68
 8006ad6:	e7d9      	b.n	8006a8c <__sfp+0x1c>
 8006ad8:	2104      	movs	r1, #4
 8006ada:	4638      	mov	r0, r7
 8006adc:	f7ff ff62 	bl	80069a4 <__sfmoreglue>
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	6030      	str	r0, [r6, #0]
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d1d5      	bne.n	8006a94 <__sfp+0x24>
 8006ae8:	f7ff ff78 	bl	80069dc <__sfp_lock_release>
 8006aec:	230c      	movs	r3, #12
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	e7ee      	b.n	8006ad0 <__sfp+0x60>
 8006af2:	bf00      	nop
 8006af4:	080077a4 	.word	0x080077a4
 8006af8:	ffff0001 	.word	0xffff0001

08006afc <_fwalk_reent>:
 8006afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b00:	4606      	mov	r6, r0
 8006b02:	4688      	mov	r8, r1
 8006b04:	2700      	movs	r7, #0
 8006b06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8006b12:	d505      	bpl.n	8006b20 <_fwalk_reent+0x24>
 8006b14:	6824      	ldr	r4, [r4, #0]
 8006b16:	2c00      	cmp	r4, #0
 8006b18:	d1f7      	bne.n	8006b0a <_fwalk_reent+0xe>
 8006b1a:	4638      	mov	r0, r7
 8006b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b20:	89ab      	ldrh	r3, [r5, #12]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d907      	bls.n	8006b36 <_fwalk_reent+0x3a>
 8006b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	d003      	beq.n	8006b36 <_fwalk_reent+0x3a>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4630      	mov	r0, r6
 8006b32:	47c0      	blx	r8
 8006b34:	4307      	orrs	r7, r0
 8006b36:	3568      	adds	r5, #104	; 0x68
 8006b38:	e7e9      	b.n	8006b0e <_fwalk_reent+0x12>

08006b3a <__retarget_lock_init_recursive>:
 8006b3a:	4770      	bx	lr

08006b3c <__retarget_lock_acquire_recursive>:
 8006b3c:	4770      	bx	lr

08006b3e <__retarget_lock_release_recursive>:
 8006b3e:	4770      	bx	lr

08006b40 <__swhatbuf_r>:
 8006b40:	b570      	push	{r4, r5, r6, lr}
 8006b42:	460e      	mov	r6, r1
 8006b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b48:	4614      	mov	r4, r2
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	461d      	mov	r5, r3
 8006b4e:	b096      	sub	sp, #88	; 0x58
 8006b50:	da07      	bge.n	8006b62 <__swhatbuf_r+0x22>
 8006b52:	2300      	movs	r3, #0
 8006b54:	602b      	str	r3, [r5, #0]
 8006b56:	89b3      	ldrh	r3, [r6, #12]
 8006b58:	061a      	lsls	r2, r3, #24
 8006b5a:	d410      	bmi.n	8006b7e <__swhatbuf_r+0x3e>
 8006b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b60:	e00e      	b.n	8006b80 <__swhatbuf_r+0x40>
 8006b62:	466a      	mov	r2, sp
 8006b64:	f000 fc5a 	bl	800741c <_fstat_r>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	dbf2      	blt.n	8006b52 <__swhatbuf_r+0x12>
 8006b6c:	9a01      	ldr	r2, [sp, #4]
 8006b6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b76:	425a      	negs	r2, r3
 8006b78:	415a      	adcs	r2, r3
 8006b7a:	602a      	str	r2, [r5, #0]
 8006b7c:	e7ee      	b.n	8006b5c <__swhatbuf_r+0x1c>
 8006b7e:	2340      	movs	r3, #64	; 0x40
 8006b80:	2000      	movs	r0, #0
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	b016      	add	sp, #88	; 0x58
 8006b86:	bd70      	pop	{r4, r5, r6, pc}

08006b88 <__smakebuf_r>:
 8006b88:	898b      	ldrh	r3, [r1, #12]
 8006b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b8c:	079d      	lsls	r5, r3, #30
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460c      	mov	r4, r1
 8006b92:	d507      	bpl.n	8006ba4 <__smakebuf_r+0x1c>
 8006b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	6163      	str	r3, [r4, #20]
 8006ba0:	b002      	add	sp, #8
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	466a      	mov	r2, sp
 8006ba6:	ab01      	add	r3, sp, #4
 8006ba8:	f7ff ffca 	bl	8006b40 <__swhatbuf_r>
 8006bac:	9900      	ldr	r1, [sp, #0]
 8006bae:	4605      	mov	r5, r0
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	f000 f875 	bl	8006ca0 <_malloc_r>
 8006bb6:	b948      	cbnz	r0, 8006bcc <__smakebuf_r+0x44>
 8006bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bbc:	059a      	lsls	r2, r3, #22
 8006bbe:	d4ef      	bmi.n	8006ba0 <__smakebuf_r+0x18>
 8006bc0:	f023 0303 	bic.w	r3, r3, #3
 8006bc4:	f043 0302 	orr.w	r3, r3, #2
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	e7e3      	b.n	8006b94 <__smakebuf_r+0xc>
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <__smakebuf_r+0x7c>)
 8006bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	6020      	str	r0, [r4, #0]
 8006bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	9b00      	ldr	r3, [sp, #0]
 8006bdc:	6120      	str	r0, [r4, #16]
 8006bde:	6163      	str	r3, [r4, #20]
 8006be0:	9b01      	ldr	r3, [sp, #4]
 8006be2:	b15b      	cbz	r3, 8006bfc <__smakebuf_r+0x74>
 8006be4:	4630      	mov	r0, r6
 8006be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bea:	f000 fc29 	bl	8007440 <_isatty_r>
 8006bee:	b128      	cbz	r0, 8006bfc <__smakebuf_r+0x74>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	f023 0303 	bic.w	r3, r3, #3
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	81a3      	strh	r3, [r4, #12]
 8006bfc:	89a0      	ldrh	r0, [r4, #12]
 8006bfe:	4305      	orrs	r5, r0
 8006c00:	81a5      	strh	r5, [r4, #12]
 8006c02:	e7cd      	b.n	8006ba0 <__smakebuf_r+0x18>
 8006c04:	08006999 	.word	0x08006999

08006c08 <_free_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	d043      	beq.n	8006c98 <_free_r+0x90>
 8006c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c14:	1f0c      	subs	r4, r1, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bfb8      	it	lt
 8006c1a:	18e4      	addlt	r4, r4, r3
 8006c1c:	f000 fc40 	bl	80074a0 <__malloc_lock>
 8006c20:	4a1e      	ldr	r2, [pc, #120]	; (8006c9c <_free_r+0x94>)
 8006c22:	6813      	ldr	r3, [r2, #0]
 8006c24:	4610      	mov	r0, r2
 8006c26:	b933      	cbnz	r3, 8006c36 <_free_r+0x2e>
 8006c28:	6063      	str	r3, [r4, #4]
 8006c2a:	6014      	str	r4, [r2, #0]
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c32:	f000 bc3b 	b.w	80074ac <__malloc_unlock>
 8006c36:	42a3      	cmp	r3, r4
 8006c38:	d90a      	bls.n	8006c50 <_free_r+0x48>
 8006c3a:	6821      	ldr	r1, [r4, #0]
 8006c3c:	1862      	adds	r2, r4, r1
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	bf01      	itttt	eq
 8006c42:	681a      	ldreq	r2, [r3, #0]
 8006c44:	685b      	ldreq	r3, [r3, #4]
 8006c46:	1852      	addeq	r2, r2, r1
 8006c48:	6022      	streq	r2, [r4, #0]
 8006c4a:	6063      	str	r3, [r4, #4]
 8006c4c:	6004      	str	r4, [r0, #0]
 8006c4e:	e7ed      	b.n	8006c2c <_free_r+0x24>
 8006c50:	461a      	mov	r2, r3
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	b10b      	cbz	r3, 8006c5a <_free_r+0x52>
 8006c56:	42a3      	cmp	r3, r4
 8006c58:	d9fa      	bls.n	8006c50 <_free_r+0x48>
 8006c5a:	6811      	ldr	r1, [r2, #0]
 8006c5c:	1850      	adds	r0, r2, r1
 8006c5e:	42a0      	cmp	r0, r4
 8006c60:	d10b      	bne.n	8006c7a <_free_r+0x72>
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	4401      	add	r1, r0
 8006c66:	1850      	adds	r0, r2, r1
 8006c68:	4283      	cmp	r3, r0
 8006c6a:	6011      	str	r1, [r2, #0]
 8006c6c:	d1de      	bne.n	8006c2c <_free_r+0x24>
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4401      	add	r1, r0
 8006c74:	6011      	str	r1, [r2, #0]
 8006c76:	6053      	str	r3, [r2, #4]
 8006c78:	e7d8      	b.n	8006c2c <_free_r+0x24>
 8006c7a:	d902      	bls.n	8006c82 <_free_r+0x7a>
 8006c7c:	230c      	movs	r3, #12
 8006c7e:	602b      	str	r3, [r5, #0]
 8006c80:	e7d4      	b.n	8006c2c <_free_r+0x24>
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	1821      	adds	r1, r4, r0
 8006c86:	428b      	cmp	r3, r1
 8006c88:	bf01      	itttt	eq
 8006c8a:	6819      	ldreq	r1, [r3, #0]
 8006c8c:	685b      	ldreq	r3, [r3, #4]
 8006c8e:	1809      	addeq	r1, r1, r0
 8006c90:	6021      	streq	r1, [r4, #0]
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	6054      	str	r4, [r2, #4]
 8006c96:	e7c9      	b.n	8006c2c <_free_r+0x24>
 8006c98:	bd38      	pop	{r3, r4, r5, pc}
 8006c9a:	bf00      	nop
 8006c9c:	200000d4 	.word	0x200000d4

08006ca0 <_malloc_r>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	1ccd      	adds	r5, r1, #3
 8006ca4:	f025 0503 	bic.w	r5, r5, #3
 8006ca8:	3508      	adds	r5, #8
 8006caa:	2d0c      	cmp	r5, #12
 8006cac:	bf38      	it	cc
 8006cae:	250c      	movcc	r5, #12
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	db01      	blt.n	8006cba <_malloc_r+0x1a>
 8006cb6:	42a9      	cmp	r1, r5
 8006cb8:	d903      	bls.n	8006cc2 <_malloc_r+0x22>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	6033      	str	r3, [r6, #0]
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc2:	f000 fbed 	bl	80074a0 <__malloc_lock>
 8006cc6:	4921      	ldr	r1, [pc, #132]	; (8006d4c <_malloc_r+0xac>)
 8006cc8:	680a      	ldr	r2, [r1, #0]
 8006cca:	4614      	mov	r4, r2
 8006ccc:	b99c      	cbnz	r4, 8006cf6 <_malloc_r+0x56>
 8006cce:	4f20      	ldr	r7, [pc, #128]	; (8006d50 <_malloc_r+0xb0>)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	b923      	cbnz	r3, 8006cde <_malloc_r+0x3e>
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4630      	mov	r0, r6
 8006cd8:	f000 fb2a 	bl	8007330 <_sbrk_r>
 8006cdc:	6038      	str	r0, [r7, #0]
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f000 fb25 	bl	8007330 <_sbrk_r>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	d123      	bne.n	8006d32 <_malloc_r+0x92>
 8006cea:	230c      	movs	r3, #12
 8006cec:	4630      	mov	r0, r6
 8006cee:	6033      	str	r3, [r6, #0]
 8006cf0:	f000 fbdc 	bl	80074ac <__malloc_unlock>
 8006cf4:	e7e3      	b.n	8006cbe <_malloc_r+0x1e>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	1b5b      	subs	r3, r3, r5
 8006cfa:	d417      	bmi.n	8006d2c <_malloc_r+0x8c>
 8006cfc:	2b0b      	cmp	r3, #11
 8006cfe:	d903      	bls.n	8006d08 <_malloc_r+0x68>
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	441c      	add	r4, r3
 8006d04:	6025      	str	r5, [r4, #0]
 8006d06:	e004      	b.n	8006d12 <_malloc_r+0x72>
 8006d08:	6863      	ldr	r3, [r4, #4]
 8006d0a:	42a2      	cmp	r2, r4
 8006d0c:	bf0c      	ite	eq
 8006d0e:	600b      	streq	r3, [r1, #0]
 8006d10:	6053      	strne	r3, [r2, #4]
 8006d12:	4630      	mov	r0, r6
 8006d14:	f000 fbca 	bl	80074ac <__malloc_unlock>
 8006d18:	f104 000b 	add.w	r0, r4, #11
 8006d1c:	1d23      	adds	r3, r4, #4
 8006d1e:	f020 0007 	bic.w	r0, r0, #7
 8006d22:	1ac2      	subs	r2, r0, r3
 8006d24:	d0cc      	beq.n	8006cc0 <_malloc_r+0x20>
 8006d26:	1a1b      	subs	r3, r3, r0
 8006d28:	50a3      	str	r3, [r4, r2]
 8006d2a:	e7c9      	b.n	8006cc0 <_malloc_r+0x20>
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	6864      	ldr	r4, [r4, #4]
 8006d30:	e7cc      	b.n	8006ccc <_malloc_r+0x2c>
 8006d32:	1cc4      	adds	r4, r0, #3
 8006d34:	f024 0403 	bic.w	r4, r4, #3
 8006d38:	42a0      	cmp	r0, r4
 8006d3a:	d0e3      	beq.n	8006d04 <_malloc_r+0x64>
 8006d3c:	1a21      	subs	r1, r4, r0
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f000 faf6 	bl	8007330 <_sbrk_r>
 8006d44:	3001      	adds	r0, #1
 8006d46:	d1dd      	bne.n	8006d04 <_malloc_r+0x64>
 8006d48:	e7cf      	b.n	8006cea <_malloc_r+0x4a>
 8006d4a:	bf00      	nop
 8006d4c:	200000d4 	.word	0x200000d4
 8006d50:	200000d8 	.word	0x200000d8

08006d54 <__sfputc_r>:
 8006d54:	6893      	ldr	r3, [r2, #8]
 8006d56:	b410      	push	{r4}
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	6093      	str	r3, [r2, #8]
 8006d5e:	da07      	bge.n	8006d70 <__sfputc_r+0x1c>
 8006d60:	6994      	ldr	r4, [r2, #24]
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	db01      	blt.n	8006d6a <__sfputc_r+0x16>
 8006d66:	290a      	cmp	r1, #10
 8006d68:	d102      	bne.n	8006d70 <__sfputc_r+0x1c>
 8006d6a:	bc10      	pop	{r4}
 8006d6c:	f7ff bc6e 	b.w	800664c <__swbuf_r>
 8006d70:	6813      	ldr	r3, [r2, #0]
 8006d72:	1c58      	adds	r0, r3, #1
 8006d74:	6010      	str	r0, [r2, #0]
 8006d76:	7019      	strb	r1, [r3, #0]
 8006d78:	4608      	mov	r0, r1
 8006d7a:	bc10      	pop	{r4}
 8006d7c:	4770      	bx	lr

08006d7e <__sfputs_r>:
 8006d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d80:	4606      	mov	r6, r0
 8006d82:	460f      	mov	r7, r1
 8006d84:	4614      	mov	r4, r2
 8006d86:	18d5      	adds	r5, r2, r3
 8006d88:	42ac      	cmp	r4, r5
 8006d8a:	d101      	bne.n	8006d90 <__sfputs_r+0x12>
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	e007      	b.n	8006da0 <__sfputs_r+0x22>
 8006d90:	463a      	mov	r2, r7
 8006d92:	4630      	mov	r0, r6
 8006d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d98:	f7ff ffdc 	bl	8006d54 <__sfputc_r>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d1f3      	bne.n	8006d88 <__sfputs_r+0xa>
 8006da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006da4 <_vfiprintf_r>:
 8006da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	460d      	mov	r5, r1
 8006daa:	4614      	mov	r4, r2
 8006dac:	4698      	mov	r8, r3
 8006dae:	4606      	mov	r6, r0
 8006db0:	b09d      	sub	sp, #116	; 0x74
 8006db2:	b118      	cbz	r0, 8006dbc <_vfiprintf_r+0x18>
 8006db4:	6983      	ldr	r3, [r0, #24]
 8006db6:	b90b      	cbnz	r3, 8006dbc <_vfiprintf_r+0x18>
 8006db8:	f7ff fe22 	bl	8006a00 <__sinit>
 8006dbc:	4b89      	ldr	r3, [pc, #548]	; (8006fe4 <_vfiprintf_r+0x240>)
 8006dbe:	429d      	cmp	r5, r3
 8006dc0:	d11b      	bne.n	8006dfa <_vfiprintf_r+0x56>
 8006dc2:	6875      	ldr	r5, [r6, #4]
 8006dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dc6:	07d9      	lsls	r1, r3, #31
 8006dc8:	d405      	bmi.n	8006dd6 <_vfiprintf_r+0x32>
 8006dca:	89ab      	ldrh	r3, [r5, #12]
 8006dcc:	059a      	lsls	r2, r3, #22
 8006dce:	d402      	bmi.n	8006dd6 <_vfiprintf_r+0x32>
 8006dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dd2:	f7ff feb3 	bl	8006b3c <__retarget_lock_acquire_recursive>
 8006dd6:	89ab      	ldrh	r3, [r5, #12]
 8006dd8:	071b      	lsls	r3, r3, #28
 8006dda:	d501      	bpl.n	8006de0 <_vfiprintf_r+0x3c>
 8006ddc:	692b      	ldr	r3, [r5, #16]
 8006dde:	b9eb      	cbnz	r3, 8006e1c <_vfiprintf_r+0x78>
 8006de0:	4629      	mov	r1, r5
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7ff fc84 	bl	80066f0 <__swsetup_r>
 8006de8:	b1c0      	cbz	r0, 8006e1c <_vfiprintf_r+0x78>
 8006dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dec:	07dc      	lsls	r4, r3, #31
 8006dee:	d50e      	bpl.n	8006e0e <_vfiprintf_r+0x6a>
 8006df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df4:	b01d      	add	sp, #116	; 0x74
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	4b7b      	ldr	r3, [pc, #492]	; (8006fe8 <_vfiprintf_r+0x244>)
 8006dfc:	429d      	cmp	r5, r3
 8006dfe:	d101      	bne.n	8006e04 <_vfiprintf_r+0x60>
 8006e00:	68b5      	ldr	r5, [r6, #8]
 8006e02:	e7df      	b.n	8006dc4 <_vfiprintf_r+0x20>
 8006e04:	4b79      	ldr	r3, [pc, #484]	; (8006fec <_vfiprintf_r+0x248>)
 8006e06:	429d      	cmp	r5, r3
 8006e08:	bf08      	it	eq
 8006e0a:	68f5      	ldreq	r5, [r6, #12]
 8006e0c:	e7da      	b.n	8006dc4 <_vfiprintf_r+0x20>
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	0598      	lsls	r0, r3, #22
 8006e12:	d4ed      	bmi.n	8006df0 <_vfiprintf_r+0x4c>
 8006e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e16:	f7ff fe92 	bl	8006b3e <__retarget_lock_release_recursive>
 8006e1a:	e7e9      	b.n	8006df0 <_vfiprintf_r+0x4c>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e20:	2320      	movs	r3, #32
 8006e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e26:	2330      	movs	r3, #48	; 0x30
 8006e28:	f04f 0901 	mov.w	r9, #1
 8006e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e30:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006ff0 <_vfiprintf_r+0x24c>
 8006e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e38:	4623      	mov	r3, r4
 8006e3a:	469a      	mov	sl, r3
 8006e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e40:	b10a      	cbz	r2, 8006e46 <_vfiprintf_r+0xa2>
 8006e42:	2a25      	cmp	r2, #37	; 0x25
 8006e44:	d1f9      	bne.n	8006e3a <_vfiprintf_r+0x96>
 8006e46:	ebba 0b04 	subs.w	fp, sl, r4
 8006e4a:	d00b      	beq.n	8006e64 <_vfiprintf_r+0xc0>
 8006e4c:	465b      	mov	r3, fp
 8006e4e:	4622      	mov	r2, r4
 8006e50:	4629      	mov	r1, r5
 8006e52:	4630      	mov	r0, r6
 8006e54:	f7ff ff93 	bl	8006d7e <__sfputs_r>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f000 80aa 	beq.w	8006fb2 <_vfiprintf_r+0x20e>
 8006e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e60:	445a      	add	r2, fp
 8006e62:	9209      	str	r2, [sp, #36]	; 0x24
 8006e64:	f89a 3000 	ldrb.w	r3, [sl]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80a2 	beq.w	8006fb2 <_vfiprintf_r+0x20e>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e78:	f10a 0a01 	add.w	sl, sl, #1
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	9307      	str	r3, [sp, #28]
 8006e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e84:	931a      	str	r3, [sp, #104]	; 0x68
 8006e86:	4654      	mov	r4, sl
 8006e88:	2205      	movs	r2, #5
 8006e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8e:	4858      	ldr	r0, [pc, #352]	; (8006ff0 <_vfiprintf_r+0x24c>)
 8006e90:	f000 faf8 	bl	8007484 <memchr>
 8006e94:	9a04      	ldr	r2, [sp, #16]
 8006e96:	b9d8      	cbnz	r0, 8006ed0 <_vfiprintf_r+0x12c>
 8006e98:	06d1      	lsls	r1, r2, #27
 8006e9a:	bf44      	itt	mi
 8006e9c:	2320      	movmi	r3, #32
 8006e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ea2:	0713      	lsls	r3, r2, #28
 8006ea4:	bf44      	itt	mi
 8006ea6:	232b      	movmi	r3, #43	; 0x2b
 8006ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006eac:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb2:	d015      	beq.n	8006ee0 <_vfiprintf_r+0x13c>
 8006eb4:	4654      	mov	r4, sl
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	f04f 0c0a 	mov.w	ip, #10
 8006ebc:	9a07      	ldr	r2, [sp, #28]
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ec4:	3b30      	subs	r3, #48	; 0x30
 8006ec6:	2b09      	cmp	r3, #9
 8006ec8:	d94e      	bls.n	8006f68 <_vfiprintf_r+0x1c4>
 8006eca:	b1b0      	cbz	r0, 8006efa <_vfiprintf_r+0x156>
 8006ecc:	9207      	str	r2, [sp, #28]
 8006ece:	e014      	b.n	8006efa <_vfiprintf_r+0x156>
 8006ed0:	eba0 0308 	sub.w	r3, r0, r8
 8006ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	46a2      	mov	sl, r4
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	e7d2      	b.n	8006e86 <_vfiprintf_r+0xe2>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	1d19      	adds	r1, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9103      	str	r1, [sp, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfbb      	ittet	lt
 8006eec:	425b      	neglt	r3, r3
 8006eee:	f042 0202 	orrlt.w	r2, r2, #2
 8006ef2:	9307      	strge	r3, [sp, #28]
 8006ef4:	9307      	strlt	r3, [sp, #28]
 8006ef6:	bfb8      	it	lt
 8006ef8:	9204      	strlt	r2, [sp, #16]
 8006efa:	7823      	ldrb	r3, [r4, #0]
 8006efc:	2b2e      	cmp	r3, #46	; 0x2e
 8006efe:	d10c      	bne.n	8006f1a <_vfiprintf_r+0x176>
 8006f00:	7863      	ldrb	r3, [r4, #1]
 8006f02:	2b2a      	cmp	r3, #42	; 0x2a
 8006f04:	d135      	bne.n	8006f72 <_vfiprintf_r+0x1ce>
 8006f06:	9b03      	ldr	r3, [sp, #12]
 8006f08:	3402      	adds	r4, #2
 8006f0a:	1d1a      	adds	r2, r3, #4
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	9203      	str	r2, [sp, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bfb8      	it	lt
 8006f14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f18:	9305      	str	r3, [sp, #20]
 8006f1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007000 <_vfiprintf_r+0x25c>
 8006f1e:	2203      	movs	r2, #3
 8006f20:	4650      	mov	r0, sl
 8006f22:	7821      	ldrb	r1, [r4, #0]
 8006f24:	f000 faae 	bl	8007484 <memchr>
 8006f28:	b140      	cbz	r0, 8006f3c <_vfiprintf_r+0x198>
 8006f2a:	2340      	movs	r3, #64	; 0x40
 8006f2c:	eba0 000a 	sub.w	r0, r0, sl
 8006f30:	fa03 f000 	lsl.w	r0, r3, r0
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	3401      	adds	r4, #1
 8006f38:	4303      	orrs	r3, r0
 8006f3a:	9304      	str	r3, [sp, #16]
 8006f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f40:	2206      	movs	r2, #6
 8006f42:	482c      	ldr	r0, [pc, #176]	; (8006ff4 <_vfiprintf_r+0x250>)
 8006f44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f48:	f000 fa9c 	bl	8007484 <memchr>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d03f      	beq.n	8006fd0 <_vfiprintf_r+0x22c>
 8006f50:	4b29      	ldr	r3, [pc, #164]	; (8006ff8 <_vfiprintf_r+0x254>)
 8006f52:	bb1b      	cbnz	r3, 8006f9c <_vfiprintf_r+0x1f8>
 8006f54:	9b03      	ldr	r3, [sp, #12]
 8006f56:	3307      	adds	r3, #7
 8006f58:	f023 0307 	bic.w	r3, r3, #7
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	9303      	str	r3, [sp, #12]
 8006f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f62:	443b      	add	r3, r7
 8006f64:	9309      	str	r3, [sp, #36]	; 0x24
 8006f66:	e767      	b.n	8006e38 <_vfiprintf_r+0x94>
 8006f68:	460c      	mov	r4, r1
 8006f6a:	2001      	movs	r0, #1
 8006f6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f70:	e7a5      	b.n	8006ebe <_vfiprintf_r+0x11a>
 8006f72:	2300      	movs	r3, #0
 8006f74:	f04f 0c0a 	mov.w	ip, #10
 8006f78:	4619      	mov	r1, r3
 8006f7a:	3401      	adds	r4, #1
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f84:	3a30      	subs	r2, #48	; 0x30
 8006f86:	2a09      	cmp	r2, #9
 8006f88:	d903      	bls.n	8006f92 <_vfiprintf_r+0x1ee>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0c5      	beq.n	8006f1a <_vfiprintf_r+0x176>
 8006f8e:	9105      	str	r1, [sp, #20]
 8006f90:	e7c3      	b.n	8006f1a <_vfiprintf_r+0x176>
 8006f92:	4604      	mov	r4, r0
 8006f94:	2301      	movs	r3, #1
 8006f96:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f9a:	e7f0      	b.n	8006f7e <_vfiprintf_r+0x1da>
 8006f9c:	ab03      	add	r3, sp, #12
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <_vfiprintf_r+0x258>)
 8006fa6:	a904      	add	r1, sp, #16
 8006fa8:	f3af 8000 	nop.w
 8006fac:	4607      	mov	r7, r0
 8006fae:	1c78      	adds	r0, r7, #1
 8006fb0:	d1d6      	bne.n	8006f60 <_vfiprintf_r+0x1bc>
 8006fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb4:	07d9      	lsls	r1, r3, #31
 8006fb6:	d405      	bmi.n	8006fc4 <_vfiprintf_r+0x220>
 8006fb8:	89ab      	ldrh	r3, [r5, #12]
 8006fba:	059a      	lsls	r2, r3, #22
 8006fbc:	d402      	bmi.n	8006fc4 <_vfiprintf_r+0x220>
 8006fbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fc0:	f7ff fdbd 	bl	8006b3e <__retarget_lock_release_recursive>
 8006fc4:	89ab      	ldrh	r3, [r5, #12]
 8006fc6:	065b      	lsls	r3, r3, #25
 8006fc8:	f53f af12 	bmi.w	8006df0 <_vfiprintf_r+0x4c>
 8006fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fce:	e711      	b.n	8006df4 <_vfiprintf_r+0x50>
 8006fd0:	ab03      	add	r3, sp, #12
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	462a      	mov	r2, r5
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <_vfiprintf_r+0x258>)
 8006fda:	a904      	add	r1, sp, #16
 8006fdc:	f000 f882 	bl	80070e4 <_printf_i>
 8006fe0:	e7e4      	b.n	8006fac <_vfiprintf_r+0x208>
 8006fe2:	bf00      	nop
 8006fe4:	080077c8 	.word	0x080077c8
 8006fe8:	080077e8 	.word	0x080077e8
 8006fec:	080077a8 	.word	0x080077a8
 8006ff0:	08007808 	.word	0x08007808
 8006ff4:	08007812 	.word	0x08007812
 8006ff8:	00000000 	.word	0x00000000
 8006ffc:	08006d7f 	.word	0x08006d7f
 8007000:	0800780e 	.word	0x0800780e

08007004 <_printf_common>:
 8007004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	4616      	mov	r6, r2
 800700a:	4699      	mov	r9, r3
 800700c:	688a      	ldr	r2, [r1, #8]
 800700e:	690b      	ldr	r3, [r1, #16]
 8007010:	4607      	mov	r7, r0
 8007012:	4293      	cmp	r3, r2
 8007014:	bfb8      	it	lt
 8007016:	4613      	movlt	r3, r2
 8007018:	6033      	str	r3, [r6, #0]
 800701a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800701e:	460c      	mov	r4, r1
 8007020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007024:	b10a      	cbz	r2, 800702a <_printf_common+0x26>
 8007026:	3301      	adds	r3, #1
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	0699      	lsls	r1, r3, #26
 800702e:	bf42      	ittt	mi
 8007030:	6833      	ldrmi	r3, [r6, #0]
 8007032:	3302      	addmi	r3, #2
 8007034:	6033      	strmi	r3, [r6, #0]
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	f015 0506 	ands.w	r5, r5, #6
 800703c:	d106      	bne.n	800704c <_printf_common+0x48>
 800703e:	f104 0a19 	add.w	sl, r4, #25
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	6832      	ldr	r2, [r6, #0]
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	42ab      	cmp	r3, r5
 800704a:	dc28      	bgt.n	800709e <_printf_common+0x9a>
 800704c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007050:	1e13      	subs	r3, r2, #0
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	bf18      	it	ne
 8007056:	2301      	movne	r3, #1
 8007058:	0692      	lsls	r2, r2, #26
 800705a:	d42d      	bmi.n	80070b8 <_printf_common+0xb4>
 800705c:	4649      	mov	r1, r9
 800705e:	4638      	mov	r0, r7
 8007060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007064:	47c0      	blx	r8
 8007066:	3001      	adds	r0, #1
 8007068:	d020      	beq.n	80070ac <_printf_common+0xa8>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	68e5      	ldr	r5, [r4, #12]
 800706e:	f003 0306 	and.w	r3, r3, #6
 8007072:	2b04      	cmp	r3, #4
 8007074:	bf18      	it	ne
 8007076:	2500      	movne	r5, #0
 8007078:	6832      	ldr	r2, [r6, #0]
 800707a:	f04f 0600 	mov.w	r6, #0
 800707e:	68a3      	ldr	r3, [r4, #8]
 8007080:	bf08      	it	eq
 8007082:	1aad      	subeq	r5, r5, r2
 8007084:	6922      	ldr	r2, [r4, #16]
 8007086:	bf08      	it	eq
 8007088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800708c:	4293      	cmp	r3, r2
 800708e:	bfc4      	itt	gt
 8007090:	1a9b      	subgt	r3, r3, r2
 8007092:	18ed      	addgt	r5, r5, r3
 8007094:	341a      	adds	r4, #26
 8007096:	42b5      	cmp	r5, r6
 8007098:	d11a      	bne.n	80070d0 <_printf_common+0xcc>
 800709a:	2000      	movs	r0, #0
 800709c:	e008      	b.n	80070b0 <_printf_common+0xac>
 800709e:	2301      	movs	r3, #1
 80070a0:	4652      	mov	r2, sl
 80070a2:	4649      	mov	r1, r9
 80070a4:	4638      	mov	r0, r7
 80070a6:	47c0      	blx	r8
 80070a8:	3001      	adds	r0, #1
 80070aa:	d103      	bne.n	80070b4 <_printf_common+0xb0>
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b4:	3501      	adds	r5, #1
 80070b6:	e7c4      	b.n	8007042 <_printf_common+0x3e>
 80070b8:	2030      	movs	r0, #48	; 0x30
 80070ba:	18e1      	adds	r1, r4, r3
 80070bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070c6:	4422      	add	r2, r4
 80070c8:	3302      	adds	r3, #2
 80070ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070ce:	e7c5      	b.n	800705c <_printf_common+0x58>
 80070d0:	2301      	movs	r3, #1
 80070d2:	4622      	mov	r2, r4
 80070d4:	4649      	mov	r1, r9
 80070d6:	4638      	mov	r0, r7
 80070d8:	47c0      	blx	r8
 80070da:	3001      	adds	r0, #1
 80070dc:	d0e6      	beq.n	80070ac <_printf_common+0xa8>
 80070de:	3601      	adds	r6, #1
 80070e0:	e7d9      	b.n	8007096 <_printf_common+0x92>
	...

080070e4 <_printf_i>:
 80070e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	460c      	mov	r4, r1
 80070ea:	7e27      	ldrb	r7, [r4, #24]
 80070ec:	4691      	mov	r9, r2
 80070ee:	2f78      	cmp	r7, #120	; 0x78
 80070f0:	4680      	mov	r8, r0
 80070f2:	469a      	mov	sl, r3
 80070f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070fa:	d807      	bhi.n	800710c <_printf_i+0x28>
 80070fc:	2f62      	cmp	r7, #98	; 0x62
 80070fe:	d80a      	bhi.n	8007116 <_printf_i+0x32>
 8007100:	2f00      	cmp	r7, #0
 8007102:	f000 80d9 	beq.w	80072b8 <_printf_i+0x1d4>
 8007106:	2f58      	cmp	r7, #88	; 0x58
 8007108:	f000 80a4 	beq.w	8007254 <_printf_i+0x170>
 800710c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007114:	e03a      	b.n	800718c <_printf_i+0xa8>
 8007116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800711a:	2b15      	cmp	r3, #21
 800711c:	d8f6      	bhi.n	800710c <_printf_i+0x28>
 800711e:	a001      	add	r0, pc, #4	; (adr r0, 8007124 <_printf_i+0x40>)
 8007120:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007124:	0800717d 	.word	0x0800717d
 8007128:	08007191 	.word	0x08007191
 800712c:	0800710d 	.word	0x0800710d
 8007130:	0800710d 	.word	0x0800710d
 8007134:	0800710d 	.word	0x0800710d
 8007138:	0800710d 	.word	0x0800710d
 800713c:	08007191 	.word	0x08007191
 8007140:	0800710d 	.word	0x0800710d
 8007144:	0800710d 	.word	0x0800710d
 8007148:	0800710d 	.word	0x0800710d
 800714c:	0800710d 	.word	0x0800710d
 8007150:	0800729f 	.word	0x0800729f
 8007154:	080071c1 	.word	0x080071c1
 8007158:	08007281 	.word	0x08007281
 800715c:	0800710d 	.word	0x0800710d
 8007160:	0800710d 	.word	0x0800710d
 8007164:	080072c1 	.word	0x080072c1
 8007168:	0800710d 	.word	0x0800710d
 800716c:	080071c1 	.word	0x080071c1
 8007170:	0800710d 	.word	0x0800710d
 8007174:	0800710d 	.word	0x0800710d
 8007178:	08007289 	.word	0x08007289
 800717c:	680b      	ldr	r3, [r1, #0]
 800717e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	600a      	str	r2, [r1, #0]
 8007188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800718c:	2301      	movs	r3, #1
 800718e:	e0a4      	b.n	80072da <_printf_i+0x1f6>
 8007190:	6825      	ldr	r5, [r4, #0]
 8007192:	6808      	ldr	r0, [r1, #0]
 8007194:	062e      	lsls	r6, r5, #24
 8007196:	f100 0304 	add.w	r3, r0, #4
 800719a:	d50a      	bpl.n	80071b2 <_printf_i+0xce>
 800719c:	6805      	ldr	r5, [r0, #0]
 800719e:	600b      	str	r3, [r1, #0]
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	da03      	bge.n	80071ac <_printf_i+0xc8>
 80071a4:	232d      	movs	r3, #45	; 0x2d
 80071a6:	426d      	negs	r5, r5
 80071a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071ac:	230a      	movs	r3, #10
 80071ae:	485e      	ldr	r0, [pc, #376]	; (8007328 <_printf_i+0x244>)
 80071b0:	e019      	b.n	80071e6 <_printf_i+0x102>
 80071b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071b6:	6805      	ldr	r5, [r0, #0]
 80071b8:	600b      	str	r3, [r1, #0]
 80071ba:	bf18      	it	ne
 80071bc:	b22d      	sxthne	r5, r5
 80071be:	e7ef      	b.n	80071a0 <_printf_i+0xbc>
 80071c0:	680b      	ldr	r3, [r1, #0]
 80071c2:	6825      	ldr	r5, [r4, #0]
 80071c4:	1d18      	adds	r0, r3, #4
 80071c6:	6008      	str	r0, [r1, #0]
 80071c8:	0628      	lsls	r0, r5, #24
 80071ca:	d501      	bpl.n	80071d0 <_printf_i+0xec>
 80071cc:	681d      	ldr	r5, [r3, #0]
 80071ce:	e002      	b.n	80071d6 <_printf_i+0xf2>
 80071d0:	0669      	lsls	r1, r5, #25
 80071d2:	d5fb      	bpl.n	80071cc <_printf_i+0xe8>
 80071d4:	881d      	ldrh	r5, [r3, #0]
 80071d6:	2f6f      	cmp	r7, #111	; 0x6f
 80071d8:	bf0c      	ite	eq
 80071da:	2308      	moveq	r3, #8
 80071dc:	230a      	movne	r3, #10
 80071de:	4852      	ldr	r0, [pc, #328]	; (8007328 <_printf_i+0x244>)
 80071e0:	2100      	movs	r1, #0
 80071e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071e6:	6866      	ldr	r6, [r4, #4]
 80071e8:	2e00      	cmp	r6, #0
 80071ea:	bfa8      	it	ge
 80071ec:	6821      	ldrge	r1, [r4, #0]
 80071ee:	60a6      	str	r6, [r4, #8]
 80071f0:	bfa4      	itt	ge
 80071f2:	f021 0104 	bicge.w	r1, r1, #4
 80071f6:	6021      	strge	r1, [r4, #0]
 80071f8:	b90d      	cbnz	r5, 80071fe <_printf_i+0x11a>
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	d04d      	beq.n	800729a <_printf_i+0x1b6>
 80071fe:	4616      	mov	r6, r2
 8007200:	fbb5 f1f3 	udiv	r1, r5, r3
 8007204:	fb03 5711 	mls	r7, r3, r1, r5
 8007208:	5dc7      	ldrb	r7, [r0, r7]
 800720a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800720e:	462f      	mov	r7, r5
 8007210:	42bb      	cmp	r3, r7
 8007212:	460d      	mov	r5, r1
 8007214:	d9f4      	bls.n	8007200 <_printf_i+0x11c>
 8007216:	2b08      	cmp	r3, #8
 8007218:	d10b      	bne.n	8007232 <_printf_i+0x14e>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	07df      	lsls	r7, r3, #31
 800721e:	d508      	bpl.n	8007232 <_printf_i+0x14e>
 8007220:	6923      	ldr	r3, [r4, #16]
 8007222:	6861      	ldr	r1, [r4, #4]
 8007224:	4299      	cmp	r1, r3
 8007226:	bfde      	ittt	le
 8007228:	2330      	movle	r3, #48	; 0x30
 800722a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800722e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007232:	1b92      	subs	r2, r2, r6
 8007234:	6122      	str	r2, [r4, #16]
 8007236:	464b      	mov	r3, r9
 8007238:	4621      	mov	r1, r4
 800723a:	4640      	mov	r0, r8
 800723c:	f8cd a000 	str.w	sl, [sp]
 8007240:	aa03      	add	r2, sp, #12
 8007242:	f7ff fedf 	bl	8007004 <_printf_common>
 8007246:	3001      	adds	r0, #1
 8007248:	d14c      	bne.n	80072e4 <_printf_i+0x200>
 800724a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800724e:	b004      	add	sp, #16
 8007250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007254:	4834      	ldr	r0, [pc, #208]	; (8007328 <_printf_i+0x244>)
 8007256:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800725a:	680e      	ldr	r6, [r1, #0]
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007262:	061f      	lsls	r7, r3, #24
 8007264:	600e      	str	r6, [r1, #0]
 8007266:	d514      	bpl.n	8007292 <_printf_i+0x1ae>
 8007268:	07d9      	lsls	r1, r3, #31
 800726a:	bf44      	itt	mi
 800726c:	f043 0320 	orrmi.w	r3, r3, #32
 8007270:	6023      	strmi	r3, [r4, #0]
 8007272:	b91d      	cbnz	r5, 800727c <_printf_i+0x198>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	f023 0320 	bic.w	r3, r3, #32
 800727a:	6023      	str	r3, [r4, #0]
 800727c:	2310      	movs	r3, #16
 800727e:	e7af      	b.n	80071e0 <_printf_i+0xfc>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	f043 0320 	orr.w	r3, r3, #32
 8007286:	6023      	str	r3, [r4, #0]
 8007288:	2378      	movs	r3, #120	; 0x78
 800728a:	4828      	ldr	r0, [pc, #160]	; (800732c <_printf_i+0x248>)
 800728c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007290:	e7e3      	b.n	800725a <_printf_i+0x176>
 8007292:	065e      	lsls	r6, r3, #25
 8007294:	bf48      	it	mi
 8007296:	b2ad      	uxthmi	r5, r5
 8007298:	e7e6      	b.n	8007268 <_printf_i+0x184>
 800729a:	4616      	mov	r6, r2
 800729c:	e7bb      	b.n	8007216 <_printf_i+0x132>
 800729e:	680b      	ldr	r3, [r1, #0]
 80072a0:	6826      	ldr	r6, [r4, #0]
 80072a2:	1d1d      	adds	r5, r3, #4
 80072a4:	6960      	ldr	r0, [r4, #20]
 80072a6:	600d      	str	r5, [r1, #0]
 80072a8:	0635      	lsls	r5, r6, #24
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	d501      	bpl.n	80072b2 <_printf_i+0x1ce>
 80072ae:	6018      	str	r0, [r3, #0]
 80072b0:	e002      	b.n	80072b8 <_printf_i+0x1d4>
 80072b2:	0671      	lsls	r1, r6, #25
 80072b4:	d5fb      	bpl.n	80072ae <_printf_i+0x1ca>
 80072b6:	8018      	strh	r0, [r3, #0]
 80072b8:	2300      	movs	r3, #0
 80072ba:	4616      	mov	r6, r2
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	e7ba      	b.n	8007236 <_printf_i+0x152>
 80072c0:	680b      	ldr	r3, [r1, #0]
 80072c2:	1d1a      	adds	r2, r3, #4
 80072c4:	600a      	str	r2, [r1, #0]
 80072c6:	681e      	ldr	r6, [r3, #0]
 80072c8:	2100      	movs	r1, #0
 80072ca:	4630      	mov	r0, r6
 80072cc:	6862      	ldr	r2, [r4, #4]
 80072ce:	f000 f8d9 	bl	8007484 <memchr>
 80072d2:	b108      	cbz	r0, 80072d8 <_printf_i+0x1f4>
 80072d4:	1b80      	subs	r0, r0, r6
 80072d6:	6060      	str	r0, [r4, #4]
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	6123      	str	r3, [r4, #16]
 80072dc:	2300      	movs	r3, #0
 80072de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e2:	e7a8      	b.n	8007236 <_printf_i+0x152>
 80072e4:	4632      	mov	r2, r6
 80072e6:	4649      	mov	r1, r9
 80072e8:	4640      	mov	r0, r8
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	47d0      	blx	sl
 80072ee:	3001      	adds	r0, #1
 80072f0:	d0ab      	beq.n	800724a <_printf_i+0x166>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	079b      	lsls	r3, r3, #30
 80072f6:	d413      	bmi.n	8007320 <_printf_i+0x23c>
 80072f8:	68e0      	ldr	r0, [r4, #12]
 80072fa:	9b03      	ldr	r3, [sp, #12]
 80072fc:	4298      	cmp	r0, r3
 80072fe:	bfb8      	it	lt
 8007300:	4618      	movlt	r0, r3
 8007302:	e7a4      	b.n	800724e <_printf_i+0x16a>
 8007304:	2301      	movs	r3, #1
 8007306:	4632      	mov	r2, r6
 8007308:	4649      	mov	r1, r9
 800730a:	4640      	mov	r0, r8
 800730c:	47d0      	blx	sl
 800730e:	3001      	adds	r0, #1
 8007310:	d09b      	beq.n	800724a <_printf_i+0x166>
 8007312:	3501      	adds	r5, #1
 8007314:	68e3      	ldr	r3, [r4, #12]
 8007316:	9903      	ldr	r1, [sp, #12]
 8007318:	1a5b      	subs	r3, r3, r1
 800731a:	42ab      	cmp	r3, r5
 800731c:	dcf2      	bgt.n	8007304 <_printf_i+0x220>
 800731e:	e7eb      	b.n	80072f8 <_printf_i+0x214>
 8007320:	2500      	movs	r5, #0
 8007322:	f104 0619 	add.w	r6, r4, #25
 8007326:	e7f5      	b.n	8007314 <_printf_i+0x230>
 8007328:	08007819 	.word	0x08007819
 800732c:	0800782a 	.word	0x0800782a

08007330 <_sbrk_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	2300      	movs	r3, #0
 8007334:	4d05      	ldr	r5, [pc, #20]	; (800734c <_sbrk_r+0x1c>)
 8007336:	4604      	mov	r4, r0
 8007338:	4608      	mov	r0, r1
 800733a:	602b      	str	r3, [r5, #0]
 800733c:	f7f9 fa9c 	bl	8000878 <_sbrk>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_sbrk_r+0x1a>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b103      	cbz	r3, 800734a <_sbrk_r+0x1a>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	2000424c 	.word	0x2000424c

08007350 <__sread>:
 8007350:	b510      	push	{r4, lr}
 8007352:	460c      	mov	r4, r1
 8007354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007358:	f000 f8ae 	bl	80074b8 <_read_r>
 800735c:	2800      	cmp	r0, #0
 800735e:	bfab      	itete	ge
 8007360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007362:	89a3      	ldrhlt	r3, [r4, #12]
 8007364:	181b      	addge	r3, r3, r0
 8007366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800736a:	bfac      	ite	ge
 800736c:	6563      	strge	r3, [r4, #84]	; 0x54
 800736e:	81a3      	strhlt	r3, [r4, #12]
 8007370:	bd10      	pop	{r4, pc}

08007372 <__swrite>:
 8007372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007376:	461f      	mov	r7, r3
 8007378:	898b      	ldrh	r3, [r1, #12]
 800737a:	4605      	mov	r5, r0
 800737c:	05db      	lsls	r3, r3, #23
 800737e:	460c      	mov	r4, r1
 8007380:	4616      	mov	r6, r2
 8007382:	d505      	bpl.n	8007390 <__swrite+0x1e>
 8007384:	2302      	movs	r3, #2
 8007386:	2200      	movs	r2, #0
 8007388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800738c:	f000 f868 	bl	8007460 <_lseek_r>
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	4632      	mov	r2, r6
 8007394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	4628      	mov	r0, r5
 800739c:	463b      	mov	r3, r7
 800739e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073a6:	f000 b817 	b.w	80073d8 <_write_r>

080073aa <__sseek>:
 80073aa:	b510      	push	{r4, lr}
 80073ac:	460c      	mov	r4, r1
 80073ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b2:	f000 f855 	bl	8007460 <_lseek_r>
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	bf15      	itete	ne
 80073bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80073be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073c6:	81a3      	strheq	r3, [r4, #12]
 80073c8:	bf18      	it	ne
 80073ca:	81a3      	strhne	r3, [r4, #12]
 80073cc:	bd10      	pop	{r4, pc}

080073ce <__sclose>:
 80073ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d2:	f000 b813 	b.w	80073fc <_close_r>
	...

080073d8 <_write_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4604      	mov	r4, r0
 80073dc:	4608      	mov	r0, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	2200      	movs	r2, #0
 80073e2:	4d05      	ldr	r5, [pc, #20]	; (80073f8 <_write_r+0x20>)
 80073e4:	602a      	str	r2, [r5, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f7f8 fed6 	bl	8000198 <_write>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d102      	bne.n	80073f6 <_write_r+0x1e>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b103      	cbz	r3, 80073f6 <_write_r+0x1e>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	2000424c 	.word	0x2000424c

080073fc <_close_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	2300      	movs	r3, #0
 8007400:	4d05      	ldr	r5, [pc, #20]	; (8007418 <_close_r+0x1c>)
 8007402:	4604      	mov	r4, r0
 8007404:	4608      	mov	r0, r1
 8007406:	602b      	str	r3, [r5, #0]
 8007408:	f7f9 fa05 	bl	8000816 <_close>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_close_r+0x1a>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_close_r+0x1a>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	2000424c 	.word	0x2000424c

0800741c <_fstat_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	2300      	movs	r3, #0
 8007420:	4d06      	ldr	r5, [pc, #24]	; (800743c <_fstat_r+0x20>)
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	4611      	mov	r1, r2
 8007428:	602b      	str	r3, [r5, #0]
 800742a:	f7f9 f9ff 	bl	800082c <_fstat>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	d102      	bne.n	8007438 <_fstat_r+0x1c>
 8007432:	682b      	ldr	r3, [r5, #0]
 8007434:	b103      	cbz	r3, 8007438 <_fstat_r+0x1c>
 8007436:	6023      	str	r3, [r4, #0]
 8007438:	bd38      	pop	{r3, r4, r5, pc}
 800743a:	bf00      	nop
 800743c:	2000424c 	.word	0x2000424c

08007440 <_isatty_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	2300      	movs	r3, #0
 8007444:	4d05      	ldr	r5, [pc, #20]	; (800745c <_isatty_r+0x1c>)
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	f7f9 f9fd 	bl	800084a <_isatty>
 8007450:	1c43      	adds	r3, r0, #1
 8007452:	d102      	bne.n	800745a <_isatty_r+0x1a>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	b103      	cbz	r3, 800745a <_isatty_r+0x1a>
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	2000424c 	.word	0x2000424c

08007460 <_lseek_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	4611      	mov	r1, r2
 8007468:	2200      	movs	r2, #0
 800746a:	4d05      	ldr	r5, [pc, #20]	; (8007480 <_lseek_r+0x20>)
 800746c:	602a      	str	r2, [r5, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	f7f9 f9f5 	bl	800085e <_lseek>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d102      	bne.n	800747e <_lseek_r+0x1e>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	b103      	cbz	r3, 800747e <_lseek_r+0x1e>
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	2000424c 	.word	0x2000424c

08007484 <memchr>:
 8007484:	4603      	mov	r3, r0
 8007486:	b510      	push	{r4, lr}
 8007488:	b2c9      	uxtb	r1, r1
 800748a:	4402      	add	r2, r0
 800748c:	4293      	cmp	r3, r2
 800748e:	4618      	mov	r0, r3
 8007490:	d101      	bne.n	8007496 <memchr+0x12>
 8007492:	2000      	movs	r0, #0
 8007494:	e003      	b.n	800749e <memchr+0x1a>
 8007496:	7804      	ldrb	r4, [r0, #0]
 8007498:	3301      	adds	r3, #1
 800749a:	428c      	cmp	r4, r1
 800749c:	d1f6      	bne.n	800748c <memchr+0x8>
 800749e:	bd10      	pop	{r4, pc}

080074a0 <__malloc_lock>:
 80074a0:	4801      	ldr	r0, [pc, #4]	; (80074a8 <__malloc_lock+0x8>)
 80074a2:	f7ff bb4b 	b.w	8006b3c <__retarget_lock_acquire_recursive>
 80074a6:	bf00      	nop
 80074a8:	20004244 	.word	0x20004244

080074ac <__malloc_unlock>:
 80074ac:	4801      	ldr	r0, [pc, #4]	; (80074b4 <__malloc_unlock+0x8>)
 80074ae:	f7ff bb46 	b.w	8006b3e <__retarget_lock_release_recursive>
 80074b2:	bf00      	nop
 80074b4:	20004244 	.word	0x20004244

080074b8 <_read_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	4611      	mov	r1, r2
 80074c0:	2200      	movs	r2, #0
 80074c2:	4d05      	ldr	r5, [pc, #20]	; (80074d8 <_read_r+0x20>)
 80074c4:	602a      	str	r2, [r5, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	f7f9 f988 	bl	80007dc <_read>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_read_r+0x1e>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_read_r+0x1e>
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	2000424c 	.word	0x2000424c

080074dc <_init>:
 80074dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074de:	bf00      	nop
 80074e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e2:	bc08      	pop	{r3}
 80074e4:	469e      	mov	lr, r3
 80074e6:	4770      	bx	lr

080074e8 <_fini>:
 80074e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ea:	bf00      	nop
 80074ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ee:	bc08      	pop	{r3}
 80074f0:	469e      	mov	lr, r3
 80074f2:	4770      	bx	lr
